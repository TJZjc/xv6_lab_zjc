{"input":{"location":{"$mid":1,"fsPath":"/home/zjc/.vscode-server/extensions/extensions.json","external":"file:///home/zjc/.vscode-server/extensions/extensions.json","path":"/home/zjc/.vscode-server/extensions/extensions.json","scheme":"file"},"mtime":1691218514483,"profile":true,"profileScanOptions":{"bailOutWhenFileNotFound":true},"type":1,"excludeObsolete":true,"validate":true,"productVersion":"1.81.0","productDate":"2023-08-02T12:36:47.109Z","productCommit":"6445d93c81ebe42c4cbd7a60712e0b17d9463e97","devMode":false,"language":"zh-cn","translations":{}},"result":[{"type":1,"identifier":{"id":"ms-vscode.makefile-tools","uuid":"e09cf600-90a1-414e-92a0-031f1a5391c6"},"manifest":{"name":"makefile-tools","displayName":"Makefile Tools","description":"Provide makefile support in VS Code: C/C++ IntelliSense, build, debug/run.","version":"0.7.0","publisher":"ms-vscode","preview":true,"icon":"res/makefile-logo.png","readme":"README.md","author":{"name":"Microsoft Corporation"},"license":"SEE LICENSE IN LICENSE.txt","engines":{"vscode":"^1.74.0"},"bugs":{"url":"https://github.com/Microsoft/vscode-makefile-tools/issues","email":"c_cpp_support@microsoft.com"},"repository":{"type":"git","url":"https://github.com/Microsoft/vscode-makefile-tools.git"},"homepage":"https://github.com/Microsoft/vscode-makefile-tools","qna":"https://github.com/Microsoft/vscode-makefile-tools/issues","keywords":["C","C++","IntelliSense","Microsoft","Makefile"],"categories":["Programming Languages","Debuggers","Other"],"activationEvents":["onCommand:makefile.setBuildConfiguration","onCommand:makefile.getConfiguration","onCommand:makefile.setBuildTarget","onCommand:makefile.getBuildTarget","onCommand:makefile.buildTarget","onCommand:makefile.buildCleanTarget","onCommand:makefile.buildAll","onCommand:makefile.buildCleanAll","onCommand:makefile.setLaunchConfiguration","onCommand:makefile.launchDebug","onCommand:makefile.launchRun","onCommand:makefile.launchTargetPath","onCommand:makefile.getLaunchTargetPath","onCommand:makefile.launchTargetFileName","onCommand:makefile.getLaunchTargetFileName","onCommand:makefile.getLaunchTargetDirectory","onCommand:makefile.getLaunchTargetArgs","onCommand:makefile.getLaunchTargetArgsConcat","onCommand:makefile.makeBaseDirectory","onCommand:makefile.configure","onCommand:makefile.cleanConfigure","onCommand:makefile.preConfigure","onCommand:makefile.outline.setBuildConfiguration","onCommand:makefile.outline.setBuildTarget","onCommand:makefile.outline.buildTarget","onCommand:makefile.outline.buildCleanTarget","onCommand:makefile.outline.setLaunchConfiguration","onCommand:makefile.outline.launchDebug","onCommand:makefile.outline.launchRun","onCommand:makefile.outline.configure","onCommand:makefile.outline.cleanConfigure","onCommand:makefile.outline.preConfigure","onCommand:makefile.resetState","workspaceContains:**/makefile","workspaceContains:**/Makefile","workspaceContains:**/GNUmakefile"],"main":"./out/src/extension.js","contributes":{"commands":[{"command":"makefile.buildTarget","title":"Makefile: Build the current target"},{"command":"makefile.buildCleanTarget","title":"Makefile: Build clean the current target"},{"command":"makefile.buildAll","title":"Makefile: Build the target ALL"},{"command":"makefile.buildCleanAll","title":"Makefile: Build clean the target ALL"},{"command":"makefile.launchDebug","title":"Makefile: Debug the selected binary target"},{"command":"makefile.launchRun","title":"Makefile: Run the selected binary target in the terminal"},{"command":"makefile.setBuildConfiguration","title":"Makefile: Set the current build configuration"},{"command":"makefile.setBuildTarget","title":"Makefile: Set the target to be built by make"},{"command":"makefile.setLaunchConfiguration","title":"Makefile: Set the make launch configuration"},{"command":"makefile.configure","title":"Makefile: Configure"},{"command":"makefile.cleanConfigure","title":"Makefile: Clean Configure"},{"command":"makefile.preConfigure","title":"Makefile: Pre-Configure"},{"command":"makefile.outline.buildTarget","title":"Makefile: Build the current target","icon":{"light":"res/light/build.svg","dark":"res/dark/build.svg"}},{"command":"makefile.outline.buildCleanTarget","title":"Makefile: Build clean the current target"},{"command":"makefile.outline.launchDebug","title":"Makefile: Debug the selected binary target","icon":{"light":"res/light/debug.svg","dark":"res/dark/debug.svg"},"enablement":"makefile:localDebugFeature"},{"command":"makefile.outline.launchRun","title":"Makefile: Run the selected binary target in the terminal","icon":{"light":"res/light/run.svg","dark":"res/dark/run.svg"},"enablement":"makefile:localRunFeature"},{"command":"makefile.outline.setBuildConfiguration","title":"Makefile: Set the current build configuration","icon":{"light":"res/light/edit.svg","dark":"res/dark/edit.svg"}},{"command":"makefile.outline.setBuildTarget","title":"Makefile: Set the target to be built by make","icon":{"light":"res/light/edit.svg","dark":"res/dark/edit.svg"}},{"command":"makefile.outline.setLaunchConfiguration","title":"Makefile: Set the make launch configuration","icon":{"light":"res/light/edit.svg","dark":"res/dark/edit.svg"}},{"command":"workbench.action.openWorkspaceSettings","title":"Preferences: Open Workspace Settings","icon":{"light":"res/light/edit.svg","dark":"res/dark/edit.svg"}},{"command":"makefile.outline.configure","title":"Makefile: Configure","icon":{"light":"res/light/configure.svg","dark":"res/dark/configure.svg"}},{"command":"makefile.outline.cleanConfigure","title":"Makefile: Clean Configure"},{"command":"makefile.outline.preConfigure","title":"Makefile: Pre-Configure"},{"command":"makefile.resetState","title":"Makefile: Reset the Makefile Tools Extension workspace state (For troubleshooting)"}],"problemMatchers":[{"name":"gcc","source":"gcc","owner":"makefile-tools","fileLocation":["autoDetect","${command:makefile.makeBaseDirectory}"],"pattern":{"regexp":"^(.*?):(\\d+):(\\d*):?\\s+(?:fatal\\s+)?(warning|error):\\s+(.*)$","file":1,"line":2,"column":3,"severity":4,"message":5}},{"name":"msvc","source":"msvc","owner":"makefile-tools","base":"$msCompile","fileLocation":["autoDetect","${command:makefile.makeBaseDirectory}"]}],"configuration":{"type":"object","title":"Makefile Tools","properties":{"makefile.configurations":{"type":"array","default":[],"description":"The user defined makefile configurations","items":{"type":"object","default":null,"properties":{"name":{"type":"string","description":"The name of the makefile configuration"},"makefilePath":{"type":"string","description":"File path to the makefile"},"makePath":{"type":"string","description":"File path to the make command"},"makeDirectory":{"type":"string","description":"Folder path passed to make via the -C switch"},"makeArgs":{"type":"array","description":"Arguments to pass to the make command","items":{"type":"string"},"default":[]},"problemMatchers":{"type":"array","items":{"type":"string"},"default":["$gcc","$msvc"],"description":"Problem matcher names to use when building the current target"},"buildLog":{"type":"string","description":"File path to the build log used instead of dry-run output"}}},"scope":"resource"},"makefile.defaultLaunchConfiguration":{"type":"object","default":null,"description":"Various global debugger settings","properties":{"MIMode":{"type":"string","description":"The non VS debugger type: gdb or lldb","enum":["gdb","lldb"]},"miDebuggerPath":{"type":"string","description":"Path to the non VS debugger (gdb or lldb)"},"stopAtEntry":{"type":"boolean","description":"Stop at the entry point of the target","default":false},"symbolSearchPath":{"type":"string","description":"The path to the symbols"}},"scope":"resource"},"makefile.launchConfigurations":{"type":"array","default":[],"description":"The user defined launch (debug/run) configurations","items":{"type":"object","default":null,"properties":{"binaryPath":{"type":"string","description":"The full path to the binary to run or debug"},"binaryArgs":{"type":"array","description":"Arguments to pass to program command line","items":{"type":"string"},"default":[]},"cwd":{"type":"string","description":"Set the working directory for the program"},"MIMode":{"type":"string","description":"The non VS debugger type: gdb or lldb","enum":["gdb","lldb"]},"miDebuggerPath":{"type":"string","description":"Path to the non VS debugger (gdb or lldb)"},"stopAtEntry":{"type":"boolean","description":"Stop at the entry point of the target","default":false},"symbolSearchPath":{"type":"string","description":"The path to the symbols"}}},"scope":"resource"},"makefile.loggingLevel":{"type":"string","enum":["Normal","Verbose","Debug"],"default":"Normal","description":"The logging level for the makefile tools extension","scope":"resource"},"makefile.makePath":{"type":"string","default":"make","description":"The path to the make tool","scope":"resource"},"makefile.makeDirectory":{"type":"string","description":"The folder path to be passed to make via the switch -C","scope":"resource"},"makefile.makefilePath":{"type":"string","description":"The path to the makefile of the project","scope":"resource"},"makefile.buildLog":{"type":"string","description":"The path to the build log that is read to bypass a dry-run","default":null,"scope":"resource"},"makefile.extensionOutputFolder":{"type":"string","description":"The path to various output files produced by the extension. Defaults to the VS Code workspace storage location.","default":"","scope":"resource"},"makefile.extensionLog":{"type":"string","description":"The path to an output file storing all content from the Makefile output channel. Defaults to the value of the 'makefile.extensionOutputFolder' setting.","default":"","scope":"resource"},"makefile.configurationCachePath":{"type":"string","description":"The path to a cache file storing the output of the last dry-run make command. When unset, a file named 'configurationCache.log' is stored at the path specified by the 'makefile.extensionOutputFolder' setting.","default":"","scope":"resource"},"makefile.dryrunSwitches":{"type":"array","default":["--always-make","--keep-going","--print-directory"],"description":"Arguments to pass to the dry-run make invocation","items":{"type":"string"},"scope":"resource"},"makefile.additionalCompilerNames":{"type":"array","default":[],"description":"Names of compiler tools to be added to the extension known list","items":{"type":"string"},"scope":"resource"},"makefile.excludeCompilerNames":{"type":"array","default":[],"description":"Names of compiler tools to be excluded from the extension known list","items":{"type":"string"},"scope":"resource"},"makefile.configureOnOpen":{"type":"boolean","default":true,"description":"Automatically configure Makefile project directories when they are opened","scope":"resource"},"makefile.configureOnEdit":{"type":"boolean","default":true,"description":"Automatically configure Makefile project directories when any relevant makefiles and/or settings are changed","scope":"resource"},"makefile.configureAfterCommand":{"type":"boolean","default":true,"description":"Automatically configure Makefile project directories after relevant operations, like change build configuration or makefile target","scope":"resource"},"makefile.preConfigureScript":{"type":"string","description":"The path to the script that needs to be run at least once before configure","default":null,"scope":"resource"},"makefile.alwaysPreConfigure":{"type":"boolean","description":"Always run the pre-configure script before configure","default":false,"scope":"resource"},"makefile.ignoreDirectoryCommands":{"type":"boolean","description":"Don't analyze directory changing commands like cd, push, pop.","default":true,"scope":"resource"},"makefile.phonyOnlyTargets":{"type":"boolean","default":false,"description":"Display only the phony targets","scope":"resource"},"makefile.saveBeforeBuildOrConfigure":{"type":"boolean","default":true,"description":"Save opened files before building or configuring","scope":"resource"},"makefile.buildBeforeLaunch":{"type":"boolean","default":true,"description":"Build the current target before launch (debug/run)","scope":"resource"},"makefile.clearOutputBeforeBuild":{"type":"boolean","default":true,"description":"Clear the output channel at the beginning of a build","scope":"resource"},"makefile.compileCommandsPath":{"type":"string","default":null,"description":"The path to the compilation database file","scope":"resource"},"makefile.panel.visibility":{"type":"object","default":null,"properties":{"debug":{"type":"boolean","description":"Enable debugging locally (in this host) images built by this extension","default":true},"run":{"type":"boolean","description":"Enable running locally (in this host) images built by this extension","default":true}}}}},"viewsContainers":{"activitybar":[{"id":"makefile__viewContainer","title":"Makefile","when":"makefile:fullFeatureSet","icon":"res/viewcontainer.svg"}]},"views":{"makefile__viewContainer":[{"id":"makefile.outline","name":"Project Outline"}]},"menus":{"commandPalette":[{"command":"makefile.preConfigure","when":"makefile:fullFeatureSet"},{"command":"makefile.buildTarget","when":"makefile:fullFeatureSet"},{"command":"makefile.buildCleanTarget","when":"makefile:fullFeatureSet"},{"command":"makefile.buildAll","when":"makefile:fullFeatureSet"},{"command":"makefile.buildCleanAll","when":"makefile:fullFeatureSet"},{"command":"makefile.launchDebug","when":"makefile:localDebugFeature"},{"command":"makefile.launchRun","when":"makefile:localRunFeature"},{"command":"makefile.setBuildConfiguration","when":"makefile:fullFeatureSet"},{"command":"makefile.setBuildTarget","when":"makefile:fullFeatureSet"},{"command":"makefile.setLaunchConfiguration","when":"makefile:localDebugFeature"},{"command":"makefile.outline.preConfigure","when":"makefile:fullFeatureSet"},{"command":"makefile.outline.buildTarget","when":"makefile:fullFeatureSet"},{"command":"makefile.outline.buildCleanTarget","when":"makefile:fullFeatureSet"},{"command":"makefile.outline.launchDebug","when":"makefile:localDebugFeature"},{"command":"makefile.outline.launchRun","when":"makefile:localRunFeature"},{"command":"makefile.outline.setBuildConfiguration","when":"makefile:fullFeatureSet"},{"command":"makefile.outline.setBuildTarget","when":"makefile:fullFeatureSet"},{"command":"makefile.outline.setLaunchConfiguration","when":"makefile:localDebugFeature"},{"command":"workbench.action.openWorkspaceSettings","when":"always"}],"view/title":[{"command":"makefile.outline.preConfigure","when":"view == makefile.outline","group":"1_makefileOutline@1"},{"command":"makefile.outline.configure","when":"view == makefile.outline","group":"1_makefileOutline@2"},{"command":"makefile.outline.cleanConfigure","when":"view == makefile.outline","group":"1_makefileOutline@3"},{"command":"makefile.outline.buildTarget","when":"makefile:fullFeatureSet && view == makefile.outline","group":"navigation@1"},{"command":"makefile.outline.buildCleanTarget","when":"makefile:fullFeatureSet && view == makefile.outline","group":"1_makefileOutline@4"},{"command":"makefile.outline.launchDebug","when":"makefile:fullFeatureSet && view == makefile.outline && makefile:localDebugFeature","group":"navigation@2"},{"command":"makefile.outline.launchRun","when":"makefile:fullFeatureSet && view == makefile.outline && makefile:localRunFeature","group":"navigation@3"}],"view/item/context":[{"command":"makefile.outline.configure","when":"view == makefile.outline && viewItem =~ /nodeType=configuration/","group":"1_stateActions@1"},{"command":"makefile.outline.cleanConfigure","when":"view == makefile.outline && viewItem =~ /nodeType=configuration/","group":"1_stateActions@2"},{"command":"makefile.outline.setBuildConfiguration","when":"makefile:fullFeatureSet && view == makefile.outline && viewItem =~ /nodeType=configuration/","group":"inline@1"},{"command":"makefile.outline.buildTarget","when":"makefile:fullFeatureSet && view == makefile.outline && viewItem =~ /nodeType=buildTarget/","group":"1_stateActions@1"},{"command":"makefile.outline.buildCleanTarget","when":"makefile:fullFeatureSet && view == makefile.outline && viewItem =~ /nodeType=buildTarget/","group":"1_stateActions@2"},{"command":"makefile.outline.setBuildTarget","when":"makefile:fullFeatureSet && view == makefile.outline && viewItem =~ /nodeType=buildTarget/","group":"inline@1"},{"command":"makefile.outline.launchDebug","when":"makefile:fullFeatureSet && view == makefile.outline && viewItem =~ /nodeType=launchTarget/","group":"1_stateActions@1"},{"command":"makefile.outline.launchRun","when":"makefile:fullFeatureSet && view == makefile.outline && viewItem =~ /nodeType=launchTarget/","group":"1_stateActions@2"},{"command":"makefile.outline.setLaunchConfiguration","when":"makefile:fullFeatureSet && view == makefile.outline && viewItem =~ /nodeType=launchTarget/","group":"inline@1"},{"command":"workbench.action.openWorkspaceSettings","when":"view == makefile.outline && viewItem =~ /nodeType=makefilePathInfo/","group":"inline@1"},{"command":"workbench.action.openWorkspaceSettings","when":"view == makefile.outline && viewItem =~ /nodeType=makePathInfo/","group":"inline@1"},{"command":"workbench.action.openWorkspaceSettings","when":"view == makefile.outline && viewItem =~ /nodeType=buildLogPathInfo/","group":"inline@1"}]}},"scripts":{"vscode:prepublish":"yarn compile-production","compile":"yarn install && tsc -p ./","compile-production":"yarn install && yarn run translations-generate","translations-export":"gulp translations-export","translations-generate":"gulp translations-generate","translations-import":"gulp translations-import","watch":"tsc -watch -p ./","package":"vsce package --yarn -o makefile-tools.vsix","pretest":"yarn compile","test":"yarn run pretest && node ./out/src/test/runTest.js"},"devDependencies":{"@types/mocha":"^9.0.0","@types/node":"^10.17.17","@types/vscode":"^1.74.0","tslint":"^5.20.1","tslint-microsoft-contrib":"^6.2.0","tslint-no-unused-expression-chai":"^0.1.4","@types/chai":"^4.2.15","@types/chai-as-promised":"^7.1.3","@types/chai-string":"^1.4.2","chai":"^4.3.0","chai-as-promised":"^7.1.1","chai-string":"^1.5.0","typescript":"^5.0.2","vsce":"^1.95.0","vrsource-tslint-rules":"^6.0.0","vscode-nls-dev":"^3.3.2","gulp":"^4.0.2","gulp-eslint":"^6.0.0","gulp-filter":"^6.0.0","gulp-mocha":"^8.0.0","gulp-sourcemaps":"^3.0.0","gulp-typescript":"^5.0.1","fs-extra":"^9.1.0","@octokit/rest":"^18.1.1","parse-git-config":"^3.0.0","jsonc-parser":"^3.0.0","vscode-test":"^0.4.1"},"dependencies":{"@types/glob":"^7.1.1","glob":"^7.1.6","module-alias":"^2.2.2","vscode-cpptools":"^6.1.0","vscode-nls":"^5.0.0","@vscode/extension-telemetry":"^0.6.2","vscode-jsonrpc":"^3.6.2"},"resolutions":{"ansi-regex":"^5.0.1","glob-parent":"^5.1.2","markdown-it":"^12.3.2","minimist":"^1.2.6","nanoid":"^3.1.20","minimatch":"^3.0.5","xml2js":"^0.5.0"}},"location":{"$mid":1,"path":"/home/zjc/.vscode-server/extensions/ms-vscode.makefile-tools-0.7.0","scheme":"file"},"isBuiltin":false,"targetPlatform":"undefined","metadata":{"id":"e09cf600-90a1-414e-92a0-031f1a5391c6","publisherId":"5f5636e7-69ed-4afe-b5d6-8d231fb3d3ee","publisherDisplayName":"Microsoft","targetPlatform":"undefined","updated":false,"isPreReleaseVersion":false,"installedTimestamp":1688970417668,"preRelease":false},"isValid":true,"validations":[]},{"type":1,"identifier":{"id":"ms-vscode.cpptools-themes","uuid":"99b17261-8f6e-45f0-9ad5-a69c6f509a4f"},"manifest":{"name":"cpptools-themes","displayName":"C/C++ Themes","description":"UI Themes for C/C++ extension.","version":"2.0.0","publisher":"ms-vscode","preview":false,"icon":"assets/LanguageCCPP_color_128x.png","readme":"README.md","author":{"name":"Microsoft Corporation"},"license":"SEE LICENSE IN LICENSE.txt","engines":{"vscode":"^1.30.0"},"bugs":{"url":"https://github.com/Microsoft/vscode-cpptools/issues","email":"c_cpp_support@microsoft.com"},"repository":{"type":"git","url":"https://github.com/Microsoft/vscode-cpptools.git"},"homepage":"https://github.com/Microsoft/vscode-cpptools","qna":"https://github.com/Microsoft/vscode-cpptools/issues","keywords":["C","C++","Microsoft","Theme","Themes"],"categories":["Themes"],"contributes":{"themes":[{"id":"Visual Studio Dark - C++","label":"Dark (Visual Studio - C/C++)","uiTheme":"vs-dark","path":"./themes/cpptools_dark_vs_new.json"},{"id":"Visual Studio 2017 Dark - C++","label":"2017 Dark (Visual Studio - C/C++)","uiTheme":"vs-dark","path":"./themes/cpptools_dark_vs.json"},{"id":"Visual Studio Light - C++","label":"Light (Visual Studio - C/C++)","uiTheme":"vs","path":"./themes/cpptools_light_vs_new.json"},{"id":"Visual Studio 2017 Light - C++","label":"2017 Light (Visual Studio - C/C++)","uiTheme":"vs","path":"./themes/cpptools_light_vs.json"}]}},"location":{"$mid":1,"path":"/home/zjc/.vscode-server/extensions/ms-vscode.cpptools-themes-2.0.0","scheme":"file"},"isBuiltin":false,"targetPlatform":"undefined","metadata":{"id":"99b17261-8f6e-45f0-9ad5-a69c6f509a4f","publisherId":"5f5636e7-69ed-4afe-b5d6-8d231fb3d3ee","publisherDisplayName":"Microsoft","targetPlatform":"undefined","updated":false,"isPreReleaseVersion":false,"installedTimestamp":1688971048949},"isValid":true,"validations":[]},{"type":1,"identifier":{"id":"ms-vscode.cmake-tools","uuid":"7c889349-8749-43d4-8b5e-08939936d7f4"},"manifest":{"name":"cmake-tools","displayName":"CMake Tools","description":"Extended CMake support in Visual Studio Code","version":"1.14.34","publisher":"ms-vscode","repository":{"type":"git","url":"https://github.com/microsoft/vscode-cmake-tools"},"license":"MIT","bugs":{"url":"https://github.com/microsoft/vscode-cmake-tools/issues"},"homepage":"https://github.com/microsoft/vscode-cmake-tools","keywords":["cmake","tools","build","c++","native"],"engines":{"vscode":"^1.63.0"},"categories":["Other"],"galleryBanner":{"color":"#13578c","theme":"dark"},"icon":"res/logo.png","activationEvents":["onCommand:cmake.activeFolderName","onCommand:cmake.activeFolderPath","onCommand:cmake.activeConfigurePresetName","onCommand:cmake.activeBuildPresetName","onCommand:cmake.activeTestPresetName","onCommand:cmake.buildTargetName","onCommand:cmake.launchTargetPath","onCommand:cmake.launchTargetDirectory","onCommand:cmake.launchTargetFilename","onCommand:cmake.getLaunchTargetPath","onCommand:cmake.getLaunchTargetDirectory","onCommand:cmake.getLaunchTargetFilename","onCommand:cmake.buildType","onCommand:cmake.buildDirectory","onCommand:cmake.executableTargets","onCommand:cmake.buildKit","onCommand:cmake.tasksBuildCommand","workspaceContains:CMakeLists.txt","workspaceContains:*/CMakeLists.txt","workspaceContains:*/*/CMakeLists.txt","workspaceContains:*/*/*/CMakeLists.txt","workspaceContains:.vscode/cmake-kits.json"],"main":"./dist/main","contributes":{"commands":[{"command":"cmake.openCMakePresets","title":{"value":"打开 CMakepresets.json","original":"Open CMakePresets.json"},"when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake"},{"command":"cmake.addConfigurePreset","title":{"value":"添加配置预设","original":"Add Configure Preset"},"when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake"},{"command":"cmake.addBuildPreset","title":{"value":"添加生成预设","original":"Add Build Preset"},"when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake"},{"command":"cmake.addTestPreset","title":{"value":"添加测试预设","original":"Add Test Preset"},"when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake"},{"command":"cmake.selectConfigurePreset","title":{"value":"选择“配置预设”","original":"Select Configure Preset"},"when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake"},{"command":"cmake.projectStatus.selectConfigurePreset","title":{"value":"选择“配置预设”","original":"Select Configure Preset"},"when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake","icon":"$(edit)"},{"command":"cmake.selectBuildPreset","title":{"value":"选择“生成预设”","original":"Select Build Preset"},"when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake"},{"command":"cmake.projectStatus.selectBuildPreset","title":{"value":"选择“生成预设”","original":"Select Build Preset"},"when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake","icon":"$(edit)"},{"command":"cmake.selectTestPreset","title":{"value":"选择“测试预设”","original":"Select Test Preset"},"when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake"},{"command":"cmake.projectStatus.selectTestPreset","title":{"value":"选择“测试预设”","original":"Select Test Preset"},"when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake","icon":"$(edit)"},{"command":"cmake.projectStatus.setTestTarget","title":{"value":"设置测试目标","original":"Set test target"},"when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake","icon":"$(edit)"},{"command":"cmake.viewLog","title":{"value":"打开 CMake Tools 日志文件","original":"Open the CMake Tools Log File"},"when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.logDiagnostics","title":{"value":"日志诊断","original":"Log Diagnostics"},"when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.selectActiveFolder","title":{"value":"选择活动文件夹","original":"Select Active Folder"},"when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.projectStatus.selectActiveProject","title":{"value":"选择活动文件夹","original":"Select Active Folder"},"when":"cmake:enableFullFeatureSet","category":"CMake","icon":"$(edit)"},{"command":"cmake.outline.selectWorkspace","when":"cmake:enableFullFeatureSet","title":{"value":"选择活动文件夹","original":"Select Active Folder"},"icon":"$(gear)"},{"command":"cmake.editKits","title":{"value":"编辑用户本地 CMake 工具包","original":"Edit User-Local CMake Kits"},"when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.scanForKits","title":{"value":"扫描工具包","original":"Scan for Kits"},"when":"cmake:enableFullFeatureSet && !useCMakePresets","category":"CMake"},{"command":"cmake.scanForCompilers","title":{"value":"扫描编译器","original":"Scan for Compilers"},"when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake"},{"command":"cmake.selectKit","title":{"value":"选择工具包","original":"Select a Kit"},"when":"cmake:enableFullFeatureSet && !useCMakePresets","category":"CMake"},{"command":"cmake.projectStatus.selectKit","title":{"value":"选择工具包","original":"Select a Kit"},"when":"cmake:enableFullFeatureSet","category":"CMake","icon":"$(edit)"},{"command":"cmake.setVariant","title":{"value":"选择变量","original":"Select Variant"},"when":"cmake:enableFullFeatureSet && !useCMakePresets","category":"CMake"},{"command":"cmake.projectStatus.setVariant","title":{"value":"选择变量","original":"Select Variant"},"when":"cmake:enableFullFeatureSet && !useCMakePresets","category":"CMake","icon":"$(edit)"},{"command":"cmake.setVariantAll","title":{"value":"为所有项目选择变量","original":"Select Variant for All Projects"},"when":"cmake:enableFullFeatureSet && !useCMakePresets","category":"CMake"},{"command":"cmake.configure","title":{"value":"配置","original":"Configure"},"category":"CMake"},{"command":"cmake.outline.configure","title":{"value":"配置","original":"Configure"},"icon":{"dark":"res/dark/configure-icon.svg","light":"res/light/configure-icon.svg"}},{"command":"cmake.projectStatus.configure","title":{"value":"配置","original":"Configure"},"icon":{"dark":"res/dark/configure-icon.svg","light":"res/light/configure-icon.svg"},"when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.showConfigureCommand","title":{"value":"显示配置命令","original":"Show Configure Command"},"category":"CMake"},{"command":"cmake.configureAll","title":{"value":"配置所有项目","original":"Configure All Projects"},"category":"CMake"},{"command":"cmake.outline.configureAll","title":{"value":"配置所有项目","original":"Configure All Projects"},"icon":{"dark":"res/dark/configure-icon.svg","light":"res/light/configure-icon.svg"}},{"command":"cmake.build","title":{"value":"生成","original":"Build"},"when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.outline.build","title":{"value":"生成","original":"Build"},"when":"cmake:enableFullFeatureSet","icon":{"dark":"res/dark/build-icon.svg","light":"res/light/build-icon.svg"}},{"command":"cmake.projectStatus.build","title":{"value":"生成","original":"Build"},"when":"cmake:enableFullFeatureSet","icon":{"dark":"res/dark/build-icon.svg","light":"res/light/build-icon.svg"}},{"command":"cmake.outline.buildTarget","title":{"value":"生成","original":"Build"},"when":"cmake:enableFullFeatureSet","icon":{"dark":"res/dark/build-icon.svg","light":"res/light/build-icon.svg"}},{"command":"cmake.showBuildCommand","title":{"value":"显示生成命令","original":"Show Build Command"},"when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.buildAll","title":{"value":"生成所有项目","original":"Build All Projects"},"when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.outline.buildAll","title":{"value":"生成所有项目","original":"Build All Projects"},"when":"cmake:enableFullFeatureSet","icon":{"dark":"res/dark/build-icon.svg","light":"res/light/build-icon.svg"}},{"command":"cmake.buildNamedTarget","when":"cmake:enableFullFeatureSet","title":{"value":"(内部)按名称生成目标","original":"(Internal) Build a Target by Name"}},{"command":"cmake.compileFile","title":{"value":"编译活动文件","original":"Compile Active File"},"category":"CMake","when":"cmake:enableFullFeatureSet","icon":{"dark":"res/dark/build-icon.svg","light":"res/light/build-icon.svg"}},{"command":"cmake.outline.compileFile","title":{"value":"编译文件","original":"Compile File"},"when":"cmake:enableFullFeatureSet","icon":{"dark":"res/dark/build-icon.svg","light":"res/light/build-icon.svg"}},{"command":"cmake.install","title":{"value":"安装","original":"Install"},"when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.installAll","title":{"value":"安装所有项目","original":"Install All Projects"},"when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.buildWithTarget","title":{"value":"生成目标","original":"Build Target"},"when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.setDefaultTarget","title":{"value":"设置生成目标","original":"Set Build Target"},"when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.outline.setDefaultTarget","when":"cmake:enableFullFeatureSet","title":{"value":"设置为生成目标","original":"Set as Build Target"}},{"command":"cmake.projectStatus.setDefaultTarget","title":{"value":"设置生成目标","original":"Set Build Target"},"when":"cmake:enableFullFeatureSet","category":"CMake","icon":"$(edit)"},{"command":"cmake.cleanConfigure","title":{"value":"删除缓存并重新配置","original":"Delete Cache and Reconfigure"},"category":"CMake"},{"command":"cmake.outline.cleanConfigure","title":{"value":"清理重新配置","original":"Clean Reconfigure"}},{"command":"cmake.cleanConfigureAll","title":{"value":"删除缓存并重新配置所有项目","original":"Delete Cache and Reconfigure All Projects"},"category":"CMake"},{"command":"cmake.outline.cleanConfigureAll","title":{"value":"清理所有项目的重新配置","original":"Clean Reconfigure All Projects"}},{"command":"cmake.clean","title":{"value":"清理","original":"Clean"},"when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.outline.clean","when":"cmake:enableFullFeatureSet","title":{"value":"清理","original":"Clean"}},{"command":"cmake.cleanAll","title":{"value":"清理所有项目","original":"Clean All Projects"},"when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.outline.cleanAll","when":"cmake:enableFullFeatureSet","title":{"value":"清理所有项目","original":"Clean All Projects"}},{"command":"cmake.cleanRebuild","title":{"value":"清理重新生成","original":"Clean Rebuild"},"when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.outline.cleanRebuild","when":"cmake:enableFullFeatureSet","title":{"value":"清理重新生成","original":"Clean Rebuild"}},{"command":"cmake.cleanRebuildAll","title":{"value":"清理所有项目的重新生成","original":"Clean Rebuild All Projects"},"when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.outline.cleanRebuildAll","when":"cmake:enableFullFeatureSet","title":{"value":"清理所有项目的重新生成","original":"Clean Rebuild All Projects"}},{"command":"cmake.editCacheUI","when":"cmake:enableFullFeatureSet","title":{"value":"编辑 CMake 缓存(UI)","original":"Edit CMake Cache (UI)"},"category":"CMake"},{"command":"cmake.outline.editCacheUI","when":"cmake:enableFullFeatureSet","title":{"value":"编辑 CMake 缓存(UI)","original":"Edit CMake Cache (UI)"}},{"command":"cmake.ctest","title":{"value":"运行测试","original":"Run Tests"},"when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.projectStatus.ctest","title":{"value":"运行测试","original":"Run Tests"},"when":"cmake:enableFullFeatureSet","icon":"$(beaker)","category":"CMake"},{"command":"cmake.ctestAll","title":{"value":"为所有项目运行测试","original":"Run Tests for All Projects"},"when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.revealTestExplorer","title":{"value":"显示测试资源管理器","original":"Reveal Test Explorer"},"when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.refreshTests","title":{"value":"刷新测试","original":"Refresh Tests"},"when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.refreshTestsAll","title":{"value":"刷新所有项目的测试","original":"Refresh Tests for All Projects"},"when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.editCache","title":{"value":"编辑 CMake 缓存","original":"Edit CMake Cache"},"when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.quickStart","title":{"value":"快速入门","original":"Quick Start"},"category":"CMake"},{"command":"cmake.debugTarget","title":{"value":"调试","original":"Debug"},"when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.outline.debugTarget","when":"cmake:enableFullFeatureSet","title":{"value":"调试","original":"Debug"}},{"command":"cmake.projectStatus.debugTarget","when":"cmake:enableFullFeatureSet","title":{"value":"调试","original":"Debug"},"category":"CMake","icon":"$(debug-alt)"},{"command":"cmake.debugTargetAll","title":{"value":"调试所有项目","original":"Debug All Projects"},"when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.projectStatus.setDebugTarget","when":"cmake:enableFullFeatureSet","title":{"value":"设置调试目标","original":"Set Debug Target"},"icon":"$(edit)"},{"command":"cmake.launchTarget","title":{"value":"运行但不调试","original":"Run Without Debugging"},"when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.outline.launchTarget","when":"cmake:enableFullFeatureSet","title":{"value":"在终端中运行","original":"Run in Terminal"}},{"command":"cmake.projectStatus.launchTarget","when":"cmake:enableFullFeatureSet","title":{"value":"在终端中运行","original":"Run in Terminal"},"category":"CMake","icon":"$(run)"},{"command":"cmake.launchTargetAll","title":{"value":"运行所有项目但不调试","original":"Run All Projects Without Debugging"},"when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.selectLaunchTarget","title":{"value":"设置调试目标","original":"Set Debug Target"},"when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.outline.setLaunchTarget","when":"cmake:enableFullFeatureSet","title":{"value":"设置为启动/调试目标","original":"Set as Launch/Debug Target"}},{"command":"cmake.projectStatus.setLaunchTarget","when":"cmake:enableFullFeatureSet","title":{"value":"设置为启动/调试目标","original":"Set as Launch/Debug Target"},"icon":"$(edit)"},{"command":"cmake.stop","title":{"value":"取消生成","original":"Cancel Build"},"when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.projectStatus.stop","title":{"value":"取消生成","original":"Cancel Build"},"when":"cmake:enableFullFeatureSet","category":"CMake","icon":"$(x)"},{"command":"cmake.outline.stop","title":{"value":"取消生成","original":"Cancel Build"},"when":"cmake:enableFullFeatureSet","icon":"$(x)"},{"command":"cmake.stopAll","title":{"value":"取消所有项目的生成","original":"Cancel Build for All Projects"},"when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.outline.stopAll","title":{"value":"取消所有项目的生成","original":"Cancel Build for All Projects"},"when":"cmake:enableFullFeatureSet","icon":"$(x)"},{"command":"cmake.resetState","title":{"value":"重置 CMake Tools 扩展状态(用于故障排除)","original":"Reset CMake Tools Extension State (For troubleshooting)"},"category":"CMake"},{"command":"cmake.outline.runUtilityTarget","when":"cmake:enableFullFeatureSet","title":{"value":"运行实用工具","original":"Run Utility"}},{"command":"cmake.outline.revealInCMakeLists","when":"cmake:enableFullFeatureSet","title":{"value":"打开 CMakeLists.txt","original":"Open CMakeLists.txt"}},{"command":"cmake.projectStatus.update","when":"cmake:enableFullFeatureSet","title":{"value":"刷新项目状态","original":"Refresh the project status"},"category":"CMake","icon":"$(refresh)"}],"taskDefinitions":[{"type":"cmake","required":["command"],"properties":{"label":{"type":"string","description":"任务的名称"},"command":{"type":"string","enum":["build","configure","install","test","clean","cleanRebuild"],"description":"CMake 命令"},"targets":{"type":"array","items":{"type":"string"},"description":"CMake 生成目标"},"preset":{"type":"string","description":"CMake 预设名称。这是基于 CMake 命令的配置、生成或测试预设"},"options":{"type":"object","description":"%cmake-tools.taskDefinitions.properties.options.description","properties":{"cwd":{"type":"string","description":"已执行程序或脚本的当前工作目录。如果省略，则使用代码的当前工作区根。"},"environment":{"type":"object","markdownDescription":"格式为 “name” 的环境变量: “value”。"}}},"detail":{"type":"string","description":"任务类型的其他详细信息"}}}],"menus":{"commandPalette":[{"command":"cmake.openCMakePresets","when":"cmake:enableFullFeatureSet && useCMakePresets"},{"command":"cmake.addConfigurePreset","when":"cmake:enableFullFeatureSet && useCMakePresets"},{"command":"cmake.addBuildPreset","when":"cmake:enableFullFeatureSet && useCMakePresets"},{"command":"cmake.addTestPreset","when":"cmake:enableFullFeatureSet && useCMakePresets"},{"command":"cmake.selectConfigurePreset","when":"cmake:enableFullFeatureSet && useCMakePresets"},{"command":"cmake.selectBuildPreset","when":"cmake:enableFullFeatureSet && useCMakePresets"},{"command":"cmake.selectTestPreset","when":"cmake:enableFullFeatureSet && useCMakePresets"},{"when":"cmake:enableFullFeatureSet","command":"cmake.viewLog"},{"command":"cmake.configure"},{"command":"cmake.showConfigureCommand"},{"when":"cmake:enableFullFeatureSet && !useCMakePresets","command":"cmake.scanForKits"},{"command":"cmake.scanForCompilers","when":"cmake:enableFullFeatureSet && useCMakePresets"},{"when":"cmake:enableFullFeatureSet && !useCMakePresets","command":"cmake.selectKit"},{"when":"cmake:enableFullFeatureSet && !useCMakePresets","command":"cmake.editKits"},{"command":"cmake.quickStart"},{"when":"cmake:enableFullFeatureSet","command":"cmake.selectActiveFolder"},{"command":"cmake.resetState"},{"command":"cmake.configureAll","when":"cmake:multiProject"},{"when":"cmake:enableFullFeatureSet","command":"cmake.build"},{"when":"cmake:enableFullFeatureSet","command":"cmake.showBuildCommand"},{"command":"cmake.buildAll","when":"cmake:multiProject && cmake:enableFullFeatureSet"},{"when":"cmake:enableFullFeatureSet","command":"cmake.install"},{"command":"cmake.installAll","when":"cmake:multiProject && cmake:enableFullFeatureSet"},{"when":"cmake:enableFullFeatureSet","command":"cmake.buildWithTarget"},{"when":"cmake:enableFullFeatureSet","command":"cmake.compileFile"},{"when":"cmake:enableFullFeatureSet && !useCMakePresets","command":"cmake.setVariant"},{"command":"cmake.setVariantAll","when":"cmake:multiProject && cmake:enableFullFeatureSet && !useCMakePresets"},{"when":"cmake:enableFullFeatureSet","command":"cmake.setDefaultTarget"},{"command":"cmake.cleanConfigure"},{"command":"cmake.cleanConfigureAll","when":"cmake:multiProject"},{"when":"cmake:enableFullFeatureSet","command":"cmake.clean"},{"command":"cmake.cleanAll","when":"cmake:multiProject && cmake:enableFullFeatureSet"},{"when":"cmake:enableFullFeatureSet","command":"cmake.cleanRebuild"},{"command":"cmake.cleanRebuildAll","when":"cmake:multiProject && cmake:enableFullFeatureSet"},{"command":"cmake.editCacheUI","when":"cmake:enableFullFeatureSet"},{"when":"cmake:enableFullFeatureSet","command":"cmake.ctest"},{"command":"cmake.ctestAll","when":"cmake:multiProject && cmake:enableFullFeatureSet"},{"command":"cmake.revealTestExplorer","when":"cmake:enableFullFeatureSet"},{"command":"cmake.refreshTests","when":"cmake:enableFullFeatureSet"},{"command":"cmake.refreshTestsAll","when":"cmake:enableFullFeatureSet"},{"when":"cmake:enableFullFeatureSet","command":"cmake.editCache"},{"command":"cmake.debugTarget","when":"!cmake:hideDebugCommand && cmake:enableFullFeatureSet"},{"command":"cmake.debugTargetAll","when":"cmake:multiProject && !cmake:hideDebugCommand && cmake:enableFullFeatureSet"},{"command":"cmake.launchTarget","when":"!cmake:hideLaunchCommand && cmake:enableFullFeatureSet"},{"command":"cmake.launchTargetAll","when":"cmake:multiProject && !cmake:hideLaunchCommand && cmake:enableFullFeatureSet"},{"when":"cmake:enableFullFeatureSet","command":"cmake.selectLaunchTarget"},{"when":"cmake:enableFullFeatureSet","command":"cmake.stop"},{"command":"cmake.stopAll","when":"cmake:multiProject && cmake:enableFullFeatureSet"},{"command":"cmake.outline.configure","when":"never"},{"command":"cmake.outline.configureAll","when":"never"},{"command":"cmake.outline.build","when":"never"},{"command":"cmake.outline.buildAll","when":"never"},{"command":"cmake.outline.compileFile","when":"never"},{"command":"cmake.outline.selectWorkspace","when":"never"},{"command":"cmake.outline.cleanConfigure","when":"never"},{"command":"cmake.outline.cleanConfigureAll","when":"never"},{"command":"cmake.outline.clean","when":"never"},{"command":"cmake.outline.cleanAll","when":"never"},{"command":"cmake.outline.cleanRebuild","when":"never"},{"command":"cmake.outline.cleanRebuildAll","when":"never"},{"command":"cmake.outline.editCacheUI","when":"never"},{"command":"cmake.outline.stop","when":"never"},{"command":"cmake.outline.stopAll","when":"never"},{"command":"cmake.outline.buildTarget","when":"never"},{"command":"cmake.outline.runUtilityTarget","when":"never"},{"command":"cmake.outline.debugTarget","when":"never"},{"command":"cmake.outline.launchTarget","when":"never"},{"command":"cmake.outline.setDefaultTarget","when":"never"},{"command":"cmake.outline.setLaunchTarget","when":"never"},{"command":"cmake.outline.revealInCMakeLists","when":"never"},{"command":"cmake.projectStatus.update","when":"never"},{"command":"cmake.projectStatus.stop","when":"never"},{"command":"cmake.projectStatus.selectKit","when":"never"},{"command":"cmake.projectStatus.configure","when":"never"},{"command":"cmake.projectStatus.setVariant","when":"never"},{"command":"cmake.projectStatus.selectConfigurePreset","when":"never"},{"command":"cmake.projectStatus.build","when":"never"},{"command":"cmake.projectStatus.setDefaultTarget","when":"never"},{"command":"cmake.projectStatus.selectBuildPreset","when":"never"},{"command":"cmake.projectStatus.ctest","when":"never"},{"command":"cmake.projectStatus.debugTarget","when":"never"},{"command":"cmake.projectStatus.launchTarget","when":"never"},{"command":"cmake.projectStatus.setDebugTarget","when":"never"},{"command":"cmake.projectStatus.setLaunchTarget","when":"never"},{"command":"cmake.projectStatus.selectActiveProject","when":"never"}],"view/title":[{"command":"cmake.projectStatus.update","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet","group":"navigation@1"},{"command":"cmake.projectStatus.stop","when":"view == cmake.projectStatus && cmake:isBuilding && cmake:enableFullFeatureSet","group":"navigation@2"},{"command":"cmake.projectStatus.debugTarget","when":"view == cmake.projectStatus && !cmake:isBuilding && !cmake:hideDebugCommand && cmake:enableFullFeatureSet","group":"navigation@3"},{"command":"cmake.projectStatus.launchTarget","when":"view == cmake.projectStatus && !cmake:isBuilding && !cmake:hideLaunchCommand && cmake:enableFullFeatureSet","group":"navigation@3"},{"command":"cmake.outline.configureAll","when":"view == cmake.outline && !cmake:isBuilding","group":"navigation@1"},{"command":"cmake.outline.buildAll","when":"view == cmake.outline && !cmake:isBuilding && cmake:enableFullFeatureSet","group":"navigation@2"},{"command":"cmake.outline.stopAll","when":"view == cmake.outline && cmake:isBuilding && cmake:enableFullFeatureSet","group":"navigation@3"},{"command":"cmake.outline.cleanAll","when":"view == cmake.outline && cmake:enableFullFeatureSet","group":"1_cmakeOutline"},{"command":"cmake.outline.cleanConfigureAll","when":"view == cmake.outline","group":"1_cmakeOutline"},{"command":"cmake.outline.cleanRebuildAll","when":"view == cmake.outline && cmake:enableFullFeatureSet","group":"1_cmakeOutline"},{"command":"cmake.outline.editCacheUI","when":"view == cmake.outline && cmake:enableFullFeatureSet","group":"1_cmakeOutline"}],"view/item/context":[{"command":"cmake.projectStatus.stop","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'stop'","group":"inline"},{"command":"cmake.projectStatus.selectKit","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'kit'","group":"inline"},{"command":"cmake.projectStatus.configure","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'configure'","group":"inline"},{"command":"cmake.projectStatus.setVariant","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'variant'","group":"inline"},{"command":"cmake.projectStatus.selectConfigurePreset","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'configPreset'","group":"inline"},{"command":"cmake.projectStatus.build","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'build'","group":"inline"},{"command":"cmake.projectStatus.setDefaultTarget","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'buildTarget'","group":"inline"},{"command":"cmake.projectStatus.selectBuildPreset","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'buildPreset'","group":"inline"},{"command":"cmake.projectStatus.ctest","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'test'","group":"inline"},{"command":"cmake.projectStatus.setTestTarget","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'testTarget'","group":"inline"},{"command":"cmake.projectStatus.selectTestPreset","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'testPreset'","group":"inline"},{"command":"cmake.projectStatus.debugTarget","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'debug'","group":"inline"},{"command":"cmake.projectStatus.setDebugTarget","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'debugTarget'","group":"inline"},{"command":"cmake.projectStatus.launchTarget","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'launch'","group":"inline"},{"command":"cmake.projectStatus.setLaunchTarget","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'launchTarget'","group":"inline"},{"command":"cmake.projectStatus.selectActiveProject","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'activeProject'","group":"inline"},{"command":"cmake.outline.buildTarget","when":"view == cmake.outline && cmake:enableFullFeatureSet && viewItem =~ /canBuild=true|canRun=true/","group":"inline"},{"command":"cmake.outline.buildTarget","when":"view == cmake.outline && cmake:enableFullFeatureSet && viewItem =~ /canBuild=true/","group":"1_targetActions@1"},{"command":"cmake.outline.runUtilityTarget","when":"view == cmake.outline && cmake:enableFullFeatureSet && viewItem =~ /canRun=true/","group":"1_targetActions@2"},{"command":"cmake.outline.debugTarget","when":"view == cmake.outline && cmake:enableFullFeatureSet && viewItem =~ /type=EXECUTABLE/","group":"1_targetActions@3"},{"command":"cmake.outline.launchTarget","when":"view == cmake.outline && cmake:enableFullFeatureSet && viewItem =~ /type=EXECUTABLE/","group":"1_targetActions@4"},{"command":"cmake.outline.revealInCMakeLists","when":"view == cmake.outline && cmake:enableFullFeatureSet && viewItem =~ /nodeType=target/","group":"1_targetActions@5"},{"command":"cmake.outline.setDefaultTarget","when":"view == cmake.outline && cmake:enableFullFeatureSet && viewItem =~ /canRun=true|canBuild=true/ && viewItem =~ /isDefault=false/","group":"2_targetState@1"},{"command":"cmake.outline.setLaunchTarget","when":"view == cmake.outline && cmake:enableFullFeatureSet && viewItem =~ /type=EXECUTABLE/ && viewItem =~ /isLaunch=false/","group":"2_targetState@2"},{"command":"cmake.outline.configureAll","when":"view == cmake.outline && viewItem =~ /nodeType=file/ && viewItem =~ /cmakelists=true/","group":"1_fileActions@1"},{"command":"cmake.outline.buildAll","when":"cmake:enableFullFeatureSet && view == cmake.outline && viewItem =~ /nodeType=file/ && viewItem =~ /cmakelists=true/","group":"1_fileActions@2"},{"command":"cmake.outline.cleanAll","when":"cmake:enableFullFeatureSet && view == cmake.outline && viewItem =~ /nodeType=file/ && viewItem =~ /cmakelists=true/","group":"1_fileActions@3"},{"command":"cmake.outline.cleanConfigureAll","when":"view == cmake.outline && viewItem =~ /nodeType=file/ && viewItem =~ /cmakelists=true/","group":"1_fileActions@4"},{"command":"cmake.outline.cleanRebuildAll","when":"cmake:enableFullFeatureSet && view == cmake.outline && viewItem =~ /nodeType=file/ && viewItem =~ /cmakelists=true/","group":"1_fileActions@5"},{"command":"cmake.outline.compileFile","when":"cmake:enableFullFeatureSet && view == cmake.outline && viewItem =~ /nodeType=file/ && viewItem =~ /compilable=true/","group":"1_fileActions@6"},{"command":"cmake.outline.compileFile","when":"cmake:enableFullFeatureSet && view == cmake.outline && viewItem =~ /nodeType=file/ && viewItem =~ /compilable=true/","group":"inline"},{"command":"cmake.outline.configureAll","when":"view == cmake.outline && viewItem =~ /nodeType=file/ && viewItem =~ /cmakelists=true/","group":"inline"},{"command":"cmake.outline.selectWorkspace","when":"cmake:enableFullFeatureSet && view == cmake.outline && viewItem =~ /nodeType=workspace/ && viewItem =~ /selected=false/","group":"inline"}],"editor/title/context":[{"command":"cmake.compileFile","when":"resourceLangId == cpp && cmake:enableFullFeatureSet"},{"command":"cmake.compileFile","when":"resourceLangId == c && cmake:enableFullFeatureSet"}],"editor/title":[{"command":"cmake.compileFile","when":"resourceLangId == cpp && cmake:enableFullFeatureSet","group":"navigation"},{"command":"cmake.compileFile","when":"resourceLangId == c && cmake:enableFullFeatureSet","group":"navigation"}],"explorer/context":[{"command":"cmake.compileFile","when":"resourceLangId == cpp && cmake:enableFullFeatureSet"},{"command":"cmake.compileFile","when":"resourceLangId == c && cmake:enableFullFeatureSet"},{"command":"cmake.outline.configureAll","when":"resourceFilename == CMakeLists.txt"},{"command":"cmake.outline.buildAll","when":"resourceFilename == CMakeLists.txt && cmake:enableFullFeatureSet"},{"command":"cmake.outline.cleanAll","when":"resourceFilename == CMakeLists.txt && cmake:enableFullFeatureSet"},{"command":"cmake.outline.cleanConfigureAll","when":"resourceFilename == CMakeLists.txt"},{"command":"cmake.outline.cleanRebuildAll","when":"resourceFilename == CMakeLists.txt && cmake:enableFullFeatureSet"}],"touchBar":[{"command":"cmake.quickStart","when":"cmake:enableTouchBar && !cmake:enableFullFeatureSet","group":"CMake:start"},{"command":"cmake.configure","when":"cmake:enableTouchBar.configure && !cmake:isBuilding && !cmake:isConfiguring","group":"CMake:build"},{"command":"cmake.build","alt":"cmake.configure","when":"cmake:enableTouchBar.build && cmake:enableFullFeatureSet && !cmake:isBuilding && !cmake:isConfiguring","group":"CMake:build"},{"command":"cmake.stop","when":"cmake:enableTouchBar.build && cmake:enableFullFeatureSet && cmake:isBuilding","group":"CMake:build"},{"command":"cmake.debugTarget","alt":"cmake.selectLaunchTarget","when":"cmake:enableTouchBar.debug && cmake:enableFullFeatureSet && !cmake:hideDebugCommand","group":"CMake:run"},{"command":"cmake.launchTarget","when":"cmake:enableTouchBar.launch && cmake:enableFullFeatureSet && !cmake:hideLaunchCommand","group":"CMake:run"}]},"configuration":{"type":"object","title":"CMake Tools","properties":{"cmake.autoSelectActiveFolder":{"type":"boolean","default":true,"description":"自动选择活动文件夹。","scope":"window"},"cmake.cmakePath":{"type":"string","default":"cmake","description":"要使用的 CMake 可执行文件的名称/路径。","scope":"resource"},"cmake.buildDirectory":{"type":"string","default":"${workspaceFolder}/build","description":"CMake 生成文件将转到其中的目录。","scope":"resource"},"cmake.installPrefix":{"type":"string","default":null,"description":"CMake 安装文件将转到其中的目录。","scope":"resource"},"cmake.sourceDirectory":{"oneOf":[{"type":"string"},{"type":"array","items":{"type":"string"}}],"description":"指向 CMakeLists.txt 根目录/目录的路径或路径数组。","default":"${workspaceFolder}","scope":"resource"},"cmake.saveBeforeBuild":{"type":"boolean","default":true,"description":"在生成前保存打开的文件。","scope":"resource"},"cmake.buildBeforeRun":{"type":"boolean","default":true,"description":"请先生成目标然后再运行目标。","scope":"resource"},"cmake.clearOutputBeforeBuild":{"type":"boolean","default":true,"description":"在每次生成前清除生成输出。","scope":"window"},"cmake.configureSettings":{"type":"object","default":{},"additionalProperties":{"oneOf":[{"type":"string"},{"type":"boolean"},{"type":"number"},{"type":"array","items":{"type":"string"}},{"type":"object","properties":{"type":{"type":"string","enum":["","BOOL","STRING","FILEPATH","PATH"]},"value":{}},"additionalProperties":false,"required":["type","value"]}]},"description":"要在命令行上设置的 CMake 变量。","scope":"resource"},"cmake.cacheInit":{"oneOf":[{"type":"string","description":"缓存初始化 CMake 文件的路径。"},{"type":"array","description":"缓存初始值设定项文件的列表。","items":{"type":"string","description":"缓存初始化 CMake 文件。"}}],"scope":"resource"},"cmake.preferredGenerators":{"type":"array","default":[],"description":"要在配置时使用的首选 CMake 生成器(按列表中的顺序尝试)。","scope":"resource"},"cmake.generator":{"type":"string","default":null,"description":"要使用的 CMake 生成器。","scope":"resource"},"cmake.toolset":{"type":"string","default":null,"description":"要在配置时使用的 CMake 工具集。","scope":"resource"},"cmake.platform":{"type":"string","default":null,"description":"要在配置时使用的 CMake 平台。","scope":"resource"},"cmake.configureArgs":{"type":"array","description":"要在配置时传递给 CMake 的其他参数。","items":{"type":"string","title":"CMake Arguments"},"default":[],"scope":"resource"},"cmake.buildArgs":{"type":"array","description":"要在生成时传递给 CMake 的其他参数。","items":{"type":"string"},"default":[],"scope":"resource"},"cmake.buildToolArgs":{"type":"array","description":"要在生成时传递给基础生成工具的其他参数。","items":{"type":"string"},"default":[],"scope":"resource"},"cmake.parallelJobs":{"type":"number","default":0,"description":"并行生成作业的数目。使用零来自动检测 CPU 数。将此值设为 1 则将禁用生成并行度。","scope":"resource"},"cmake.ctestPath":{"type":"string","default":null,"description":"CTest 可执行文件的路径。如果为 null，则从 cmake.cmakePath 推理(建议保留为 null)。","scope":"resource"},"cmake.ctest.parallelJobs":{"type":"number","default":0,"description":"并行测试作业的数量。使用零即可利用 cmake.parallelJobs 的值。","scope":"resource"},"cmake.parseBuildDiagnostics":{"type":"boolean","default":true,"description":"分析编译器输出以查找警告和错误。","scope":"resource"},"cmake.enabledOutputParsers":{"type":"array","markdownDescription":"要使用的输出分析程序。支持的分析程序 `cmake`、`gcc`、`gnuld`(适用于 GNULD 样式的 inker 输出)、`msvc`(适用于 Microsoft Visual C++)、`ghs`(适用于 Green Hills 编译器，具有 --no_wrap_diagnostics --brief_diagnostics)，以及 `diab`(适用于 Wind River Diab 编译器)。","items":{"type":"string","enum":["cmake","gcc","gnuld","msvc","ghs","diab","iar"]},"default":["cmake","gcc","gnuld","msvc","ghs","diab"],"scope":"resource"},"cmake.debugConfig":{"type":"object","description":"要在调试目标时使用的调试配置。","properties":{"symbolSearchPath":{"type":"string","description":"Visual Studio 调试程序符号搜索路径。"},"additionalSOLibSearchPath":{"type":"string","description":"用于搜索 .so 文件的 GDB 或 LLDB 的路径。"},"externalConsole":{"type":"boolean","description":"启动程序的外部控制台。"},"console":{"type":"string","enum":["internalConsole","integratedTerminal","externalTerminal","newExternalWindow"],"enumDescriptions":["输出到 VS Code 调试控制台。这不支持读取控制台输入(例如:`std::cin` 或 `scanf`)。","VS Code 的集成终端。","控制台应用程序将在外部终端窗口中启动。该窗口将在重新启动方案中重复使用，并且在应用程序退出时不会自动消失。","控制台应用程序将在自身的外部控制台窗口中启动，该窗口将在应用程序停止时结束。非控制台应用程序将在没有终端的情况下运行，并且 stdout/stderr 将被忽略。"],"markdownDescription":"启动调试目标的位置。如果未定义，则默认为 `internalConsole`。"},"logging":{"type":"object","description":"告知应将哪些类型的消息记录到控制台。","properties":{"exceptions":{"type":"boolean","default":true},"moduleLoad":{"type":"boolean","default":true},"programOutput":{"type":"boolean","default":true},"engineLogging":{"type":"boolean","default":false},"trace":{"type":"boolean","default":false},"traceResponse":{"type":"boolean","default":false}}},"visualizerFile":{"type":"string","description":"调试时要使用的 .natvis 文件。"},"args":{"type":"array","description":"要传递给程序命令行的参数。","items":{"type":"string"},"default":[]},"cwd":{"type":"string","description":"设置程序的工作目录。"},"environment":{"type":"array","items":{"type":"object","properties":{"name":{"type":"string","description":"环境变量的名称。"},"value":{"type":"string","description":"环境变量的值。"}}}},"MIMode":{"type":"string","enum":["gdb","lldb"]},"miDebuggerPath":{"type":"string","description":"gdb 或 lldb 调试程序的路径。"},"stopAtEntry":{"type":"boolean","description":"在目标的入口点处停止","default":false},"setupCommands":{"type":"array","description":"用于设置 gdb 或 lldb 的命令。","items":{"type":"object","properties":{"text":{"type":"string","description":"要运行的命令。"},"description":{"type":"string","description":"命令的说明。"},"ignoreFailures":{"type":"boolean","default":false}}}},"customLaunchSetupCommands":{"type":"array","description":"用于设置 gdb 或 lldb 的命令。","items":{"type":"object","properties":{"text":{"type":"string","description":"要运行的命令。"},"description":{"type":"string","description":"命令的说明。"},"ignoreFailures":{"type":"boolean","default":false}}}},"launchCompleteCommand":{"type":"string"},"dumpPath":{"type":"string"},"coreDumpPath":{"type":"string"}},"scope":"resource"},"cmake.defaultVariants":{"type":"object","$schema":"cmake-tools-schema://schemas/variants-schema.json","default":{"buildType":{"default":"debug","description":"生成类型。","choices":{"debug":{"short":"Debug","long":"禁用优化 - 包括调试信息。","buildType":"Debug"},"release":{"short":"Release","long":"进行优化，提高速度 - 排除调试信息。","buildType":"Release"},"minsize":{"short":"MinSizeRel","long":"优化最小二进制大小 - 排除调试信息。","buildType":"MinSizeRel"},"reldeb":{"short":"RelWithDebInfo","long":"进行优化，提高速度 - 包括调试信息。","buildType":"RelWithDebInfo"}}}},"scope":"resource"},"cmake.ctestArgs":{"type":"array","items":{"type":"string"},"description":"要传递给 CTest 的参数。","default":[],"scope":"resource"},"cmake.ctestDefaultArgs":{"type":"array","items":{"type":"string"},"description":"默认情况下传递给 CTest 的参数。","default":["-T","test","--output-on-failure"],"scope":"machine"},"cmake.environment":{"type":"object","default":{},"description":"要在运行 CMake 命令时设置的环境变量。","additionalProperties":{"type":"string","description":"环境变量的值。"},"scope":"resource"},"cmake.configureEnvironment":{"type":"object","default":{},"description":"要在配置过程中传递给 CMake 的环境变量。","additionalProperties":{"type":"string","description":"环境变量的值。"},"scope":"resource"},"cmake.buildEnvironment":{"type":"object","default":{},"description":"要在生成过程中传递给 CMake 的环境变量。","additionalProperties":{"type":"string","description":"环境变量的值。"},"scope":"resource"},"cmake.testEnvironment":{"type":"object","default":{},"description":"要传递给 CTest 的环境变量。","additionalProperties":{"type":"string","description":"环境变量的值。"},"scope":"resource"},"cmake.mingwSearchDirs":{"type":"array","items":{"type":"string","description":"目录路径。"},"default":[],"description":"可在其中安装 MinGW 的目录。","scope":"window","markdownDeprecationMessage":"**Deprecated**: Please use `#cmake.additionalCompilerSearchDirs#` instead."},"cmake.additionalCompilerSearchDirs":{"type":"array","items":{"type":"string","description":"目录路径。"},"default":[],"description":"用于搜索编译器的其他目录。","scope":"window"},"cmake.emscriptenSearchDirs":{"type":"array","items":{"type":"string","description":"目录路径。"},"default":[],"description":"可在其中安装 Emscripten 的目录。","scope":"window"},"cmake.mergedCompileCommands":{"type":"string","default":null,"description":"以递归方式收集和合并在 cmake.buildDirectory 中找到的所有compile_commands.json。","scope":"resource"},"cmake.copyCompileCommands":{"type":"string","default":null,"description":"成功配置后将 compile_commands.json 复制到此位置。","scope":"resource"},"cmake.configureOnOpen":{"type":"boolean","default":null,"description":"在 CMake 项目目录打开时自动对其进行配置。","scope":"resource"},"cmake.configureOnEdit":{"type":"boolean","default":true,"description":"保存 cmake.sourceDirectory 或 CMakeLists.txt 内容时，自动配置 CMake 项目目录。","scope":"resource"},"cmake.setBuildTypeOnMultiConfig":{"type":"boolean","default":false,"description":"在多配置生成器上也设置 CMAKE_BUILD_TYPE","scope":"resource"},"cmake.skipConfigureIfCachePresent":{"type":"boolean","default":null,"description":"如果存在缓存，则跳过配置进程。","scope":"resource"},"cmake.cmakeCommunicationMode":{"type":"string","default":"automatic","enum":["legacy","serverApi","fileApi","automatic"],"description":"用于在扩展和 CMake 之间进行通信的协议","scope":"resource"},"cmake.showSystemKits":{"type":"boolean","default":true,"description":"在工具包选择中包括系统工具包","scope":"resource"},"cmake.ignoreKitEnv":{"type":"boolean","default":false,"description":"运行 CMake 命令时，请勿使用工具包环境变量。","scope":"resource"},"cmake.buildTask":{"type":"boolean","default":false,"description":"使用 tasks.json 生成，而非使用内部进程。","scope":"resource"},"cmake.outputLogEncoding":{"type":"string","default":"auto","description":"来自外部命令的输出的编码(例如 cmake -- build)。","scope":"window"},"cmake.enableTraceLogging":{"type":"boolean","default":false,"description":"对文件和控制台启用跟踪日志记录(噪音很大)。","scope":"window"},"cmake.loggingLevel":{"type":"string","default":"info","enum":["trace","debug","info","note","warning","error","fatal"],"scope":"window"},"cmake.touchbar.visibility":{"type":"string","default":"default","description":"配置扩展在 MacBook 触控栏上显示按钮的方式","enum":["default","hidden"],"enumDescriptions":["在支持的系统上显示触控栏按钮。","不显示触控栏按钮。"],"scope":"window"},"cmake.touchbar.advanced":{"type":"object","scope":"window","properties":{"build":{"type":"string","default":"default","description":"配置扩展在 MacBook 触控栏上显示按钮的方式","enum":["default","hidden"],"enumDescriptions":["在支持的系统上显示触控栏按钮。","不显示触控栏按钮。"]},"configure":{"type":"string","default":"default","description":"配置扩展在 MacBook 触控栏上显示按钮的方式","enum":["default","hidden"],"enumDescriptions":["在支持的系统上显示触控栏按钮。","不显示触控栏按钮。"]},"debug":{"type":"string","default":"default","description":"配置扩展在 MacBook 触控栏上显示按钮的方式","enum":["default","hidden"],"enumDescriptions":["在支持的系统上显示触控栏按钮。","不显示触控栏按钮。"]},"launch":{"type":"string","default":"default","description":"配置扩展在 MacBook 触控栏上显示按钮的方式","enum":["default","hidden"],"enumDescriptions":["在支持的系统上显示触控栏按钮。","不显示触控栏按钮。"]}}},"cmake.statusbar.visibility":{"type":"string","default":"default","description":"配置扩展在状态栏中显示按钮的方式。","markdownDescription":"Configures how the extension displays the buttons in the status bar. Only applies when `#cmake.useProjectStatusView#` is set to `false`.","enum":["default","compact","icon","hidden"],"scope":"window"},"cmake.statusbar.advanced":{"type":"object","default":{},"description":"配置各个状态栏按钮的设置。这些设置将覆盖更常规的 \"cmake.statusbar.visibility\" 设置。","markdownDescription":"Configures the settings for individual status bar buttons. These settings overwrite the more general `#cmake.statusbar.visibility` setting. Only applies when `#cmake.useProjectStatusView#` is set to `false`.","properties":{"configurePreset":{"type":"object","properties":{"visibility":{"type":"string","description":"配置扩展在状态栏中显示此按钮的方式。","enum":["default","compact","icon","hidden"]},"length":{"description":"配置可见文本在在“紧凑”模式下的最大长度。","type":"integer","default":20}}},"buildPreset":{"type":"object","properties":{"visibility":{"type":"string","description":"配置扩展在状态栏中显示此按钮的方式。","enum":["default","compact","icon","hidden"]},"length":{"description":"配置可见文本在在“紧凑”模式下的最大长度。","type":"integer","default":20}}},"testPreset":{"type":"object","properties":{"visibility":{"type":"string","description":"配置扩展在状态栏中显示此按钮的方式。","enum":["default","compact","icon","hidden"]},"length":{"description":"配置可见文本在在“紧凑”模式下的最大长度。","type":"integer","default":20}}},"kit":{"type":"object","properties":{"visibility":{"type":"string","description":"配置扩展在状态栏中显示此按钮的方式。","enum":["default","compact","icon","hidden"]},"length":{"description":"配置可见文本在在“紧凑”模式下的最大长度。","type":"integer","default":20}}},"status":{"type":"object","properties":{"visibility":{"type":"string","description":"配置扩展在状态栏中显示此按钮的方式。","enum":["default","compact","icon","hidden"]}}},"workspace":{"type":"object","properties":{"visibility":{"type":"string","description":"配置扩展在状态栏中显示此按钮的方式。","enum":["default","compact","icon","hidden"]}}},"buildTarget":{"type":"object","properties":{"visibility":{"type":"string","description":"配置扩展在状态栏中显示此按钮的方式。","enum":["default","compact","icon","hidden"]}}},"build":{"type":"object","properties":{"visibility":{"type":"string","description":"配置扩展在状态栏中显示此按钮的方式。","enum":["default","compact","icon","hidden"]}}},"launchTarget":{"type":"object","properties":{"visibility":{"type":"string","description":"配置扩展在状态栏中显示此按钮的方式。","enum":["default","compact","icon","hidden"]}}},"debug":{"type":"object","properties":{"visibility":{"type":"string","description":"配置扩展在状态栏中显示此按钮的方式。","enum":["default","compact","icon","hidden"]}}},"launch":{"type":"object","properties":{"visibility":{"type":"string","description":"配置扩展在状态栏中显示此按钮的方式。","enum":["default","compact","icon","hidden"]}}},"ctest":{"type":"object","properties":{"visibility":{"type":"string","description":"配置扩展在状态栏中显示此按钮的方式。","enum":["default","compact","icon","hidden"]},"color":{"type":"boolean","default":false,"description":"根据测试结果启用此按钮的颜色更改。"}}}}},"cmake.useProjectStatusView":{"type":"boolean","default":false,"description":"Enables the Project Status view in the CMake side panel and hides the status bar buttons.","scope":"window","tags":["experimental"]},"cmake.additionalKits":{"type":"array","default":[],"description":"自定义工具包文件的路径数组","items":{"type":"string"},"scope":"resource"},"cmake.revealLog":{"type":"string","default":"always","enum":["focus","always","never"],"enumDescriptions":["将显示日志，并且输出通道会占用光标焦点。","将显示日志，但输出通道不会占用光标焦点。","日志既不显示也不占据焦点。"],"description":"配置用于显示日志并聚焦于输出通道的设置。"},"cmake.exportCompileCommandsFile":{"type":"boolean","default":true,"description":"启用导出 compile_commands.json。","scope":"resource"},"cmake.useCMakePresets":{"type":"string","enum":["always","never","auto"],"default":"auto","description":"使用 CMakepresets.json 配置驱动器 CMake 配置、生成和测试。使用 CMakepresets.json 时，将忽略工具包、变量和 settings.json 中的某些设置。","scope":"resource"},"cmake.allowCommentsInPresetsFile":{"type":"boolean","default":false,"description":"允许使用 JSON 扩展，如 CMakePresets.json 中的注释。请注意，如果使用非标准 JSON，则其他 IDE 或命令行可能认为 CMakePresets.json 文件无效。","scope":"resource"},"cmake.allowUnsupportedPresetsVersions":{"type":"boolean","default":false,"description":"支持使用预设文件，这些文件使用的是 CMake Tools 扩展当前不支持的版本中的功能。将忽略未知属性和宏。","scope":"resource"},"cmake.launchBehavior":{"type":"string","enum":["reuseTerminal","breakAndReuseTerminal","newTerminal"],"markdownEnumDescriptions":["已重用启动终端实例，并且目标将在终端空闲时立即启动。","已重用启动终端实例，并且将在启动目标之前发送 `break` 命令以终止任何活动的前台进程。","已创建新的终端实例，并且已在其中启动目标。系统不会自动清理现有终端。"],"description":"控制启动目标时启动终端将执行的操作。","default":"reuseTerminal"},"cmake.ignoreCMakeListsMissing":{"type":"boolean","default":false,"markdownDescription":"如果为 `true`，则当在工作区中找到 CMakeLists.txt 文件，但未在根文件夹中找到时，扩展将不会要求用户选择 CMakeLists.txt 文件以进行配置。","scope":"resource"},"cmake.loadCompileCommands":{"type":"boolean","default":true,"description":"控制扩展是否读取 compile_commands.json 以启用单个文件编译。","scope":"resource"},"cmake.automaticReconfigure":{"type":"boolean","default":true,"description":"当工具包或配置预设发生更改时，将自动配置 CMake 项目目录。","scope":"resource"}}},"keybindings":[{"key":"f7","when":"!cmake:hideBuildCommand && cmake:enableFullFeatureSet","command":"cmake.build"},{"key":"shift+f7","when":"!cmake:hideBuildCommand && cmake:enableFullFeatureSet","command":"cmake.buildWithTarget"},{"key":"ctrl+f5","command":"cmake.debugTarget","when":"!inDebugMode && inCMakeProject && !cmake:hideDebugCommand && cmake:enableFullFeatureSet"},{"key":"shift+f5","command":"cmake.launchTarget","when":"!inDebugMode && !cmake:hideDebugCommand && cmake:enableFullFeatureSet"}],"viewsContainers":{"activitybar":[{"id":"cmake-view","title":"CMake","icon":"res/cmake-view-icon2.svg","when":"cmake:enableFullFeatureSet"}]},"views":{"cmake-view":[{"id":"cmake.projectStatus","name":"项目状态","when":"cmake:enableFullFeatureSet && config.cmake.useProjectStatusView != false"},{"id":"cmake.outline","name":"项目大纲","when":"cmake:enableFullFeatureSet"}]},"yamlValidation":[{"fileMatch":"cmake-variants.yaml","url":"cmake-tools-schema:///schemas/variants-schema.json"}],"jsonValidation":[{"fileMatch":"cmake-variants.json","url":"cmake-tools-schema:///schemas/variants-schema.json"},{"fileMatch":"cmake-variants.yaml","url":"cmake-tools-schema:///schemas/variants-schema.json"},{"fileMatch":"cmake-kits.json","url":"cmake-tools-schema:///schemas/kits-schema.json"},{"fileMatch":"CMakePresets.json","url":"cmake-tools-schema:///schemas/CMakePresets-v5-schema.json"},{"fileMatch":"CMakeUserPresets.json","url":"cmake-tools-schema:///schemas/CMakePresets-v5-schema.json"}]},"_moduleAliases":{"@cmt":"out/src/","@test":"out/test/"},"scripts":{"vscode:prepublish":"yarn run compile-production","compile":"yarn install && webpack --mode development","compile-watch":"yarn install && webpack --mode development --watch --progress","compile-production":"yarn install && yarn run translations-generate && webpack --env BUILD_VSCODE_NLS=true --mode production","translations-export":"gulp translations-export","translations-generate":"gulp translations-generate","translations-import":"gulp translations-import","package":"vsce package --yarn -o cmake-tools.vsix","pretest":"tsc -p test.tsconfig.json","lint":"gulp lint","smokeTests":"yarn run pretest && node ./out/test/smoke/badProject/runTest.js && node ./out/test/smoke/goodProject/runTest.js && node ./out/test/smoke/noCtest/runTest.js","unitTests":"yarn run pretest && node ./out/test/unit-tests/runTest.js","extensionTestsSuccessfulBuild":"yarn run pretest && node ./out/test/extension-tests/successful-build/runTest.js","extensionTestsSingleRoot":"yarn run pretest && node ./out/test/extension-tests/single-root-UI/runTest.js","extensionTestsMultiRoot":"yarn run pretest && node ./out/test/extension-tests/multi-root-UI/runTest.js","backendTests":"node ./node_modules/mocha/bin/_mocha -u tdd --timeout 999999 --colors -r ts-node/register -r tsconfig-paths/register ./test/backend-unit-tests/**/*.test.ts"},"devDependencies":{"@octokit/rest":"^18.1.1","@types/ajv":"^0.0.5","@types/chai":"^4.2.15","@types/chai-as-promised":"^7.1.3","@types/chai-string":"^1.4.2","@types/js-yaml":"^4.0.0","@types/json5":"~0.0.30","@types/mocha":"^8.2.2","@types/node":"~14.14.28","@types/rimraf":"^3.0.0","@types/sinon":"~9.0.10","@types/tmp":"^0.2.0","@types/vscode":"1.60.0","@types/which":"~2.0.0","@types/xml2js":"^0.4.8","@typescript-eslint/eslint-plugin":"^5.25.0","@typescript-eslint/eslint-plugin-tslint":"^5.25.0","@typescript-eslint/parser":"^5.25.0","@vscode/test-electron":"^2.1.4","chai":"^4.3.0","chai-as-promised":"^7.1.1","chai-string":"^1.5.0","eslint":"^8.15.0","eslint-plugin-import":"^2.26.0","eslint-plugin-jsdoc":"^39.6.4","event-stream":"^4.0.1","fs-extra":"^9.1.0","glob":"^7.1.6","gulp":"^4.0.2","gulp-eslint":"^6.0.0","gulp-filter":"^6.0.0","gulp-mocha":"^8.0.0","gulp-sourcemaps":"^3.0.0","gulp-typescript":"^5.0.1","husky":"^4.3.8","jsonc-parser":"^3.0.0","mocha":"^8.3.2","module-alias":"^2.2.2","node-loader":"^1.0.2","parse-git-config":"^3.0.0","sinon":"~9.2.4","ts-loader":"^8.0.17","ts-node":"^9.1.1","tsconfig-paths":"^3.11.0","tslint":"^6.1.3","typescript":"^4.1.5","vsce":"^2.7.0","vscode-cmake-tools":"^1.0.0","vscode-nls-dev":"^3.3.2","webpack":"^5.76.0","webpack-cli":"^4.5.0"},"dependencies":{"ajv":"^7.1.0","chokidar":"^3.5.1","handlebars":"^4.7.7","iconv-lite":"^0.6.2","js-yaml":"^4.0.0","json5":"^2.2.2","minimist":"^1.2.6","open":"^7.4.1","p-limit":"^3.1.0","rimraf":"^3.0.2","tmp":"^0.2.1","vscode-cpptools":"^6.1.0","@vscode/extension-telemetry":"^0.6.2","vscode-nls":"^5.0.0","vscode-tas-client":"^0.1.22","which":"~2.0.2","xml2js":"^0.4.23"},"resolutions":{"ansi-regex":"^5.0.1","chokidar":"^3.5.1","glob-parent":"^5.1.2","hosted-git-info":"^3.0.8","https-proxy-agent":"^5.0.0","**/minimist":"^1.2.5","nanoid":"^3.1.31","postcss":"^8.2.10","source-map":"^0.8.0-beta.0","yargs-parser":"^20.2.4","xml2js":"^0.5.0","tsconfig-paths*/json5":"^1.0.2","minimatch":"^3.0.5"},"extensionPack":["twxs.cmake"]},"location":{"$mid":1,"path":"/home/zjc/.vscode-server/extensions/ms-vscode.cmake-tools-1.14.34","scheme":"file"},"isBuiltin":false,"targetPlatform":"undefined","metadata":{"id":"7c889349-8749-43d4-8b5e-08939936d7f4","publisherId":"5f5636e7-69ed-4afe-b5d6-8d231fb3d3ee","publisherDisplayName":"Microsoft","targetPlatform":"undefined","updated":false,"isPreReleaseVersion":false,"installedTimestamp":1688971048929},"isValid":true,"validations":[]},{"type":1,"identifier":{"id":"twxs.cmake","uuid":"2be7cf14-2603-402e-9771-fd79df83cdf8"},"manifest":{"name":"cmake","version":"0.0.17","publisher":"twxs","displayName":"CMake","description":"CMake langage support for Visual Studio Code","author":{"name":"Nicolas Martin"},"repository":{"type":"git","url":"https://github.com/twxs/vs.language.cmake.git"},"bugs":{"url":"https://github.com/twxs/vs.language.cmake/issues"},"homepage":"https://github.com/twxs/vs.language.cmake/blob/master/README.md","keywords":["CMake","Syntax"],"categories":["Languages","Snippets","Other"],"icon":"images/icon.png","galleryBanner":{"color":"#5c2d91","theme":"dark"},"license":"MIT","activationEvents":["onLanguage:cmake"],"engines":{"vscode":"^1.10.0"},"main":"./out/extension","contributes":{"languages":[{"id":"cmake","extensions":[".cmake"],"filenames":["CMakelists.txt"],"aliases":["CMake"]},{"id":"cmake-cache","filenames":["CMakeCache.txt"],"aliases":["CMake Cache"]}],"commands":[{"command":"cmake.onlineHelp","title":"CMake: Online Help"}],"grammars":[{"language":"cmake","scopeName":"source.cmake","path":"./syntaxes/CMake.tmLanguage"},{"language":"cmake-cache","scopeName":"source.cmakecache","path":"./syntaxes/CMakeCache.tmLanguage"}],"configuration":{"title":"CMake configuration","properties":{"cmake.cmakePath":{"type":"string","default":"cmake","description":"The path to CMake generator executable"}}}},"scripts":{"vscode:prepublish":"tsc -p ./","compile":"tsc -watch -p ./","postinstall":"node ./node_modules/vscode/bin/install"},"dependencies":{"opener":"^1.4.2"},"devDependencies":{"typescript":"^2.0.9","vscode":"^1.0.3","@types/node":"^6.0.47","mocha":"^3.1.2","@types/mocha":"^2.2.33"}},"location":{"$mid":1,"path":"/home/zjc/.vscode-server/extensions/twxs.cmake-0.0.17","scheme":"file"},"isBuiltin":false,"targetPlatform":"undefined","metadata":{"id":"2be7cf14-2603-402e-9771-fd79df83cdf8","publisherId":"b5ab7991-81a8-4557-af54-4cb8e01e85c1","publisherDisplayName":"twxs","targetPlatform":"undefined","updated":false,"isPreReleaseVersion":false,"installedTimestamp":1688971048940},"isValid":true,"validations":[]},{"type":1,"identifier":{"id":"ms-vscode.cpptools","uuid":"690b692e-e8a9-493f-b802-8089d50ac1b2"},"manifest":{"name":"cpptools","displayName":"C/C++","description":"C/C++ IntelliSense, debugging, and code browsing.","version":"1.16.3","publisher":"ms-vscode","icon":"LanguageCCPP_color_128x.png","readme":"README.md","author":{"name":"Microsoft Corporation"},"license":"SEE LICENSE IN LICENSE.txt","engines":{"vscode":"^1.67.0"},"bugs":{"url":"https://github.com/Microsoft/vscode-cpptools/issues","email":"c_cpp_support@microsoft.com"},"repository":{"type":"git","url":"https://github.com/Microsoft/vscode-cpptools.git"},"homepage":"https://github.com/Microsoft/vscode-cpptools","qna":"https://github.com/Microsoft/vscode-cpptools/issues","keywords":["C","C++","IntelliSense","Microsoft","multi-root ready"],"categories":["Programming Languages","Debuggers","Formatters","Linters","Snippets"],"enabledApiProposals":["terminalDataWriteEvent"],"capabilities":{"untrustedWorkspaces":{"supported":false,"description":"多个设置可能导致执行工作区本地进程，例如，C_Cpp.clang_format_path、C_Cpp.codeAnalysis.clangTidy.path、C_Cpp.addNodeAddonIncludePaths、C_Cpp.default.compilerPath、C_Cpp.default.configurationProvider 和 C_Cpp.default.compileCommands，以及 c_cpp_properties.json 中的等效属性。"},"virtualWorkspaces":false},"activationEvents":["onLanguage:c","onLanguage:cpp","onLanguage:cuda-cpp","onCommand:extension.pickNativeProcess","onCommand:extension.pickRemoteNativeProcess","onDebugResolve:cppdbg","onDebugResolve:cppvsdbg","workspaceContains:/.vscode/c_cpp_properties.json","onFileSystem:cpptools-schema"],"main":"./dist/main","contributes":{"walkthroughs":[{"id":"cppWelcome","title":"C++ 开发入门","description":"深入了解 VS Code 丰富的 C++ 开发体验。","when":"false","steps":[{"id":"awaiting.activation.mac","title":"设置 C++ 环境","description":"激活 C++ 扩展以确定是否已设置 C++ 环境。\n正在激活扩展...","when":"workspacePlatform == mac && cpptools.scanForCompilersDone == false","media":{"markdown":"dist/walkthrough/installcompiler/install-clang-macos.md"}},{"id":"awaiting.activation.linux","title":"设置 C++ 环境","description":"激活 C++ 扩展以确定是否已设置 C++ 环境。\n正在激活扩展...","when":"workspacePlatform == linux && cpptools.scanForCompilersDone == false","media":{"markdown":"dist/walkthrough/installcompiler/install-gcc-linux.md"}},{"id":"awaiting.activation.windows","title":"设置 C++ 环境","description":"激活 C++ 扩展以确定是否已设置 C++ 环境。\n正在激活扩展...","when":"workspacePlatform == windows && cpptools.scanForCompilersDone == false","media":{"markdown":"dist/walkthrough/installcompiler/install-compiler-windows.md"}},{"id":"no.compilers.found.mac","title":"设置 C++ 环境","description":"无法在计算机上找到 C++ 编译器，这是使用 C++ 扩展所必需的。请按照右侧的说明安装一个编译器，然后单击下面的“查找我的新编译器”。\n[查找我的新编译器](command:C_Cpp.RescanCompilers?%7B%22sender%22%3A%22walkthrough%22%7D)","when":"workspacePlatform == mac && cpptools.scanForCompilersDone == true && cpptools.scanForCompilersEmpty == true","media":{"markdown":"dist/walkthrough/installcompiler/install-clang-macos.md"}},{"id":"no.compilers.found.linux","title":"设置 C++ 环境","description":"无法在计算机上找到 C++ 编译器，这是使用 C++ 扩展所必需的。请按照右侧的说明安装一个编译器，然后单击下面的“查找我的新编译器”。\n[查找我的新编译器](command:C_Cpp.RescanCompilers?%7B%22sender%22%3A%22walkthrough%22%7D)","when":"workspacePlatform == linux && cpptools.scanForCompilersDone == true && cpptools.scanForCompilersEmpty == true","media":{"markdown":"dist/walkthrough/installcompiler/install-gcc-linux.md"}},{"id":"no.compilers.found.windows","title":"设置 C++ 环境","description":"无法在计算机上找到 C++ 编译器，这是使用 C++ 扩展所必需的。请按照右侧的说明安装一个编译器，然后单击下面的“查找我的新编译器”。\n[查找我的新编译器](command:C_Cpp.RescanCompilers?%7B%22sender%22%3A%22walkthrough%22%7D)","when":"workspacePlatform == windows && cpptools.scanForCompilersDone == true && cpptools.scanForCompilersEmpty == true","media":{"markdown":"dist/walkthrough/installcompiler/install-compiler-windows.md"}},{"id":"verify.compiler.mac","title":"设置 C++ 环境","description":"C++ 扩展需要与 C++ 编译器一起使用。通过单击下面的按钮从计算机上已有的编译器中选择一个。\n[选择我的默认编译器](command:C_Cpp.SelectDefaultCompiler?%7B%22sender%22%3A%22walkthrough%22%7D)","when":"workspacePlatform == mac && cpptools.scanForCompilersDone == true && cpptools.scanForCompilersEmpty == false","media":{"markdown":"dist/walkthrough/installcompiler/install-clang-macos.md"},"completionEvents":["onContext:cpptools.trustedCompilerFound"]},{"id":"verify.compiler.linux","title":"设置 C++ 环境","description":"C++ 扩展需要与 C++ 编译器一起使用。通过单击下面的按钮从计算机上已有的编译器中选择一个。\n[选择我的默认编译器](command:C_Cpp.SelectDefaultCompiler?%7B%22sender%22%3A%22walkthrough%22%7D)","when":"workspacePlatform == linux && cpptools.scanForCompilersDone == true && cpptools.scanForCompilersEmpty == false","media":{"markdown":"dist/walkthrough/installcompiler/install-gcc-linux.md"},"completionEvents":["onContext:cpptools.trustedCompilerFound"]},{"id":"verify.compiler.windows","title":"设置 C++ 环境","description":"C++ 扩展需要与 C++ 编译器一起使用。通过单击下面的按钮从计算机上已有的编译器中选择一个。\n[选择我的默认编译器](command:C_Cpp.SelectDefaultCompiler?%7B%22sender%22%3A%22walkthrough%22%7D)","when":"workspacePlatform == windows && cpptools.scanForCompilersDone == true && cpptools.scanForCompilersEmpty == false","media":{"markdown":"dist/walkthrough/installcompiler/install-compiler-windows.md"},"completionEvents":["onContext:cpptools.trustedCompilerFound"]},{"id":"create.cpp.file","title":"创建 C++ 文件","description":"[打开](command:toSide:workbench.action.files.openFile)或[创建](command:toSide:workbench.action.files.newUntitledFile?%7B%22languageId%22%3A%22cpp%22%7D)一个 C++ 文件。请确保将其保存为 \".cpp\" 扩展名，例如 \"helloworld.cpp\"。\n[创建 C++ 文件](command:toSide:workbench.action.files.newUntitledFile?%7B%22languageId%22%3A%22cpp%22%7D)","media":{"svg":"dist/walkthrough/images/create-a-file.svg","altText":"使用 C++ 项目打开 C++ 文件或文件夹。"}},{"id":"relaunch.developer.command.prompt.windows","title":"从开发人员命令提示启动","description":"使用 Microsoft Visual Studio C++ 编译器时，C++ 扩展需要从开发人员命令提示符中启动 VS Code。请按照右侧的说明重新启动。\n[重新加载窗口](command:workbench.action.reloadWindow)","when":"workspacePlatform == windows","media":{"markdown":"dist/walkthrough/devcommandprompt/open-developer-command-prompt.md"},"completionEvents":["onContext:cpptools.msvcEnvironmentFound"]},{"id":"run.project.mac","title":"运行并调试 C++ 文件","description":"打开你的 C++ 文件，在编辑器右上角点击播放按钮，或者在文件上按 F5。选择“clang++ - 构建和调试活动文件”以使用调试器运行。","when":"workspacePlatform == mac","media":{"altText":"显示 C++ 文件中的断点、f5 按钮和右上角的运行符号的图像","svg":"dist/walkthrough/images/run-and-debug.svg"}},{"id":"run.project.linux","title":"运行并调试 C++ 文件","description":"打开 C++ 文件，在编辑器右上角点击播放按钮，或者在文件上按 F5。选择“g++ - 构建和调试活动文件”以使用调试器运行。","when":"workspacePlatform == linux","media":{"altText":"显示 C++ 文件中的断点、f5 按钮和右上角的运行符号的图像","svg":"dist/walkthrough/images/run-and-debug.svg"}},{"id":"run.project.windows","title":"运行并调试 C++ 文件","description":"打开你的 C++ 文件，然后在编辑器右上角点击播放按钮，或者当你在该文件上时按下 F5。选择“cl.exe - 构建和调试活动文件”以使用调试器运行。","when":"workspacePlatform == windows","media":{"altText":"显示 C++ 文件中的断点、f5 按钮和右上角的运行符号的图像","svg":"dist/walkthrough/images/run-and-debug.svg"}},{"id":"customize.debugging.linux","title":"自定义调试","when":"workspacePlatform == linux","description":"可以通过在播放按钮右侧选择“添加调试配置”来自定义调试配置(例如，在运行时传递参数给程序)。自定义调试配置将保存在项目的 launch.json 文件中。\n[了解更多](https://code.visualstudio.com/docs/cpp/config-linux#_debug-helloworldcpp)","media":{"altText":"显示下拉列表中“添加调试配置”的图像","svg":"dist/walkthrough/images/customize-debugging.svg"}},{"id":"customize.debugging.windows","title":"自定义调试","when":"workspacePlatform == windows","description":"可以通过在播放按钮右侧选择“添加调试配置”来自定义调试配置(例如，在运行时传递参数给程序)。自定义调试配置将保存在项目的 launch.json 文件中。\n[了解更多](https://code.visualstudio.com/docs/cpp/config-msvc#_debug-helloworldcpp)","media":{"altText":"显示下拉列表中“添加调试配置”的图像","svg":"dist/walkthrough/images/customize-debugging.svg"}},{"id":"customize.debugging.mac","title":"自定义调试","when":"workspacePlatform == mac","description":"可以通过在播放按钮右侧选择“添加调试配置”来自定义调试配置(例如，在运行时传递参数给程序)。自定义的调试配置将保存在项目的 launch.json 文件中。\n[了解更多](https://code.visualstudio.com/docs/cpp/config-clang-mac#_debug-helloworldcpp)","media":{"altText":"显示下拉列表中“添加调试配置”的图像","svg":"dist/walkthrough/images/customize-debugging.svg"}}]}],"taskDefinitions":[{"type":"cppbuild","required":["command","label"],"properties":{"label":{"type":"string","description":"任务名称。"},"command":{"type":"string","description":"执行编译的编译器或脚本的路径。"},"args":{"type":"array","description":"其他要传递给编译器或编译脚本的参数。"},"options":{"type":"object","description":"其他命令选项。","properties":{"cwd":{"type":"string","description":"已执行程序或脚本的当前工作目录。如果省略，则使用代码的当前工作区根。"}}},"detail":{"type":"string","description":"任务的其他详细信息。"}}}],"views":{"references-view":[{"id":"CppReferencesView","name":"C/C++: 其他引用结果","when":"cpptools.hasReferencesResults"}],"debug":[{"id":"CppSshTargetsView","name":"Cpptools: SSH 目标","when":"cpptools.enableSshTargetsView"}]},"viewsWelcome":[{"view":"debug","contents":"要了解有关 launch.json 的信息，请参阅 [配置 C/C++ 调试](https://code.visualstudio.com/docs/cpp/launch-json-reference)。","when":"debugStartLanguage == cpp || debugStartLanguage == c || debugStartLanguage == cuda-cpp"}],"problemMatchers":[{"name":"gcc","source":"gcc","owner":"cpptools","fileLocation":["autoDetect","${cwd}"],"pattern":{"regexp":"^(.*?):(\\d+):(\\d*):?\\s+(?:fatal\\s+)?(warning|error):\\s+(.*)$","file":1,"line":2,"column":3,"severity":4,"message":5}},{"name":"iar","source":"iar","owner":"cpptools","fileLocation":"absolute","pattern":{"regexp":"^\"(.*?)\",(\\d+)\\s+(?:[Ff]atal\\s+)?([Ww]arning|[Ee]rror)\\[(\\w+\\d+)\\]:\\s+(.*)$","file":1,"line":2,"severity":3,"code":4,"message":5}},{"name":"armcc5","source":"armcc5","owner":"cpptools","fileLocation":["autoDetect","${cwd}"],"pattern":{"regexp":"^\"(.*)?\",\\s+line\\s+(\\d+):\\s+([Ee]rror|[Ww]arning):\\s+#(.*?):\\s+(.*)$","file":1,"line":2,"severity":3,"code":4,"message":5}}],"configuration":[{"title":"IntelliSense","properties":{"C_Cpp.inlayHints.autoDeclarationTypes.enabled":{"type":"boolean","default":false,"markdownDescription":"在声明中使用 `auto` 时显示推导类型的内嵌提示:\n```cpp \n\n auto index /* : int */ = 0;\n```","scope":"resource"},"C_Cpp.inlayHints.autoDeclarationTypes.showOnLeft":{"type":"boolean","default":false,"markdownDescription":"在标识符左侧声明中使用 `auto` 时显示推导类型的内嵌提示:\n```cpp \n\n auto /* int */ index = 0;\n```","scope":"resource"},"C_Cpp.inlayHints.parameterNames.enabled":{"type":"boolean","default":false,"markdownDescription":"显示参数名称的内嵌提示:\n```cpp \n\n int a = getArea(/* width: */ x, /* height: */ y);\n```","scope":"resource"},"C_Cpp.inlayHints.parameterNames.suppressWhenArgumentContainsName":{"type":"boolean","default":true,"markdownDescription":"当参数文本或内联注释包含参数名称时，抑制参数名称提示:\n```cpp \n\n int a = getArea(width, /* height: */ y);\n```","scope":"resource"},"C_Cpp.inlayHints.parameterNames.hideLeadingUnderscores":{"type":"boolean","default":true,"markdownDescription":"在参数名称提示中隐藏开头的 `_`。","scope":"resource"},"C_Cpp.inlayHints.referenceOperator.enabled":{"type":"boolean","default":false,"markdownDescription":"显示非常量引用传递的参数的内嵌提示引用运算符 `&`:\n```cpp \n\n swap(/* &first: */ str1, /* &last: */ str2);\n```","scope":"resource"},"C_Cpp.inlayHints.referenceOperator.showSpace":{"type":"boolean","default":false,"markdownDescription":"控制在 `&` 后是否显示非常量引用传递的参数的空格:\n```cpp \n\n swap(/* & first: */ str1, /* & last: */ str2);\n```","scope":"resource"},"C_Cpp.intelliSenseUpdateDelay":{"type":"number","default":2000,"description":"控制修改之后到 IntelliSense 开始更新之间的延迟(以毫秒为单位)。","scope":"application","minimum":500,"maximum":3000},"C_Cpp.codeFolding":{"type":"string","enum":["enabled","disabled"],"default":"enabled","description":"如果启用，则由语言服务器提供代码折叠范围。","scope":"window"},"C_Cpp.autocompleteAddParentheses":{"type":"boolean","default":false,"markdownDescription":"如果为 `true`，则自动完成将在函数调用后自动添加 `(` ，在这种情况下，也可以添加 `)` ，具体取决于 `#editor.autoClosingBrackets#` 设置的值。","scope":"resource"},"C_Cpp.suggestSnippets":{"type":"boolean","default":true,"markdownDescription":"如果为 `true`，则由语言服务器提供片段。","scope":"resource"},"C_Cpp.enhancedColorization":{"type":"string","enum":["enabled","disabled"],"default":"enabled","markdownDescription":"如果启用，则根据 IntelliSense 对代码进行着色。仅当 `#C_Cpp.intelliSenseEngine#` 设置为 `default` 时，此设置才适用。","scope":"window"},"C_Cpp.legacyCompilerArgsBehavior":{"type":"boolean","default":false,"markdownDescription":"启用 v1.10.0 以前的行为，以了解在编译器参数设置中如何处理 shell 转义。从 v1.10.0 开始，参数数组在默认情况下不再需要或支持 shell 转义。","scope":"resource"},"C_Cpp.autocomplete":{"type":"string","enum":["default","disabled"],"default":"default","markdownDescription":"控制自动完成提供程序。如果 `disabled`，且你想要基于字词的补全，则还需要设置 `\"[cpp]\": {\"editor.wordBasedSuggestions\": true}`(对 `c` 和 `cuda-cpp` 语言同样执行此操作)。","enumDescriptions":["使用活动的 IntelliSense 引擎。","使用 Visual Studio Code 提供的基于字词的补全。"],"scope":"resource"},"C_Cpp.hover":{"type":"string","enum":["default","disabled"],"default":"default","description":"如果禁用，则语言服务器不再提供悬停详细信息。","scope":"resource"},"C_Cpp.errorSquiggles":{"type":"string","enum":["enabled","disabled","enabledIfIncludesResolve"],"default":"enabledIfIncludesResolve","description":"控制是否将 IntelliSense 引擎检测到的可疑编译错误报告回编辑器。还控制是否报告代码分析警告(如果找不到包含)。标记分析器引擎将忽略此设置。","scope":"resource"},"C_Cpp.dimInactiveRegions":{"type":"boolean","default":true,"description":"控制非活动预处理程序块的颜色是否与活动代码不同。如果禁用了 IntelliSense 或使用“默认高对比度”主题，则此设置不起任何作用。","scope":"resource"},"C_Cpp.inactiveRegionOpacity":{"type:":"number","default":0.55,"markdownDescription":"控制非活动预处理器块的不透明度。在 `0.1` 和 `1.0` 之间进行缩放。仅当启用非活动区域暗化时，此设置才适用。","scope":"resource","minimum":0.1,"maximum":1},"C_Cpp.inactiveRegionForegroundColor":{"type":"string","description":"控制非活动预处理程序块的字体颜色。输入的格式为十六进制颜色代码或有效的主题颜色。如果未设置，则默认为编辑器的语法颜色方案。此设置仅在启用非活动区域变暗时适用。","scope":"resource"},"C_Cpp.inactiveRegionBackgroundColor":{"type":"string","description":"控制非活动预处理程序块的背景颜色。输入的格式为十六进制颜色代码或有效的主题颜色。如果未设置，则默认为透明。此设置仅在启用了非活动区域变暗时适用。","scope":"resource"},"C_Cpp.renameRequiresIdentifier":{"type":"boolean","default":true,"markdownDescription":"如果为 `true`，则“重命名符号”将需要有效的 C/C++ 标识符。","scope":"application"},"C_Cpp.workspaceSymbols":{"type":"string","enum":["All","Just My Code"],"default":"Just My Code","description":"调用“转到工作区中的符号”时要包含在查询结果中的符号。","scope":"window"},"C_Cpp.default.includePath":{"type":"array","items":{"type":"string"},"uniqueItems":true,"markdownDescription":"未在 `c_cpp_properties.json` 中指定 `includePath` 时要在配置中使用的值。如果已指定 `includePath`，请将 `${default}` 添加到数组以插入此设置中的值。通常，此不应包含系统包含；请改为设置 `#C_Cpp.default.compilerPath#`。","scope":"machine-overridable"},"C_Cpp.default.defines":{"type":"array","items":{"type":"string"},"uniqueItems":true,"markdownDescription":"未指定 `defines` 时要在配置中使用的值，或 `defines` 中存在 `${default}` 时要插入的值。","scope":"machine-overridable"},"C_Cpp.default.macFrameworkPath":{"type":"array","items":{"type":"string"},"uniqueItems":true,"markdownDescription":"未指定 `macFrameworkPath` 时要在配置中使用的值，或 `macFrameworkPath` 中存在 `${default}` 时要插入的值。","scope":"machine-overridable"},"C_Cpp.default.windowsSdkVersion":{"type":"string","markdownDescription":"要在 Windows 上使用的 Windows SDK 包含路径的版本，例如 `10.0.17134.0`。","pattern":"^((\\d{2}\\.\\d{1}\\.\\d{5}\\.\\d{1}$|^8\\.1)|())$","scope":"machine-overridable"},"C_Cpp.default.compileCommands":{"type":"string","markdownDescription":"`compileCommands` 未指定或设置为 `${default}` 时要在配置中使用的值。","scope":"machine-overridable"},"C_Cpp.default.forcedInclude":{"type":"array","items":{"type":"string"},"uniqueItems":true,"markdownDescription":"未指定 `forcedInclude` 时要在配置中使用的值，或 `forcedInclude` 中存在 `${default}` 时要插入的值。","scope":"machine-overridable"},"C_Cpp.default.intelliSenseMode":{"type":"string","enum":["","macos-clang-x86","macos-clang-x64","macos-clang-arm","macos-clang-arm64","macos-gcc-x86","macos-gcc-x64","macos-gcc-arm","macos-gcc-arm64","linux-clang-x86","linux-clang-x64","linux-clang-arm","linux-clang-arm64","linux-gcc-x86","linux-gcc-x64","linux-gcc-arm","linux-gcc-arm64","windows-clang-x86","windows-clang-x64","windows-clang-arm","windows-clang-arm64","windows-gcc-x86","windows-gcc-x64","windows-gcc-arm","windows-gcc-arm64","windows-msvc-x86","windows-msvc-x64","windows-msvc-arm","windows-msvc-arm64","clang-x86","clang-x64","clang-arm","clang-arm64","gcc-x86","gcc-x64","gcc-arm","gcc-arm64","msvc-x86","msvc-x64","msvc-arm","msvc-arm64"],"markdownDescription":"`intelliSenseMode` 未指定或设置为 `${default}` 时要在配置中使用的值。","scope":"machine-overridable"},"C_Cpp.default.compilerPath":{"type":["string","null"],"default":null,"markdownDescription":"`compilerPath` 未指定或设置为 `${default}` 时要在配置中使用的值。","scope":"machine-overridable"},"C_Cpp.default.compilerArgs":{"type":"array","items":{"type":"string"},"uniqueItems":true,"markdownDescription":"`compilerArgs` 未指定或设置为 `${default}` 时要在配置中使用的值。","scope":"machine-overridable"},"C_Cpp.default.cStandard":{"type":"string","enum":["","c89","c99","c11","c17","c23","gnu89","gnu99","gnu11","gnu17","gnu23"],"markdownDescription":"`cStandard` 未指定或设置为 `${default}` 时要在配置中使用的值。","scope":"resource"},"C_Cpp.default.cppStandard":{"type":"string","enum":["","c++98","c++03","c++11","c++14","c++17","c++20","c++23","gnu++98","gnu++03","gnu++11","gnu++14","gnu++17","gnu++20","gnu++23"],"markdownDescription":"`cppStandard` 未指定或设置为 `${default}` 时要在配置中使用的值。","scope":"resource"},"C_Cpp.default.configurationProvider":{"type":"string","markdownDescription":"`configurationProvider` 未指定或设置为 `${default}` 时要在配置中使用的值。","scope":"resource"},"C_Cpp.default.mergeConfigurations":{"type":"boolean","markdownDescription":"设置为 `true` 以将包含路径、定义和强制包含与来自配置提供程序的包含路径、定义和强制包含合并。","scope":"resource"},"C_Cpp.default.browse.path":{"type":"array","items":{"type":"string"},"default":null,"uniqueItems":true,"markdownDescription":"未指定 `browse.path` 时要在配置中使用的值，或 `browse.path` 中存在 `${default}` 时要插入的值。","scope":"machine-overridable"},"C_Cpp.default.browse.databaseFilename":{"type":"string","markdownDescription":"`browse.databaseFilename` 未指定或设置为 `${default}` 时要在配置中使用的值。","scope":"machine-overridable"},"C_Cpp.default.browse.limitSymbolsToIncludedHeaders":{"type":"boolean","default":true,"markdownDescription":"`browse.limitSymbolsToIncludedHeaders` 未指定或设置为 `${default}` 时要在配置中使用的值。","scope":"resource"},"C_Cpp.default.systemIncludePath":{"type":"array","items":{"type":"string"},"uniqueItems":true,"markdownDescription":"要用于系统包含路径的值。如果设置，则其将替换通过 `compilerPath` 和 `compileCommands` 设置获取的系统包含路径。","scope":"machine-overridable"},"C_Cpp.default.customConfigurationVariables":{"type":["object","null"],"default":null,"patternProperties":{"(^.+$)":{"type":"string"}},"markdownDescription":"未设置 `customConfigurationVariables` 时要在配置中使用的值，或 `${default}` 在 `customConfigurationVariables` 中作为键存在时要插入的值。","scope":"machine-overridable"},"C_Cpp.default.enableConfigurationSquiggles":{"type":"boolean","default":true,"markdownDescription":"控制扩展是否将报告在 `c_cpp_properties.json` 中检测到的错误。","scope":"resource"},"C_Cpp.default.dotConfig":{"type":"string","markdownDescription":"未指定 `dotConfig` 时要在配置中使用的值，或 `dotConfig` 中存在 `${default}` 时要插入的值。","scope":"resource"},"C_Cpp.configurationWarnings":{"type":"string","enum":["enabled","disabled"],"default":"enabled","description":"确定在配置提供程序扩展无法提供源文件配置时是否显示弹出通知。","scope":"resource"},"C_Cpp.workspaceParsingPriority":{"type":"string","enum":["highest","high","medium","low"],"default":"highest","markdownDescription":"控制分析非活动工作区文件是否使用睡眠以避免使用 100% CPU。值 `highest`/`high`/`medium`/`low` 对应于约 100/75/50/25% 的 CPU 使用率。","scope":"window"},"C_Cpp.intelliSenseEngine":{"type":"string","enum":["default","Tag Parser","disabled"],"default":"default","description":"控制 IntelliSense 提供程序。","enumDescriptions":["通过单独的 IntelliSense 流程提供上下文感知结果。","提供非上下文感知的“模糊”结果。","关闭 C/C++ 语言服务功能。"],"scope":"resource"},"C_Cpp.intelliSenseEngineFallback":{"type":"string","enum":["enabled","disabled"],"default":"disabled","markdownDescription":"控制 IntelliSense 引擎是否将自动切换为包含 `#include` 错误的翻译单元的标记分析器。","scope":"resource"},"C_Cpp.exclusionPolicy":{"type":"string","enum":["checkFolders","checkFilesAndFolders"],"default":"checkFolders","markdownDescription":"当扩展在确定哪些文件应添加到代码导航数据库，并遍历 `browse.path` 数组中的路径时，指示其使用 `#files.exclude#` (和 `#C_Cpp.files.exclude#`)设置的时间。如果 `#files.exclude#` 设置仅包含文件夹，则 `checkFolders` 为最佳选择，且将提高扩展可以初始化代码导航数据库的速度。","enumDescriptions":["排除筛选器将仅对每个文件夹进行一次评估(不检查单个文件)。","将针对每个遇到的文件和文件夹评估排除筛选器。"],"scope":"resource"},"C_Cpp.files.exclude":{"type":"object","markdownDescription":"为排除文件夹(以及文件 - 如果更改了 `#C_Cpp.exclusionPolicy#`)配置 glob 模式。这些特定于 C/C++ 扩展，并且是 `#files.exclude#` 的补充，但与 `#files.exclude#` 不同，它们也适用于当前工作区文件夹之外的路径，并且不会从资源管理器视图中删除。[此处](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options)。","default":{"**/.vscode":true,"**/.vs":true},"additionalProperties":{"anyOf":[{"type":"boolean","markdownDescription":"要与文件路径匹配的 glob 模式。设置为 `true` 或 `false` 以启用或禁用模式。"},{"type":"object","properties":{"when":{"type":"string","pattern":"\\w*\\$\\(basename\\)\\w*","default":"$(basename).ext","markdownDescription":"对匹配文件同辈进行其他检查。将 `$(basename)` 用作匹配文件名变量。"}}}]},"scope":"resource"}}},{"title":"格式设置","properties":{"C_Cpp.vcFormat.indent.braces":{"type":"boolean","default":false,"markdownDescription":"按 `#editor.tabSize#` 设置中指定的量缩进大括号。","scope":"resource"},"C_Cpp.vcFormat.indent.multiLineRelativeTo":{"type":"string","enum":["outermostParenthesis","innermostParenthesis","statementBegin"],"enumDescriptions":["相对于最外侧的左括号缩进新行。","相对于最内侧的左括号缩进新行。","相对于当前语句的开头缩进新行。"],"default":"innermostParenthesis","description":"确定相对于哪个新行缩进。","scope":"resource"},"C_Cpp.vcFormat.indent.withinParentheses":{"type":"string","enum":["alignToParenthesis","indent"],"markdownEnumDescriptions":["新行对齐到左括号下。","根据 `#C_Cpp.vcFormat.indent.multiLineRelativeTo#` 缩进新行。"],"default":"indent","markdownDescription":"键入新行时，其会在左括号下或根据 `#C_Cpp.vcFormat.indent.multiLineRelativeTo#` 进行对齐。","scope":"resource"},"C_Cpp.vcFormat.indent.preserveWithinParentheses":{"type":"boolean","default":false,"description":"在现有代码中，保留括号内新行现有的缩进对齐方式。","scope":"resource"},"C_Cpp.vcFormat.indent.caseLabels":{"type":"boolean","default":false,"markdownDescription":"按 `#editor.tabSize#` 设置中指定的量缩进标签(相对于开关语句)。","scope":"resource"},"C_Cpp.vcFormat.indent.caseContents":{"type":"boolean","default":true,"markdownDescription":"按 `#editor.tabSize#` 设置中指定的量缩进 `case` 块内的代码(相对于其标签)。","scope":"resource"},"C_Cpp.vcFormat.indent.caseContentsWhenBlock":{"type":"boolean","default":false,"markdownDescription":"按 `#editor.tabSize#` 设置中指定的量缩进 case 语句后的大括号。","scope":"resource"},"C_Cpp.vcFormat.indent.lambdaBracesWhenParameter":{"type":"boolean","default":true,"markdownDescription":"按 `#editor.tabSize#` 设置中指定的量，对用作函数参数的 Lambda 大括号进行缩进(相对于语句开头)。","scope":"resource"},"C_Cpp.vcFormat.indent.gotoLabels":{"type":"string","enum":["oneLeft","leftmostColumn","none"],"markdownEnumDescriptions":["按 `#editor.tabSize#` 设置中指定的量将 goto 标签置于当前代码缩进的左侧。","将 goto 标签置于代码的最左侧边缘。","不会格式化 goto 标签。"],"default":"oneLeft","description":"goto 标签的位置。","scope":"resource"},"C_Cpp.vcFormat.indent.preprocessor":{"type":"string","enum":["oneLeft","leftmostColumn","none"],"markdownEnumDescriptions":["按 `#editor.tabSize#` 设置中指定的量将预处理器指令放置在当前代码缩进的左侧。","预处理器指令位于代码的最左侧边缘。","不会格式化预处理器指令。"],"default":"leftmostColumn","description":"预处理器指令的位置。","scope":"resource"},"C_Cpp.vcFormat.indent.accessSpecifiers":{"type":"boolean","default":false,"markdownDescription":"按 `#editor.tabSize#` 设置中指定的量缩进访问说明符(相对于类或结构定义)。","scope":"resource"},"C_Cpp.vcFormat.indent.namespaceContents":{"type":"boolean","default":true,"markdownDescription":"按 `#editor.tabSize#` 设置中指定的量缩进代码(相对于其封闭命名空间)。","scope":"resource"},"C_Cpp.vcFormat.indent.preserveComments":{"type":"boolean","default":false,"description":"在格式设置操作过程中未更改注释的缩进。","scope":"resource"},"C_Cpp.vcFormat.newLine.beforeOpenBrace.namespace":{"type":"string","enum":["newLine","sameLine","ignore"],"enumDescriptions":["将左大括号移动到新行。","左大括号保留在同一行上，并在每个左大括号的前面添加一个空格。","左大括号没有格式化。"],"default":"ignore","description":"命名空间左大括号的位置。","scope":"resource"},"C_Cpp.vcFormat.newLine.beforeOpenBrace.type":{"type":"string","enum":["newLine","sameLine","ignore"],"enumDescriptions":["将左大括号移动到新行。","左大括号保留在同一行上，并在每个左大括号的前面添加一个空格。","左大括号没有格式化。"],"default":"ignore","description":"类型定义左大括号的位置。","scope":"resource"},"C_Cpp.vcFormat.newLine.beforeOpenBrace.function":{"type":"string","enum":["newLine","sameLine","ignore"],"enumDescriptions":["将左大括号移动到新行。","左大括号保留在同一行上，并在每个左大括号的前面添加一个空格。","左大括号没有格式化。"],"default":"ignore","description":"函数左大括号的位置。","scope":"resource"},"C_Cpp.vcFormat.newLine.beforeOpenBrace.block":{"type":"string","enum":["newLine","sameLine","ignore"],"enumDescriptions":["将左大括号移动到新行。","左大括号保留在同一行上，并在每个左大括号的前面添加一个空格。","左大括号没有格式化。"],"default":"ignore","description":"控制块左大括号的位置。","scope":"resource"},"C_Cpp.vcFormat.newLine.beforeOpenBrace.lambda":{"enum":["newLine","sameLine","ignore"],"enumDescriptions":["将左大括号移动到新行。","左大括号保留在同一行上，并在每个左大括号的前面添加一个空格。","左大括号没有格式化。"],"default":"ignore","description":"Lambda 函数左大括号的位置。","scope":"resource"},"C_Cpp.vcFormat.newLine.scopeBracesOnSeparateLines":{"type":"boolean","default":false,"description":"在单独的行上放置用于范围的左大括号和右大括号。","scope":"resource"},"C_Cpp.vcFormat.newLine.closeBraceSameLine.emptyType":{"type":"boolean","default":false,"description":"对于空类型，将右大括号移动到左大括号所在的同一行。","scope":"resource"},"C_Cpp.vcFormat.newLine.closeBraceSameLine.emptyFunction":{"type":"boolean","default":false,"description":"对于空的函数体，将右大括号移动到左大括号所在的同一行。","scope":"resource"},"C_Cpp.vcFormat.newLine.beforeCatch":{"type":"boolean","default":true,"markdownDescription":"将 `catch` 和类似关键字放置在新行上。","scope":"resource"},"C_Cpp.vcFormat.newLine.beforeElse":{"type":"boolean","default":true,"markdownDescription":"将 `else` 置于新行。","scope":"resource"},"C_Cpp.vcFormat.newLine.beforeWhileInDoWhile":{"type":"boolean","default":false,"markdownDescription":"将 `while` 置于新行上的 `do`-`while` 循环中。","scope":"resource"},"C_Cpp.vcFormat.space.beforeFunctionOpenParenthesis":{"type":"string","enum":["insert","remove","ignore"],"enumDescriptions":["在函数的左括号前面添加一个空格。","删除函数左括号前的空格。","保留输入的空格。"],"default":"remove","description":"函数名称与参数列表的左括号之间的间距。","scope":"resource"},"C_Cpp.vcFormat.space.withinParameterListParentheses":{"type":"boolean","default":false,"description":"在函数参数列表中的左括号后面和右括号前面添加一个空格。","scope":"resource"},"C_Cpp.vcFormat.space.betweenEmptyParameterListParentheses":{"type":"boolean","default":false,"description":"当函数参数列表为空时，在其括号之间插入一个空格。","scope":"resource"},"C_Cpp.vcFormat.space.afterKeywordsInControlFlowStatements":{"type":"boolean","default":true,"description":"在关键字与控制流语句中的左括号之间添加一个空格。","scope":"resource"},"C_Cpp.vcFormat.space.withinControlFlowStatementParentheses":{"type":"boolean","default":false,"description":"在控制流语句的左括号后面和右括号前面添加一个空格。","scope":"resource"},"C_Cpp.vcFormat.space.beforeLambdaOpenParenthesis":{"type":"boolean","default":false,"description":"在 lambda 参数列表的左括号前面添加一个空格。","scope":"resource"},"C_Cpp.vcFormat.space.withinCastParentheses":{"type":"boolean","default":false,"description":"在 C 样式的强制转换的左括号后面和右括号前面添加一个空格。","scope":"resource"},"C_Cpp.vcFormat.space.afterCastCloseParenthesis":{"type":"boolean","default":false,"description":"在 C 样式的强制转换的右括号后面添加一个空格。","scope":"resource"},"C_Cpp.vcFormat.space.withinExpressionParentheses":{"type":"boolean","default":false,"description":"在带圆括号的表达式的左括号后面和右括号前面添加一个空格。","scope":"resource"},"C_Cpp.vcFormat.space.beforeBlockOpenBrace":{"type":"boolean","default":true,"description":"在范围块的左大括号前面添加一个空格。","scope":"resource"},"C_Cpp.vcFormat.space.betweenEmptyBraces":{"type":"boolean","default":false,"description":"当大括号为空且位于同一行时，在它们之间插入一个空格。","scope":"resource"},"C_Cpp.vcFormat.space.beforeInitializerListOpenBrace":{"type":"boolean","default":false,"description":"在统一初始化和初始值设定项列表的左大括号前面添加一个空格。","scope":"resource"},"C_Cpp.vcFormat.space.withinInitializerListBraces":{"type":"boolean","default":true,"description":"在统一初始化和初始值设定项列表的左大括号后面和右大括号前面添加一个空格。","scope":"resource"},"C_Cpp.vcFormat.space.preserveInInitializerList":{"type":"boolean","default":true,"description":"在统一初始化和初始值设定项列表中，逗号两侧的空格会保留。","scope":"resource"},"C_Cpp.vcFormat.space.beforeOpenSquareBracket":{"type":"boolean","default":false,"description":"在左方括号之前添加一个空格。","scope":"resource"},"C_Cpp.vcFormat.space.withinSquareBrackets":{"type":"boolean","default":false,"description":"在左方括号后面和右方括号前面添加一个空格。","scope":"resource"},"C_Cpp.vcFormat.space.beforeEmptySquareBrackets":{"type":"boolean","default":false,"description":"当方括号为空时，在左方括号前面添加一个空格。","scope":"resource"},"C_Cpp.vcFormat.space.betweenEmptySquareBrackets":{"type":"boolean","default":false,"description":"当方括号为空时，在方括号之间插入一个空格。","scope":"resource"},"C_Cpp.vcFormat.space.groupSquareBrackets":{"type":"boolean","default":true,"description":"对于多维数组，删除方括号之间的所有空格。控制空格的其他设置将被重写。","scope":"resource"},"C_Cpp.vcFormat.space.withinLambdaBrackets":{"type":"boolean","default":false,"description":"在左方括号后面和右方括号前面添加一个空格。","scope":"resource"},"C_Cpp.vcFormat.space.betweenEmptyLambdaBrackets":{"type":"boolean","default":false,"description":"当方括号为空时，在方括号之间插入一个空格。","scope":"resource"},"C_Cpp.vcFormat.space.beforeComma":{"type":"boolean","default":false,"description":"在每个逗号前添加一个空格。","scope":"resource"},"C_Cpp.vcFormat.space.afterComma":{"type":"boolean","default":true,"description":"在每个逗号后面添加一个空格。","scope":"resource"},"C_Cpp.vcFormat.space.removeAroundMemberOperators":{"type":"boolean","default":true,"description":"成员访问运算符、指向成员的指针运算符和范围解析运算符前后的空格会被删除。","scope":"resource"},"C_Cpp.vcFormat.space.beforeInheritanceColon":{"type":"boolean","default":true,"description":"在类定义中继承的类型的冒号前面添加一个空格。","scope":"resource"},"C_Cpp.vcFormat.space.beforeConstructorColon":{"type":"boolean","default":true,"description":"在构造函数定义中的冒号前面添加一个空格。","scope":"resource"},"C_Cpp.vcFormat.space.removeBeforeSemicolon":{"type":"boolean","default":true,"description":"将移除每个分号前的空格。","scope":"resource"},"C_Cpp.vcFormat.space.insertAfterSemicolon":{"type":"boolean","default":false,"description":"在每个分号后面插入一个空格。","scope":"resource"},"C_Cpp.vcFormat.space.removeAroundUnaryOperator":{"type":"boolean","default":true,"description":"移除一元运算符和操作数之间的空格。","scope":"resource"},"C_Cpp.vcFormat.space.aroundBinaryOperator":{"type":"string","enum":["insert","remove","ignore"],"enumDescriptions":["在运算符的前后添加一个空格。","移除运算符前后的空格。","保留输入的空格。"],"default":"insert","description":"二进制运算符周围的空格。","scope":"resource"},"C_Cpp.vcFormat.space.aroundAssignmentOperator":{"type":"string","enum":["insert","remove","ignore"],"enumDescriptions":["在运算符的前后添加一个空格。","移除运算符前后的空格。","保留输入的空格。"],"default":"insert","description":"赋值运算符周围的空格。","scope":"resource"},"C_Cpp.vcFormat.space.pointerReferenceAlignment":{"type":"string","enum":["left","center","right","ignore"],"enumDescriptions":["指针和引用运算符左对齐。","指针和引用运算符居中对齐。","指针和引用运算符右对齐。","指针和引用运算符没有格式化。"],"default":"left","description":"指针和引用运算符周围的空格。","scope":"resource"},"C_Cpp.vcFormat.space.aroundTernaryOperator":{"type":"string","enum":["insert","remove","ignore"],"enumDescriptions":["在运算符的前后添加一个空格。","移除运算符前后的空格。","保留输入的空格。"],"default":"insert","description":"条件运算符周围的空格。","scope":"resource"},"C_Cpp.vcFormat.wrap.preserveBlocks":{"type":"string","enum":["oneLiners","allOneLineScopes","never"],"markdownEnumDescriptions":["在一行中输入的完整代码块会保留在一行上，不考虑`C_Cpp.vcFormat.newLine.*` 设置的值。","任何在一行中输入左大括号和右大括号的代码都会保留在一行上，不考虑任何 `C_Cpp.vcFormat.newLine.*` 设置的值。","代码块始终基于 `C_Cpp.vcFormat.newLine.*` 设置的值进行格式化。"],"default":"oneLiners","description":"块的换行选项。","scope":"resource"},"C_Cpp.clang_format_path":{"type":"string","markdownDescription":"`clang-format` 可执行文件的完整路径。如果未指定，则 `clang-format` 在使用的环境路径中可用。如果在环境路径中找不到，则将使用与扩展捆绑的 `clang-format`。","scope":"machine-overridable"},"C_Cpp.clang_format_style":{"type":"string","default":"file","markdownDescription":"编码样式目前支持: `Visual Studio`、`LLVM`、 `Google`、`Chromium`、`Mozilla`、`WebKit`、 `Microsoft`、`GNU`。使用 `file` 从当前目录或父目录中的 `.clang-format` 文件加载样式，或使用 `file:<路径>/.clang-format` 引用特定路径。使用 `{键: 值, ...}` 设置特定参数。例如，`Visual Studio` 样式类似于: `{ BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }`。","scope":"resource"},"C_Cpp.formatting":{"type":"string","enum":["clangFormat","vcFormat","default","disabled"],"markdownEnumDescriptions":["`clang-format` 将用于格式代码。","将使用 Visual C++ 格式设置引擎来设置代码的格式。","默认情况下，`clang-format` 将用于格式化代码。但是，如果找到具有相关设置的 `.editorconfig` 文件接近于所格式化的代码，且 `#C_Cpp.clang_format_style#` 为默认值: `file`，则将使用 Visual C++ 格式化引擎。","将禁用代码格式设置。"],"default":"default","description":"配置格式设置引擎。","scope":"resource"},"C_Cpp.clang_format_fallbackStyle":{"type":"string","default":"Visual Studio","markdownDescription":"用作回退的预定义样式的名称，以防使用样式 `file` 调用 `clang-format` 但找不到 `.clang-format` 文件。可能的值为 `Visual Studio`、`LLVM`、 `Google`、`Chromium`、`Mozilla`、`WebKit`、 `Microsoft`、`GNU`、`none`，或使用 `{键: 值, ...}` 以设置特定参数。例如，`Visual Studio` 样式类似于: `{ BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }`。","scope":"resource"},"C_Cpp.clang_format_sortIncludes":{"type":["boolean","null"],"enum":[true,false,null],"default":null,"markdownDescription":"如果设置，则替换由 `SortIncludes` 参数确定的包含排序行为。","scope":"resource"}}},{"title":"代码文档","properties":{"C_Cpp.doxygen.generateOnType":{"type":"boolean","default":true,"description":"控制在键入所选注释样式后是否自动插入 Doxygen 注释。","scope":"resource"},"C_Cpp.doxygen.generatedStyle":{"type":"string","enum":["///","/**","/*!","//!"],"default":"///","description":"用作 Doxygen 注释起始行的字符串。","scope":"resource"},"C_Cpp.doxygen.sectionTags":{"type":"array","default":["attention","tparam","param","result","returns","retval","exception","deprecated","warning","note"],"items":{"type":"string","enum":["attention","author","authors","bug","copyright","date","deprecated","details","exception","invariant","note","param","pre","post","remark","remarks","result","returns","retval","since","tparam","test","todo","version","warning"]},"description":"启用“简化结构化注释”设置后，选择希望在工具提示区域中悬停时显示的 Doxygen 节标记。 ","scope":"resource"},"C_Cpp.commentContinuationPatterns":{"type":"array","default":["/**"],"items":{"anyOf":[{"type":"string","markdownDescription":"开始多行或单行注释块的模式。多行注释块的延续模式默认为 ` * `，或单行注释块默认为此字符串。"},{"type":"object","properties":{"begin":{"type":"string","description":"开启一个多行或单行注释块的模式。"},"continue":{"type":"string","description":"在多行或单行注释块内按下 Enter 键时要插入到下一行的文本。"}}}]},"uniqueItems":true,"description":"定义在多行或单行注释块内按下 Enter 键时的编辑器行为。","scope":"window"},"C_Cpp.simplifyStructuredComments":{"type":"boolean","default":true,"markdownDescription":"如果为 `true`，则悬停和自动完成的工具提示将仅显示结构化注释的某些标签。否则，将显示所有注释。","scope":"application"}}},{"title":"代码分析","properties":{"C_Cpp.codeAnalysis.maxConcurrentThreads":{"type":["integer","null"],"markdownDescription":"用于代码分析的最大并发线程数。默认值 `null` (空)使用从 `#C_Cpp.maxConcurrentThreads#` 继承的值的一半。","default":null,"minimum":1,"maximum":32,"scope":"machine"},"C_Cpp.codeAnalysis.maxMemory":{"type":["integer","null"],"markdownDescription":"超过此内存使用量(以 MB 为单位)后，将并发运行更少的代码分析进程。默认值 `null` (空)使用从 `#C_Cpp.maxMemory#` 继承的值。","default":null,"minimum":256,"maximum":65536,"scope":"machine"},"C_Cpp.codeAnalysis.updateDelay":{"type":"number","default":2000,"markdownDescription":"控制在 `#files.autoSave#` 为 `afterDelay` 且 `#C_Cpp.codeAnalysis.runAutomatically#` 为 `true` 时从编辑触发保存后，代码分析开始处理之前的延迟(以毫秒为单位)。","scope":"application","minimum":0,"maximum":6000},"C_Cpp.codeAnalysis.exclude":{"type":"object","markdownDescription":"配置 glob 模式以排除用于代码分析的文件夹和文件。始终排除不在工作区文件夹下的文件。从 `#files.exclude#` 和 `#C_Cpp.files.exclude#` 继承值。详细了解 glob 模式 [此处](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options)。","default":{},"additionalProperties":{"anyOf":[{"type":"boolean","markdownDescription":"要与文件路径匹配的 glob 模式。设置为 `true` 或 `false` 以启用或禁用模式。"},{"type":"object","properties":{"when":{"type":"string","pattern":"\\w*\\$\\(basename\\)\\w*","default":"$(basename).ext","markdownDescription":"对匹配文件同辈进行其他检查。将 `$(basename)` 用作匹配文件名变量。"}}}]},"scope":"resource"},"C_Cpp.codeAnalysis.clangTidy.codeAction.formatFixes":{"type":"boolean","markdownDescription":"如果为 `true`，则在“修复”代码操作更改的行上运行格式设置。","default":true,"scope":"resource"},"C_Cpp.codeAnalysis.clangTidy.codeAction.showClear":{"type":"string","description":"控制哪些“清除”代码分析问题代码操作选项可用。更改设置以显示更多选项可能需要重新运行代码分析。","enum":["None","AllOnly","AllAndAllType","AllAndAllTypeAndThis"],"enumDescriptions":["不显示“清除”代码操作。","仅显示“全部清除”代码操作(如果只有一种类型，则显示“清除所有<type>”，如果只有一个问题，则显示“清除此项”)。","如果存在多个问题类型，显示“全部清除”代码操作和“清除所有 <type>”代码操作(或如果<type>只有一个问题，显示“清除此项”)","如果有多个问题类型，显示“全部清除”，如果有多个 <type> 问题，显示“清除所有 <type>”以及显示“清除此项”代码操作"],"default":"AllAndAllTypeAndThis","scope":"application"},"C_Cpp.codeAnalysis.clangTidy.codeAction.showDisable":{"type":"boolean","markdownDescription":"如果为 `true`，'禁用'代码操作将在可用时显示(下次运行代码分析时)。使用'禁用'代码操作时，它会将警告代码添加到 `C_Cpp.codeAnalysis.clangTidy.checks.disabled` 设置。","default":true,"scope":"application"},"C_Cpp.codeAnalysis.clangTidy.codeAction.showDocumentation":{"type":"boolean","markdownDescription":"如果为 `true`，“显示文档”代码操作将在可用时显示(下次运行代码分析时)。","default":true,"scope":"application"},"C_Cpp.codeAnalysis.runAutomatically":{"type":"boolean","markdownDescription":"如果为 `true`，则代码分析将在文件打开或保存后自动在文件上运行。","default":true,"scope":"resource"},"C_Cpp.codeAnalysis.clangTidy.enabled":{"type":"boolean","default":false,"markdownDescription":"如果为 `true`，则在 `#C_Cpp.codeAnalysis.runAutomatically#` 为 `true` (默认值)时，将启用使用 `clang-tidy` 的代码分析，并在文件打开或保存后运行它。","scope":"resource"},"C_Cpp.codeAnalysis.clangTidy.path":{"type":"string","markdownDescription":"`clang-tidy` 可执行文件的完整路径。如果未指定，并且 `clang-tidy` 在环境路径中可用，则使用该路径。如果在环境路径中找不到，则将使用与扩展捆绑的 `clang-tidy`。","scope":"machine-overridable"},"C_Cpp.codeAnalysis.clangTidy.config":{"type":"string","markdownDescription":"指定 YAML/JSON 格式的 `clang-tidy` 配置: `{Checks: '-*,clang-analyzer-*', CheckOptions: [{键: x, 值: y}]}`。当值为空时，`clang-tidy` 将尝试为其父目录中的每个源文件查找名为 `.clang-tidy` 的文件。","scope":"resource"},"C_Cpp.codeAnalysis.clangTidy.fallbackConfig":{"type":"string","markdownDescription":"指定 YAML/JSON 格式的 `clang-tidy` 配置，以在未设置 `#C_Cpp.codeAnalysis.clangTidy.config#`，并且未找到 `.clang-tidy` 文件: `{Checks: '-*,clang-analyzer-*', CheckOptions: [{键: x, 值: y}]}` 时将其用作回退。","scope":"resource"},"C_Cpp.codeAnalysis.clangTidy.headerFilter":{"type":["string","null"],"default":null,"markdownDescription":"与要从中输出诊断的标头名称匹配的 POSIX 扩展正则表达式 (ERE)。始终显示来自每个翻译单元的主文件的诊断。支持 `${workspaceFolder}` 变量(如果不存在 `.clang-tidy` 文件，则该变量将用作默认回退值)。如果此选项不是 `null` (空)，则将替代 `.clang-tidy` 文件中的 `HeaderFilterRegex` 选项(如果有)。","scope":"resource"},"C_Cpp.codeAnalysis.clangTidy.args":{"type":"array","items":{"type":"string"},"uniqueItems":true,"markdownDescription":"要传递给 `clang-tidy` 的其他命令行参数。这些优先于等效的 `C_Cpp.codeAnalysis.clangTidy.*` 设置。","scope":"resource"},"C_Cpp.codeAnalysis.clangTidy.useBuildPath":{"type":"boolean","default":false,"markdownDescription":"如果设置了 `true` 和 `compileCommands`，则 `-p=<build-path>` 参数将传递给 `clang-tidy`，而不是在 `--` 之后传递生成参数。如果未设置环境变量以便可以找到系统包含项，则此操作可能不起作用。","scope":"resource"},"C_Cpp.codeAnalysis.clangTidy.checks.enabled":{"type":"array","items":{"type":"string","enum":["*","abseil-*","abseil-cleanup-ctad","abseil-duration-*","abseil-duration-addition","abseil-duration-comparison","abseil-duration-conversion-cast","abseil-duration-division","abseil-duration-factory-*","abseil-duration-factory-float","abseil-duration-factory-scale","abseil-duration-subtraction","abseil-duration-unnecessary-conversion","abseil-faster-strsplit-delimiter","abseil-no-*","abseil-no-internal-dependencies","abseil-no-namespace","abseil-redundant-strcat-calls","abseil-str-cat-append","abseil-string-find-*","abseil-string-find-startswith","abseil-string-find-str-contains","abseil-time-*","abseil-time-comparison","abseil-time-subtraction","abseil-upgrade-duration-conversions","altera-*","altera-id-dependent-backward-branch","altera-kernel-name-restriction","altera-single-work-item-barrier","altera-struct-pack-align","altera-unroll-loops","android-*","android-cloexec-*","android-cloexec-accept","android-cloexec-accept4","android-cloexec-creat","android-cloexec-dup","android-cloexec-epoll-*","android-cloexec-epoll-create","android-cloexec-epoll-create1","android-cloexec-fopen","android-cloexec-inotify-*","android-cloexec-inotify-init","android-cloexec-inotify-init1","android-cloexec-memfd-create","android-cloexec-open","android-cloexec-pipe","android-cloexec-pipe2","android-cloexec-socket","android-comparison-in-temp-failure-retry","boost-use-to-string","bugprone-*","bugprone-argument-comment","bugprone-assert-side-effect","bugprone-assignment-in-if-condition","bugprone-bad-signal-to-kill-thread","bugprone-bool-pointer-implicit-conversion","bugprone-branch-clone","bugprone-copy-constructor-init","bugprone-dangling-handle","bugprone-dynamic-static-initializers","bugprone-easily-swappable-parameters","bugprone-exception-escape","bugprone-fold-init-type","bugprone-forward-declaration-namespace","bugprone-forwarding-reference-overload","bugprone-implicit-widening-of-multiplication-result","bugprone-inaccurate-erase","bugprone-incorrect-roundings","bugprone-infinite-loop","bugprone-integer-division","bugprone-lambda-function-name","bugprone-macro-parentheses","bugprone-macro-repeated-side-effects","bugprone-misplaced-*","bugprone-misplaced-operator-in-strlen-in-alloc","bugprone-misplaced-pointer-arithmetic-in-alloc","bugprone-misplaced-widening-cast","bugprone-move-forwarding-reference","bugprone-multiple-statement-macro","bugprone-narrowing-conversions","bugprone-no-escape","bugprone-not-null-terminated-result","bugprone-parent-virtual-call","bugprone-posix-return","bugprone-redundant-branch-condition","bugprone-reserved-identifier","bugprone-shared-ptr-array-mismatch","bugprone-signal-handler","bugprone-signed-char-misuse","bugprone-sizeof-*","bugprone-sizeof-container","bugprone-sizeof-expression","bugprone-spuriously-wake-up-functions","bugprone-standalone-empty","bugprone-string-*","bugprone-string-constructor","bugprone-string-integer-assignment","bugprone-string-literal-with-embedded-nul","bugprone-stringview-nullptr","bugprone-suspicious-*","bugprone-suspicious-enum-usage","bugprone-suspicious-include","bugprone-suspicious-memory-comparison","bugprone-suspicious-memset-usage","bugprone-suspicious-missing-comma","bugprone-suspicious-realloc-usage","bugprone-suspicious-semicolon","bugprone-suspicious-string-compare","bugprone-swapped-arguments","bugprone-terminating-continue","bugprone-throw-keyword-missing","bugprone-too-small-loop-variable","bugprone-unchecked-optional-access","bugprone-undefined-memory-manipulation","bugprone-undelegated-constructor","bugprone-unhandled-*","bugprone-unhandled-exception-at-new","bugprone-unhandled-self-assignment","bugprone-unused-raii","bugprone-unused-return-value","bugprone-use-after-move","bugprone-virtual-near-miss","cert-*","cert-con*","cert-con36-c","cert-con54-cpp","cert-dcl*","cert-dcl03-c","cert-dcl16-c","cert-dcl21-cpp","cert-dcl37-c","cert-dcl50-cpp","cert-dcl51-cpp","cert-dcl54-cpp","cert-dcl58-cpp","cert-dcl59-cpp","cert-env33-c","cert-err*","cert-err09-cpp","cert-err33-c","cert-err34-c","cert-err52-cpp","cert-err58-cpp","cert-err60-cpp","cert-err61-cpp","cert-exp42-c","cert-fio38-c","cert-flp*","cert-flp30-c","cert-flp37-c","cert-mem57-cpp","cert-msc*","cert-msc30-c","cert-msc32-c","cert-msc50-cpp","cert-msc51-cpp","cert-msc54-cpp","cert-oop*","cert-oop11-cpp","cert-oop54-cpp","cert-oop57-cpp","cert-oop58-cpp","cert-pos*","cert-pos44-c","cert-pos47-c","cert-sig30-c","cert-str34-c","clang-analyzer-*","clang-analyzer-core.*","clang-analyzer-core.CallAndMessage","clang-analyzer-core.DivideZero","clang-analyzer-core.DynamicTypePropagation","clang-analyzer-core.NonNullParamChecker","clang-analyzer-core.NullDereference","clang-analyzer-core.StackAddressEscape","clang-analyzer-core.UndefinedBinaryOperatorResult","clang-analyzer-core.uninitialized.*","clang-analyzer-core.uninitialized.ArraySubscript","clang-analyzer-core.uninitialized.Assign","clang-analyzer-core.uninitialized.Branch","clang-analyzer-core.uninitialized.CapturedBlockVariable","clang-analyzer-core.uninitialized.UndefReturn","clang-analyzer-core.VLASize","clang-analyzer-cplusplus.*","clang-analyzer-cplusplus.InnerPointer","clang-analyzer-cplusplus.Move","clang-analyzer-cplusplus.NewDelete","clang-analyzer-cplusplus.NewDeleteLeaks","clang-analyzer-deadcode.DeadStores","clang-analyzer-nullablity.*","clang-analyzer-nullability.NullableDereferenced","clang-analyzer-nullability.NullablePassedToNonnull","clang-analyzer-nullability.NullableReturnedFromNonnull","clang-analyzer-nullability.NullPassedToNonnull","clang-analyzer-nullability.NullReturnedFromNonnull","clang-analyzer-optin.*","clang-analyzer-optin.cplusplus.*","clang-analyzer-optin.cplusplus.UninitializedObject","clang-analyzer-optin.cplusplus.VirtualCall","clang-analyzer-optin.mpi.MPI-Checker","clang-analyzer-optin.osx.*","clang-analyzer-optin.osx.cocoa.localizability.*","clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker","clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker","clang-analyzer-optin.osx.OSObjectCStyleCast","clang-analyzer-optin.performance.*","clang-analyzer-optin.performance.GCDAntipattern","clang-analyzer-optin.performance.Padding","clang-analyzer-optin.portability.UnixAPI","clang-analyzer-osx.*","clang-analyzer-osx.API","clang-analyzer-osx.cocoa.*","clang-analyzer-osx.cocoa.AtSync","clang-analyzer-osx.cocoa.AutoreleaseWrite","clang-analyzer-osx.cocoa.ClassRelease","clang-analyzer-osx.cocoa.Dealloc","clang-analyzer-osx.cocoa.IncompatibleMethodTypes","clang-analyzer-osx.cocoa.Loops","clang-analyzer-osx.cocoa.MissingSuperCall","clang-analyzer-osx.cocoa.NilArg","clang-analyzer-osx.cocoa.NonNilReturnValue","clang-analyzer-osx.cocoa.NSAutoreleasePool","clang-analyzer-osx.cocoa.NSError","clang-analyzer-osx.cocoa.ObjCGenerics","clang-analyzer-osx.cocoa.RetainCount","clang-analyzer-osx.cocoa.RetainCountBase","clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak","clang-analyzer-osx.cocoa.SelfInit","clang-analyzer-osx.cocoa.SuperDealloc","clang-analyzer-osx.cocoa.UnusedIvars","clang-analyzer-osx.cocoa.VariadicMethodTypes","clang-analyzer-osx.coreFoundation.*","clang-analyzer-osx.coreFoundation.CFError","clang-analyzer-osx.coreFoundation.CFNumber","clang-analyzer-osx.coreFoundation.CFRetainRelease","clang-analyzer-osx.coreFoundation.containers.*","clang-analyzer-osx.coreFoundation.containers.OutOfBounds","clang-analyzer-osx.coreFoundation.containers.PointerSizedValues","clang-analyzer-osx.MIG","clang-analyzer-osx.NumberObjectConversion","clang-analyzer-osx.ObjCProperty","clang-analyzer-osx.OSObjectRetainCount","clang-analyzer-osx.SecKeychainAPI","clang-analyzer-security.*","clang-analyzer-security.FloatLoopCounter","clang-analyzer-security.insecureAPI.*","clang-analyzer-security.insecureAPI.bcmp","clang-analyzer-security.insecureAPI.bcopy","clang-analyzer-security.insecureAPI.bzero","clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling","clang-analyzer-security.insecureAPI.getpw","clang-analyzer-security.insecureAPI.gets","clang-analyzer-security.insecureAPI.mkstemp","clang-analyzer-security.insecureAPI.mktemp","clang-analyzer-security.insecureAPI.rand","clang-analyzer-security.insecureAPI.strcpy","clang-analyzer-security.insecureAPI.UncheckedReturn","clang-analyzer-security.insecureAPI.vfork","clang-analyzer-unix.*","clang-analyzer-unix.API","clang-analyzer-unix.cstring.*","clang-analyzer-unix.cstring.BadSizeArg","clang-analyzer-unix.cstring.NullArg","clang-analyzer-unix.Malloc","clang-analyzer-unix.MallocSizeof","clang-analyzer-unix.MismatchedDeallocator","clang-analyzer-unix.Vfork","clang-analyzer-valist.*","clang-analyzer-valist.CopyToSelf","clang-analyzer-valist.Uninitialized","clang-analyzer-valist.Unterminated","concurrency-*","concurrency-mt-unsafe","concurrency-thread-canceltype-asynchronous","cppcoreguidelines-*","cppcoreguidelines-avoid-*","cppcoreguidelines-avoid-c-arrays","cppcoreguidelines-avoid-const-or-ref-data-members","cppcoreguidelines-avoid-do-while","cppcoreguidelines-avoid-goto","cppcoreguidelines-avoid-magic-numbers","cppcoreguidelines-avoid-non-const-global-variables","cppcoreguidelines-avoid-reference-coroutine-parameters","cppcoreguidelines-c-copy-assignment-signature","cppcoreguidelines-explicit-virtual-functions","cppcoreguidelines-init-variables","cppcoreguidelines-interfaces-global-init","cppcoreguidelines-macro-to-enum","cppcoreguidelines-macro-usage","cppcoreguidelines-narrowing-conversions","cppcoreguidelines-no-malloc","cppcoreguidelines-non-private-member-variables-in-classes","cppcoreguidelines-owning-memory","cppcoreguidelines-prefer-member-initializer","cppcoreguidelines-pro-bounds-*","cppcoreguidelines-pro-bounds-array-to-pointer-decay","cppcoreguidelines-pro-bounds-constant-array-index","cppcoreguidelines-pro-bounds-pointer-arithmetic","cppcoreguidelines-pro-type-*","cppcoreguidelines-pro-type-const-cast","cppcoreguidelines-pro-type-cstyle-cast","cppcoreguidelines-pro-type-member-init","cppcoreguidelines-pro-type-reinterpret-cast","cppcoreguidelines-pro-type-static-cast-downcast","cppcoreguidelines-pro-type-union-access","cppcoreguidelines-pro-type-vararg","cppcoreguidelines-slicing","cppcoreguidelines-special-member-functions","cppcoreguidelines-virtual-class-destructor","darwin-*","darwin-avoid-spinlock","darwin-dispatch-once-nonstatic","fuchsia-*","fuchsia-default-*","fuchsia-default-arguments-calls","fuchsia-default-arguments-declarations","fuchsia-header-anon-namespaces","fuchsia-multiple-inheritance","fuchsia-overloaded-operator","fuchsia-statically-constructed-objects","fuchsia-trailing-return","fuchsia-virtual-inheritance","google-*","google-build-*","google-build-explicit-make-pair","google-build-namespaces","google-build-using-namespace","google-default-arguments","google-explicit-constructor","google-global-names-in-headers","google-objc-*","google-objc-avoid-*","google-objc-avoid-nsobject-new","google-objc-avoid-throwing-exception","google-objc-function-naming","google-objc-global-variable-declaration","google-readability-*","google-readability-avoid-underscore-in-googletest-name","google-readability-braces-around-statements","google-readability-casting","google-readability-function-size","google-readability-namespace-comments","google-readability-todo","google-runtime-*","google-runtime-int","google-runtime-operator","google-upgrade-googletest-case","hicpp-*","hicpp-avoid-*","hicpp-avoid-c-arrays","hicpp-avoid-goto","hicpp-braces-around-statements","hicpp-deprecated-headers","hicpp-exception-baseclass","hicpp-explicit-conversions","hicpp-function-size","hicpp-invalid-access-moved","hicpp-member-init","hicpp-move-const-arg","hicpp-multiway-paths-covered","hicpp-named-parameter","hicpp-new-delete-operators","hicpp-no-*","hicpp-no-array-decay","hicpp-no-assembler","hicpp-no-malloc","hicpp-noexcept-move","hicpp-signed-bitwise","hicpp-special-member-functions","hicpp-static-assert","hicpp-undelegated-constructor","hicpp-uppercase-literal-suffix","hicpp-use-*","hicpp-use-auto","hicpp-use-emplace","hicpp-use-equals-*","hicpp-use-equals-default","hicpp-use-equals-delete","hicpp-use-noexcept","hicpp-use-nullptr","hicpp-use-override","hicpp-vararg","linuxkernel-must-use-errs","llvm-*","llvm-else-after-return","llvm-header-guard","llvm-include-order","llvm-namespace-comment","llvm-prefer-*","llvm-prefer-isa-or-dyn-cast-in-conditionals","llvm-prefer-register-over-unsigned","llvm-qualified-auto","llvm-twine-local","llvmlibc-*","llvmlibc-callee-namespace","llvmlibc-implementation-in-namespace","llvmlibc-restrict-system-libc-headers","misc-*","misc-confusable-identifiers","misc-const-correctness","misc-definitions-in-headers","misc-misleading-*","misc-misleading-bidirectional","misc-misleading-identifier","misc-misplaced-const","misc-new-delete-overloads","misc-no-recursion","misc-non-*","misc-non-copyable-objects","misc-non-private-member-variables-in-classes","misc-redundant-expression","misc-static-assert","misc-throw-by-value-catch-by-reference","misc-unconventional-assign-operator","misc-uniqueptr-reset-release","misc-unused-*","misc-unused-alias-decls","misc-unused-parameters","misc-unused-using-decls","misc-use-anonymous-namespace","modernize-*","modernize-avoid-*","modernize-avoid-bind","modernize-avoid-c-arrays","modernize-concat-nested-namespaces","modernize-deprecated-*","modernize-deprecated-headers","modernize-deprecated-ios-base-aliases","modernize-loop-convert","modernize-macro-to-enum","modernize-make-*","modernize-make-shared","modernize-make-unique","modernize-pass-by-value","modernize-raw-string-literal","modernize-redundant-void-arg","modernize-replace-*","modernize-replace-auto-ptr","modernize-replace-disallow-copy-and-assign-macro","modernize-replace-random-shuffle","modernize-return-braced-init-list","modernize-shrink-to-fit","modernize-unary-static-assert","modernize-use-*","modernize-use-auto","modernize-use-bool-literals","modernize-use-default","modernize-use-default-member-init","modernize-use-emplace","modernize-use-equals-*","modernize-use-equals-default","modernize-use-equals-delete","modernize-use-nodiscard","modernize-use-noexcept","modernize-use-nullptr","modernize-use-override","modernize-use-trailing-return-type","modernize-use-transparent-functors","modernize-use-uncaught-exceptions","modernize-use-using","mpi-*","mpi-buffer-deref","mpi-type-mismatch","objc-*","objc-assert-equals","objc-avoid-nserror-init","objc-dealloc-in-category","objc-forbidden-subclassing","objc-missing-hash","objc-nsdate-formatter","objc-nsinvocation-argument-lifetime","objc-property-declaration","objc-super-self","openmp-*","openmp-exception-escape","openmp-use-default-none","performance-*","performance-faster-string-find","performance-for-range-copy","performance-implicit-conversion-in-loop","performance-inefficient-*","performance-inefficient-algorithm","performance-inefficient-string-concatenation","performance-inefficient-vector-operation","performance-move-*","performance-move-const-arg","performance-move-constructor-init","performance-no-*","performance-no-automatic-move","performance-no-int-to-ptr","performance-noexcept-move-constructor","performance-trivially-destructible","performance-type-promotion-in-math-fn","performance-unnecessary-*","performance-unnecessary-copy-initialization","performance-unnecessary-value-param","portability-*","portability-restrict-system-includes","portability-simd-intrinsics","portability-std-allocator-const","readability-*","readability-avoid-const-params-in-decls","readability-braces-around-statements","readability-const-return-type","readability-container-*","readability-container-contains","readability-container-data-pointer","readability-container-size-empty","readability-convert-member-functions-to-static","readability-delete-null-pointer","readability-duplicate-include","readability-else-after-return","readability-function-*","readability-function-cognitive-complexity","readability-function-size","readability-identifier-*","readability-identifier-length","readability-identifier-naming","readability-implicit-bool-conversion","readability-inconsistent-declaration-parameter-name","readability-isolate-declaration","readability-magic-numbers","readability-make-member-function-const","readability-misleading-indentation","readability-misplaced-array-index","readability-named-parameter","readability-non-const-parameter","readability-qualified-auto","readability-redundant-*","readability-redundant-access-specifiers","readability-redundant-control-flow","readability-redundant-declaration","readability-redundant-function-ptr-dereference","readability-redundant-member-init","readability-redundant-preprocessor","readability-redundant-smartptr-get","readability-redundant-string-*","readability-redundant-string-cstr","readability-redundant-string-init","readability-simplify-*","readability-simplify-boolean-expr","readability-simplify-subscript-expr","readability-static-*","readability-static-accessed-through-instance","readability-static-definition-in-anonymous-namespace","readability-string-compare","readability-suspicious-call-argument","readability-uniqueptr-delete-release","readability-uppercase-literal-suffix","readability-use-anyofallof","zircon-temporary-objects"]},"uniqueItems":true,"markdownDescription":"已启用的 `clang-tidy` 检查列表。这些值将追加到 `.clang-tidy` 文件中的 `Checks` 或 `#C_Cpp.codeAnalysis.clangTidy.config#` (如果有)。除非显式禁用，否则始终使用默认检查 `clang-analyzer-*`。","scope":"resource"},"C_Cpp.codeAnalysis.clangTidy.checks.disabled":{"type":"array","items":{"type":"string","enum":["*","abseil-*","abseil-cleanup-ctad","abseil-duration-*","abseil-duration-addition","abseil-duration-comparison","abseil-duration-conversion-cast","abseil-duration-division","abseil-duration-factory-*","abseil-duration-factory-float","abseil-duration-factory-scale","abseil-duration-subtraction","abseil-duration-unnecessary-conversion","abseil-faster-strsplit-delimiter","abseil-no-*","abseil-no-internal-dependencies","abseil-no-namespace","abseil-redundant-strcat-calls","abseil-str-cat-append","abseil-string-find-*","abseil-string-find-startswith","abseil-string-find-str-contains","abseil-time-*","abseil-time-comparison","abseil-time-subtraction","abseil-upgrade-duration-conversions","altera-*","altera-id-dependent-backward-branch","altera-kernel-name-restriction","altera-single-work-item-barrier","altera-struct-pack-align","altera-unroll-loops","android-*","android-cloexec-*","android-cloexec-accept","android-cloexec-accept4","android-cloexec-creat","android-cloexec-dup","android-cloexec-epoll-*","android-cloexec-epoll-create","android-cloexec-epoll-create1","android-cloexec-fopen","android-cloexec-inotify-*","android-cloexec-inotify-init","android-cloexec-inotify-init1","android-cloexec-memfd-create","android-cloexec-open","android-cloexec-pipe","android-cloexec-pipe2","android-cloexec-socket","android-comparison-in-temp-failure-retry","boost-use-to-string","bugprone-*","bugprone-argument-comment","bugprone-assert-side-effect","bugprone-assignment-in-if-condition","bugprone-bad-signal-to-kill-thread","bugprone-bool-pointer-implicit-conversion","bugprone-branch-clone","bugprone-copy-constructor-init","bugprone-dangling-handle","bugprone-dynamic-static-initializers","bugprone-easily-swappable-parameters","bugprone-exception-escape","bugprone-fold-init-type","bugprone-forward-declaration-namespace","bugprone-forwarding-reference-overload","bugprone-implicit-widening-of-multiplication-result","bugprone-inaccurate-erase","bugprone-incorrect-roundings","bugprone-infinite-loop","bugprone-integer-division","bugprone-lambda-function-name","bugprone-macro-parentheses","bugprone-macro-repeated-side-effects","bugprone-misplaced-*","bugprone-misplaced-operator-in-strlen-in-alloc","bugprone-misplaced-pointer-arithmetic-in-alloc","bugprone-misplaced-widening-cast","bugprone-move-forwarding-reference","bugprone-multiple-statement-macro","bugprone-narrowing-conversions","bugprone-no-escape","bugprone-not-null-terminated-result","bugprone-parent-virtual-call","bugprone-posix-return","bugprone-redundant-branch-condition","bugprone-reserved-identifier","bugprone-shared-ptr-array-mismatch","bugprone-signal-handler","bugprone-signed-char-misuse","bugprone-sizeof-*","bugprone-sizeof-container","bugprone-sizeof-expression","bugprone-spuriously-wake-up-functions","bugprone-standalone-empty","bugprone-string-*","bugprone-string-constructor","bugprone-string-integer-assignment","bugprone-string-literal-with-embedded-nul","bugprone-stringview-nullptr","bugprone-suspicious-*","bugprone-suspicious-enum-usage","bugprone-suspicious-include","bugprone-suspicious-memory-comparison","bugprone-suspicious-memset-usage","bugprone-suspicious-missing-comma","bugprone-suspicious-realloc-usage","bugprone-suspicious-semicolon","bugprone-suspicious-string-compare","bugprone-swapped-arguments","bugprone-terminating-continue","bugprone-throw-keyword-missing","bugprone-too-small-loop-variable","bugprone-unchecked-optional-access","bugprone-undefined-memory-manipulation","bugprone-undelegated-constructor","bugprone-unhandled-*","bugprone-unhandled-exception-at-new","bugprone-unhandled-self-assignment","bugprone-unused-raii","bugprone-unused-return-value","bugprone-use-after-move","bugprone-virtual-near-miss","cert-*","cert-con*","cert-con36-c","cert-con54-cpp","cert-dcl*","cert-dcl03-c","cert-dcl16-c","cert-dcl21-cpp","cert-dcl37-c","cert-dcl50-cpp","cert-dcl51-cpp","cert-dcl54-cpp","cert-dcl58-cpp","cert-dcl59-cpp","cert-env33-c","cert-err*","cert-err09-cpp","cert-err33-c","cert-err34-c","cert-err52-cpp","cert-err58-cpp","cert-err60-cpp","cert-err61-cpp","cert-exp42-c","cert-fio38-c","cert-flp*","cert-flp30-c","cert-flp37-c","cert-mem57-cpp","cert-msc*","cert-msc30-c","cert-msc32-c","cert-msc50-cpp","cert-msc51-cpp","cert-msc54-cpp","cert-oop*","cert-oop11-cpp","cert-oop54-cpp","cert-oop57-cpp","cert-oop58-cpp","cert-pos*","cert-pos44-c","cert-pos47-c","cert-sig30-c","cert-str34-c","clang-analyzer-*","clang-analyzer-core.*","clang-analyzer-core.CallAndMessage","clang-analyzer-core.DivideZero","clang-analyzer-core.DynamicTypePropagation","clang-analyzer-core.NonNullParamChecker","clang-analyzer-core.NullDereference","clang-analyzer-core.StackAddressEscape","clang-analyzer-core.UndefinedBinaryOperatorResult","clang-analyzer-core.uninitialized.*","clang-analyzer-core.uninitialized.ArraySubscript","clang-analyzer-core.uninitialized.Assign","clang-analyzer-core.uninitialized.Branch","clang-analyzer-core.uninitialized.CapturedBlockVariable","clang-analyzer-core.uninitialized.UndefReturn","clang-analyzer-core.VLASize","clang-analyzer-cplusplus.*","clang-analyzer-cplusplus.InnerPointer","clang-analyzer-cplusplus.Move","clang-analyzer-cplusplus.NewDelete","clang-analyzer-cplusplus.NewDeleteLeaks","clang-analyzer-deadcode.DeadStores","clang-analyzer-nullablity.*","clang-analyzer-nullability.NullableDereferenced","clang-analyzer-nullability.NullablePassedToNonnull","clang-analyzer-nullability.NullableReturnedFromNonnull","clang-analyzer-nullability.NullPassedToNonnull","clang-analyzer-nullability.NullReturnedFromNonnull","clang-analyzer-optin.*","clang-analyzer-optin.cplusplus.*","clang-analyzer-optin.cplusplus.UninitializedObject","clang-analyzer-optin.cplusplus.VirtualCall","clang-analyzer-optin.mpi.MPI-Checker","clang-analyzer-optin.osx.*","clang-analyzer-optin.osx.cocoa.localizability.*","clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker","clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker","clang-analyzer-optin.osx.OSObjectCStyleCast","clang-analyzer-optin.performance.*","clang-analyzer-optin.performance.GCDAntipattern","clang-analyzer-optin.performance.Padding","clang-analyzer-optin.portability.UnixAPI","clang-analyzer-osx.*","clang-analyzer-osx.API","clang-analyzer-osx.cocoa.*","clang-analyzer-osx.cocoa.AtSync","clang-analyzer-osx.cocoa.AutoreleaseWrite","clang-analyzer-osx.cocoa.ClassRelease","clang-analyzer-osx.cocoa.Dealloc","clang-analyzer-osx.cocoa.IncompatibleMethodTypes","clang-analyzer-osx.cocoa.Loops","clang-analyzer-osx.cocoa.MissingSuperCall","clang-analyzer-osx.cocoa.NilArg","clang-analyzer-osx.cocoa.NonNilReturnValue","clang-analyzer-osx.cocoa.NSAutoreleasePool","clang-analyzer-osx.cocoa.NSError","clang-analyzer-osx.cocoa.ObjCGenerics","clang-analyzer-osx.cocoa.RetainCount","clang-analyzer-osx.cocoa.RetainCountBase","clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak","clang-analyzer-osx.cocoa.SelfInit","clang-analyzer-osx.cocoa.SuperDealloc","clang-analyzer-osx.cocoa.UnusedIvars","clang-analyzer-osx.cocoa.VariadicMethodTypes","clang-analyzer-osx.coreFoundation.*","clang-analyzer-osx.coreFoundation.CFError","clang-analyzer-osx.coreFoundation.CFNumber","clang-analyzer-osx.coreFoundation.CFRetainRelease","clang-analyzer-osx.coreFoundation.containers.*","clang-analyzer-osx.coreFoundation.containers.OutOfBounds","clang-analyzer-osx.coreFoundation.containers.PointerSizedValues","clang-analyzer-osx.MIG","clang-analyzer-osx.NumberObjectConversion","clang-analyzer-osx.ObjCProperty","clang-analyzer-osx.OSObjectRetainCount","clang-analyzer-osx.SecKeychainAPI","clang-analyzer-security.*","clang-analyzer-security.FloatLoopCounter","clang-analyzer-security.insecureAPI.*","clang-analyzer-security.insecureAPI.bcmp","clang-analyzer-security.insecureAPI.bcopy","clang-analyzer-security.insecureAPI.bzero","clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling","clang-analyzer-security.insecureAPI.getpw","clang-analyzer-security.insecureAPI.gets","clang-analyzer-security.insecureAPI.mkstemp","clang-analyzer-security.insecureAPI.mktemp","clang-analyzer-security.insecureAPI.rand","clang-analyzer-security.insecureAPI.strcpy","clang-analyzer-security.insecureAPI.UncheckedReturn","clang-analyzer-security.insecureAPI.vfork","clang-analyzer-unix.*","clang-analyzer-unix.API","clang-analyzer-unix.cstring.*","clang-analyzer-unix.cstring.BadSizeArg","clang-analyzer-unix.cstring.NullArg","clang-analyzer-unix.Malloc","clang-analyzer-unix.MallocSizeof","clang-analyzer-unix.MismatchedDeallocator","clang-analyzer-unix.Vfork","clang-analyzer-valist.*","clang-analyzer-valist.CopyToSelf","clang-analyzer-valist.Uninitialized","clang-analyzer-valist.Unterminated","concurrency-*","concurrency-mt-unsafe","concurrency-thread-canceltype-asynchronous","cppcoreguidelines-*","cppcoreguidelines-avoid-*","cppcoreguidelines-avoid-c-arrays","cppcoreguidelines-avoid-const-or-ref-data-members","cppcoreguidelines-avoid-do-while","cppcoreguidelines-avoid-goto","cppcoreguidelines-avoid-magic-numbers","cppcoreguidelines-avoid-non-const-global-variables","cppcoreguidelines-avoid-reference-coroutine-parameters","cppcoreguidelines-c-copy-assignment-signature","cppcoreguidelines-explicit-virtual-functions","cppcoreguidelines-init-variables","cppcoreguidelines-interfaces-global-init","cppcoreguidelines-macro-to-enum","cppcoreguidelines-macro-usage","cppcoreguidelines-narrowing-conversions","cppcoreguidelines-no-malloc","cppcoreguidelines-non-private-member-variables-in-classes","cppcoreguidelines-owning-memory","cppcoreguidelines-prefer-member-initializer","cppcoreguidelines-pro-bounds-*","cppcoreguidelines-pro-bounds-array-to-pointer-decay","cppcoreguidelines-pro-bounds-constant-array-index","cppcoreguidelines-pro-bounds-pointer-arithmetic","cppcoreguidelines-pro-type-*","cppcoreguidelines-pro-type-const-cast","cppcoreguidelines-pro-type-cstyle-cast","cppcoreguidelines-pro-type-member-init","cppcoreguidelines-pro-type-reinterpret-cast","cppcoreguidelines-pro-type-static-cast-downcast","cppcoreguidelines-pro-type-union-access","cppcoreguidelines-pro-type-vararg","cppcoreguidelines-slicing","cppcoreguidelines-special-member-functions","cppcoreguidelines-virtual-class-destructor","darwin-*","darwin-avoid-spinlock","darwin-dispatch-once-nonstatic","fuchsia-*","fuchsia-default-*","fuchsia-default-arguments-calls","fuchsia-default-arguments-declarations","fuchsia-header-anon-namespaces","fuchsia-multiple-inheritance","fuchsia-overloaded-operator","fuchsia-statically-constructed-objects","fuchsia-trailing-return","fuchsia-virtual-inheritance","google-*","google-build-*","google-build-explicit-make-pair","google-build-namespaces","google-build-using-namespace","google-default-arguments","google-explicit-constructor","google-global-names-in-headers","google-objc-*","google-objc-avoid-*","google-objc-avoid-nsobject-new","google-objc-avoid-throwing-exception","google-objc-function-naming","google-objc-global-variable-declaration","google-readability-*","google-readability-avoid-underscore-in-googletest-name","google-readability-braces-around-statements","google-readability-casting","google-readability-function-size","google-readability-namespace-comments","google-readability-todo","google-runtime-*","google-runtime-int","google-runtime-operator","google-upgrade-googletest-case","hicpp-*","hicpp-avoid-*","hicpp-avoid-c-arrays","hicpp-avoid-goto","hicpp-braces-around-statements","hicpp-deprecated-headers","hicpp-exception-baseclass","hicpp-explicit-conversions","hicpp-function-size","hicpp-invalid-access-moved","hicpp-member-init","hicpp-move-const-arg","hicpp-multiway-paths-covered","hicpp-named-parameter","hicpp-new-delete-operators","hicpp-no-*","hicpp-no-array-decay","hicpp-no-assembler","hicpp-no-malloc","hicpp-noexcept-move","hicpp-signed-bitwise","hicpp-special-member-functions","hicpp-static-assert","hicpp-undelegated-constructor","hicpp-uppercase-literal-suffix","hicpp-use-*","hicpp-use-auto","hicpp-use-emplace","hicpp-use-equals-*","hicpp-use-equals-default","hicpp-use-equals-delete","hicpp-use-noexcept","hicpp-use-nullptr","hicpp-use-override","hicpp-vararg","linuxkernel-must-use-errs","llvm-*","llvm-else-after-return","llvm-header-guard","llvm-include-order","llvm-namespace-comment","llvm-prefer-*","llvm-prefer-isa-or-dyn-cast-in-conditionals","llvm-prefer-register-over-unsigned","llvm-qualified-auto","llvm-twine-local","llvmlibc-*","llvmlibc-callee-namespace","llvmlibc-implementation-in-namespace","llvmlibc-restrict-system-libc-headers","misc-*","misc-confusable-identifiers","misc-const-correctness","misc-definitions-in-headers","misc-misleading-*","misc-misleading-bidirectional","misc-misleading-identifier","misc-misplaced-const","misc-new-delete-overloads","misc-no-recursion","misc-non-*","misc-non-copyable-objects","misc-non-private-member-variables-in-classes","misc-redundant-expression","misc-static-assert","misc-throw-by-value-catch-by-reference","misc-unconventional-assign-operator","misc-uniqueptr-reset-release","misc-unused-*","misc-unused-alias-decls","misc-unused-parameters","misc-unused-using-decls","misc-use-anonymous-namespace","modernize-*","modernize-avoid-*","modernize-avoid-bind","modernize-avoid-c-arrays","modernize-concat-nested-namespaces","modernize-deprecated-*","modernize-deprecated-headers","modernize-deprecated-ios-base-aliases","modernize-loop-convert","modernize-macro-to-enum","modernize-make-*","modernize-make-shared","modernize-make-unique","modernize-pass-by-value","modernize-raw-string-literal","modernize-redundant-void-arg","modernize-replace-*","modernize-replace-auto-ptr","modernize-replace-disallow-copy-and-assign-macro","modernize-replace-random-shuffle","modernize-return-braced-init-list","modernize-shrink-to-fit","modernize-unary-static-assert","modernize-use-*","modernize-use-auto","modernize-use-bool-literals","modernize-use-default","modernize-use-default-member-init","modernize-use-emplace","modernize-use-equals-*","modernize-use-equals-default","modernize-use-equals-delete","modernize-use-nodiscard","modernize-use-noexcept","modernize-use-nullptr","modernize-use-override","modernize-use-trailing-return-type","modernize-use-transparent-functors","modernize-use-uncaught-exceptions","modernize-use-using","mpi-*","mpi-buffer-deref","mpi-type-mismatch","objc-*","objc-assert-equals","objc-avoid-nserror-init","objc-dealloc-in-category","objc-forbidden-subclassing","objc-missing-hash","objc-nsdate-formatter","objc-nsinvocation-argument-lifetime","objc-property-declaration","objc-super-self","openmp-*","openmp-exception-escape","openmp-use-default-none","performance-*","performance-faster-string-find","performance-for-range-copy","performance-implicit-conversion-in-loop","performance-inefficient-*","performance-inefficient-algorithm","performance-inefficient-string-concatenation","performance-inefficient-vector-operation","performance-move-*","performance-move-const-arg","performance-move-constructor-init","performance-no-*","performance-no-automatic-move","performance-no-int-to-ptr","performance-noexcept-move-constructor","performance-trivially-destructible","performance-type-promotion-in-math-fn","performance-unnecessary-*","performance-unnecessary-copy-initialization","performance-unnecessary-value-param","portability-*","portability-restrict-system-includes","portability-simd-intrinsics","portability-std-allocator-const","readability-*","readability-avoid-const-params-in-decls","readability-braces-around-statements","readability-const-return-type","readability-container-*","readability-container-contains","readability-container-data-pointer","readability-container-size-empty","readability-convert-member-functions-to-static","readability-delete-null-pointer","readability-duplicate-include","readability-else-after-return","readability-function-*","readability-function-cognitive-complexity","readability-function-size","readability-identifier-*","readability-identifier-length","readability-identifier-naming","readability-implicit-bool-conversion","readability-inconsistent-declaration-parameter-name","readability-isolate-declaration","readability-magic-numbers","readability-make-member-function-const","readability-misleading-indentation","readability-misplaced-array-index","readability-named-parameter","readability-non-const-parameter","readability-qualified-auto","readability-redundant-*","readability-redundant-access-specifiers","readability-redundant-control-flow","readability-redundant-declaration","readability-redundant-function-ptr-dereference","readability-redundant-member-init","readability-redundant-preprocessor","readability-redundant-smartptr-get","readability-redundant-string-*","readability-redundant-string-cstr","readability-redundant-string-init","readability-simplify-*","readability-simplify-boolean-expr","readability-simplify-subscript-expr","readability-static-*","readability-static-accessed-through-instance","readability-static-definition-in-anonymous-namespace","readability-string-compare","readability-suspicious-call-argument","readability-uniqueptr-delete-release","readability-uppercase-literal-suffix","readability-use-anyofallof","zircon-temporary-objects"]},"uniqueItems":true,"markdownDescription":"已禁用的 `clang-tidy` 检查列表。该值将追加到 `.clang-tidy` 文件中的 `Checks` 或 `#C_Cpp.codeAnalysis.clangTidy.config#` (如果有)。","scope":"resource"}}},{"title":"调试","properties":{"C_Cpp.debugger.useBacktickCommandSubstitution":{"type":"boolean","default":false,"markdownDescription":"如果为 `true`，则调试程序 shell 命令替换将使用过时的反引号 ``(`)``。","scope":"window"},"C_Cpp.sshTargetsView":{"type":"string","enum":["enabled","disabled","default"],"default":"default","description":"控制 SSH 目标视图是否可见。默认情况下，在调用 SSH 命令时启用视图。","scope":"window"},"C_Cpp.debugShortcut":{"type":"boolean","default":true,"description":"显示 C++ 文件编辑器标题栏中的“运行和调试”播放按钮和“添加调试配置”齿轮。","scope":"resource"}}},{"title":"资源管理","properties":{"C_Cpp.references.maxConcurrentThreads":{"type":["integer","null"],"markdownDescription":"用于“查找所有引用”和“重命名”的最大并发线程数。默认值 `null` (空)使用从 `#C_Cpp.maxConcurrentThreads#` 继承的值。","default":null,"minimum":1,"maximum":32,"scope":"machine"},"C_Cpp.references.maxCachedProcesses":{"type":["integer","null"],"markdownDescription":"“查找所有引用”和“重命名”的要保留在内存中的最大进程数。默认值 `0` 将禁用此功能。值为 `null` (空)则使用从 `#C_Cpp.maxCachedProcesses#` 继承的值。","default":0,"minimum":0,"maximum":32,"scope":"machine"},"C_Cpp.references.maxMemory":{"type":["integer","null"],"markdownDescription":"超过此内存使用量(以 MB 为单位)后，将缓存且并发运行更少的“查找所有引用”和“重命名”进程。默认值 `null` (空)使用从 `#C_Cpp.maxMemory#` 继承的值。","default":null,"minimum":256,"maximum":65536,"scope":"machine"},"C_Cpp.intelliSenseCachePath":{"type":"string","markdownDescription":"定义 IntelliSense 使用的缓存预编译标头的文件夹路径。默认缓存路径为 Windows 上的`%LocalAppData%/Microsoft/vscode-cpptools`， Linux 上的 `$XDG_CACHE_HOME/vscode-cpptools/` (如果未定义 `XDG_CACHE_HOME`，则为`$HOME/.cache/vscode-cpptools/`) 和 macOS 上的 `$HOME/Library/Caches/vscode-cpptools/`。如果未指定路径或指定的路径无效，则将使用默认路径。","scope":"machine-overridable"},"C_Cpp.intelliSenseCacheSize":{"type":"number","default":5120,"markdownDescription":"缓存预编译标头的每个工作区硬盘空间的最大大小(以兆字节(MB)为单位)；实际使用量可能围绕此值波动。默认大小为 `5120` MB。当大小为 `0` 时，将禁用预编译标头缓存。","scope":"machine-overridable","minimum":0},"C_Cpp.intelliSenseMemoryLimit":{"type":"number","default":4096,"markdownDescription":"IntelliSense 流程的内存使用限制，以兆字节 (MB)为单位。默认为 `4096`，最大为 `16384`。当扩展超出限制时，其将关闭并重启 IntelliSense 流程。","scope":"machine-overridable","minimum":256,"maximum":16384},"C_Cpp.maxConcurrentThreads":{"type":["integer","null"],"markdownDescription":"用于语言服务处理的最大并发线程数。该值是一个提示，且不能始终使用。默认值 `null` (空)使用可用的逻辑处理器数。","default":null,"minimum":1,"maximum":32,"scope":"machine"},"C_Cpp.maxCachedProcesses":{"type":["integer","null"],"markdownDescription":"用于语言服务处理的最大缓存进程数。默认值 `null` (空)使用可用逻辑处理器数的两倍。","default":null,"minimum":0,"maximum":256,"scope":"machine"},"C_Cpp.maxMemory":{"type":["integer","null"],"markdownDescription":"可用于语言服务处理的最大内存(以 MB 为单位)。超过此内存使用量后，将缓存且并发运行较少的进程。默认值 `null` (空)使用系统的空闲内存。","default":null,"minimum":256,"maximum":65536,"scope":"machine"},"C_Cpp.intelliSense.maxCachedProcesses":{"type":["integer","null"],"markdownDescription":"要继续运行的最大 IntelliSense 进程数。默认值 `null` (空)使用从 `#C_Cpp.maxCachedProcesses#` 继承的值。","default":null,"minimum":2,"maximum":128,"scope":"machine"},"C_Cpp.intelliSense.maxMemory":{"type":["integer","null"],"markdownDescription":"超过此内存使用量(以 MB 为单位)后，在创建新进程之前，旧的 IntelliSense 进程将关闭。默认值 `null` (空)使用从 `#C_Cpp.maxMemory#` 继承的值。","default":null,"minimum":256,"maximum":65536,"scope":"machine"}}},{"title":"杂项","properties":{"C_Cpp.vcpkg.enabled":{"type":"boolean","default":true,"markdownDescription":"为 [vcpkg 依存关系管理器](https://aka.ms/vcpkg/) 启用集成服务。","scope":"resource"},"C_Cpp.loggingLevel":{"type":"string","enum":["None","Error","Warning","Information","Debug"],"default":"Error","markdownDescription":"输出面板中日志记录的详细程度。从最不详细到最详细的级别顺序为: `None` < `Error` < `Warning` < `Information` < `Debug`。","scope":"window"},"C_Cpp.autoAddFileAssociations":{"type":"boolean","default":true,"markdownDescription":"控制当文件为 C/C++ 文件中导航操作的目标时，其是否自动添加到 `#files.associations#`。","scope":"window"},"C_Cpp.preferredPathSeparator":{"type":"string","enum":["Forward Slash","Backslash"],"default":"Forward Slash","markdownDescription":"用作 `#include` 自动完成结果的路径分隔符的字符。","scope":"machine-overridable"},"C_Cpp.updateChannel":{"type":"string","enum":["Default","Insiders"],"default":"Default","markdownDescription":"设置为 `Insiders` 以自动下载并安装扩展的最新预览体验版本，其中包含即将推出的功能和 bug 修复。","scope":"application","deprecationMessage":"此设置已弃用。预发行版扩展现在可通过市场获得。"},"C_Cpp.experimentalFeatures":{"type":"string","enum":["enabled","disabled"],"default":"disabled","description":"控制“实验性”功能是否可用。","scope":"window"},"C_Cpp.caseSensitiveFileSupport":{"type":"string","enum":["default","enabled"],"default":"default","markdownDescription":"如果设置为 `default`，则假定工作区的文件系统在 Windows 上不区分大小写，在 macOS 或 Linux 上区分大小写。如果设置为 `enabled`，则假定工作区的文件系统在 Windows 上区分大小写。","scope":"window"},"C_Cpp.addNodeAddonIncludePaths":{"type":"boolean","default":false,"markdownDescription":"当来自 `nan` 和 `node-addon-api` 的包含路径为依赖项时，请将其添加。","scope":"application"}}}],"commands":[{"command":"C_Cpp.ConfigurationSelect","title":{"value":"选择配置...","original":"Select a Configuration..."},"category":"C/C++"},{"command":"C_Cpp.ConfigurationProviderSelect","title":{"value":"更改配置提供程序...","original":"Change Configuration Provider..."},"category":"C/C++"},{"command":"C_Cpp.ConfigurationEditJSON","title":{"value":"编辑配置(JSON)","original":"Edit Configurations (JSON)"},"category":"C/C++"},{"command":"C_Cpp.ConfigurationEditUI","title":{"value":"编辑配置(UI)","original":"Edit Configurations (UI)"},"category":"C/C++"},{"command":"C_Cpp.SelectDefaultCompiler","title":{"value":"选择默认编译器...","original":"Select Default Compiler..."},"category":"C/C++"},{"command":"C_Cpp.SelectIntelliSenseConfiguration","title":{"value":"选择 IntelliSense 配置...","original":"Select IntelliSense Configuration..."},"category":"C/C++"},{"command":"C_Cpp.RescanCompilers","title":{"value":"重新扫描编译器","original":"Rescan for Compilers"},"category":"C/C++"},{"command":"C_Cpp.SwitchHeaderSource","title":{"value":"切换标头/源","original":"Switch Header/Source"},"category":"C/C++"},{"command":"C_Cpp.EnableErrorSquiggles","title":{"value":"启用错误波形曲线","original":"Enable Error Squiggles"},"category":"C/C++"},{"command":"C_Cpp.DisableErrorSquiggles","title":{"value":"禁用错误波形曲线","original":"Disable Error Squiggles"},"category":"C/C++"},{"command":"C_Cpp.ToggleIncludeFallback","title":{"value":"在包含错误上切换 IntelliSense 引擎回退","original":"Toggle IntelliSense Engine Fallback on Include Errors"},"category":"C/C++"},{"command":"C_Cpp.ToggleDimInactiveRegions","title":{"value":"切换非活动区域着色","original":"Toggle Inactive Region Colorization"},"category":"C/C++"},{"command":"C_Cpp.ResetDatabase","title":{"value":"重置 IntelliSense 数据库","original":"Reset IntelliSense Database"},"category":"C/C++"},{"command":"C_Cpp.TakeSurvey","title":{"value":"参加调查","original":"Take Survey"},"category":"C/C++"},{"command":"C_Cpp.RestartIntelliSenseForFile","title":{"value":"重启活动文件的 IntelliSense","original":"Restart IntelliSense for Active File"},"category":"C/C++"},{"command":"C_Cpp.LogDiagnostics","title":{"value":"日志诊断","original":"Log Diagnostics"},"category":"C/C++"},{"command":"C_Cpp.RescanWorkspace","title":{"value":"重新扫描工作区","original":"Rescan Workspace"},"category":"C/C++"},{"command":"C_Cpp.VcpkgClipboardInstallSuggested","title":{"value":"将 vcpkg 安装命令复制到剪贴板","original":"Copy vcpkg install command to clipboard"},"category":"C/C++"},{"command":"C_Cpp.VcpkgOnlineHelpSuggested","title":{"value":"访问 vcpkg 帮助页","original":"Visit the vcpkg help page"},"category":"C/C++"},{"command":"C_Cpp.GenerateEditorConfig","title":{"value":"从 VC 格式设置生成 EditorConfig 内容","original":"Generate EditorConfig contents from VC Format settings"},"category":"C/C++"},{"command":"C_Cpp.referencesViewGroupByType","category":"C/C++","title":{"value":"按引用类型分组","original":"Group by Reference Type"},"icon":{"light":"assets/ref-group-by-type-light.svg","dark":"assets/ref-group-by-type-dark.svg"}},{"command":"C_Cpp.referencesViewUngroupByType","category":"C/C++","title":{"value":"取消按引用类型分组","original":"Ungroup by Reference Type"},"icon":{"light":"assets/ref-ungroup-by-type-light.svg","dark":"assets/ref-ungroup-by-type-dark.svg"}},{"command":"C_Cpp.GoToNextDirectiveInGroup","title":{"value":"转到条件组中的下一个预处理器指令","original":"Go to next preprocessor directive in conditional group"},"category":"C/C++"},{"command":"C_Cpp.GoToPrevDirectiveInGroup","title":{"value":"转到条件组中的上一个预处理器指令","original":"Go to previous preprocessor directive in conditional group"},"category":"C/C++"},{"command":"C_Cpp.CreateDeclarationOrDefinition","title":{"value":"创建声明/定义","original":"Create Declaration / Definition"},"category":"C/C++"},{"command":"C_Cpp.RunCodeAnalysisOnActiveFile","title":{"value":"在活动文件上运行 Code Analysis","original":"Run Code Analysis on Active File"},"category":"C/C++"},{"command":"C_Cpp.RunCodeAnalysisOnOpenFiles","title":{"value":"在打开的文件上运行 Code Analysis","original":"Run Code Analysis on Open Files"},"category":"C/C++"},{"command":"C_Cpp.RunCodeAnalysisOnAllFiles","title":{"value":"在所有文件上运行 Code Analysis","original":"Run Code Analysis on All Files"},"category":"C/C++"},{"command":"C_Cpp.RemoveAllCodeAnalysisProblems","title":{"value":"清除所有代码分析问题","original":"Clear All Code Analysis Problems"},"category":"C/C++"},{"command":"C_Cpp.BuildAndDebugFile","title":{"value":"调试 C/C++ 文件","original":"Debug C/C++ File"},"category":"C/C++","icon":"$(debug-alt)"},{"command":"C_Cpp.BuildAndRunFile","title":{"value":"运行 C/C++ 文件","original":"Run C/C++ File"},"category":"C/C++","icon":"$(run)"},{"command":"C_Cpp.AddDebugConfiguration","title":{"value":"添加调试配置","original":"Add Debug Configuration"},"category":"C/C++","icon":"$(debug-configure)"},{"command":"C_Cpp.GenerateDoxygenComment","title":{"value":"生成 Doxygen 注释","original":"Generate Doxygen Comment"},"category":"C/C++"},{"command":"C_Cpp.addSshTarget","category":"C/C++","title":{"value":"添加 SSH 目标","original":"Add SSH target"},"icon":"$(plus)"},{"command":"C_Cpp.removeSshTarget","category":"C/C++","title":{"value":"移除 SSH 目标","original":"Remove SSH target"},"icon":"$(remove)"},{"command":"C_Cpp.setActiveSshTarget","category":"C/C++","title":{"value":"将此 SSH 目标设置为活动目标","original":"Set this SSH target as the active target"},"icon":"$(check)"},{"command":"C_Cpp.selectActiveSshTarget","category":"C/C++","title":{"value":"选择活动 SSH 目标","original":"Select an active SSH target"}},{"command":"C_Cpp.selectSshTarget","category":"C/C++","title":{"value":"选择 SSH 目标","original":"Select SSH target"}},{"command":"C_Cpp.activeSshTarget","category":"C/C++","title":{"value":"获取活动 SSH 目标","original":"Get the active SSH target"}},{"command":"C_Cpp.refreshCppSshTargetsView","category":"C/C++","title":{"value":"刷新","original":"Refresh"},"icon":"$(refresh)"},{"command":"C_Cpp.sshTerminal","category":"C/C++","title":{"value":"在新终端中连接到此 SSH 目标","original":"Connect to this SSH target in a new terminal"},"icon":"$(terminal)"}],"keybindings":[{"command":"C_Cpp.SwitchHeaderSource","key":"Alt+O","when":"editorLangId == 'c' && editorTextFocus || editorLangId == 'cpp' && editorTextFocus || editorLangId == 'cuda-cpp' && editorTextFocus"}],"debuggers":[{"type":"cppdbg","label":"C++ (GDB/LLDB)","languages":["ada","c","cpp","cuda-cpp","rust"],"_aiKeyComment":"Ignore 'Property aiKey is not allowed'. See https://github.com/microsoft/vscode/issues/76493","aiKey":"0c6ae279ed8443289764825290e4f9e2-1a736e7c-1324-4338-be46-fc2a58ae4d14-7255","variables":{"pickProcess":"extension.pickNativeProcess","pickRemoteProcess":"extension.pickRemoteNativeProcess"},"configurationAttributes":{"launch":{"type":"object","required":["program"],"properties":{"program":{"type":"string","description":"程序可执行文件的完整路径。","default":"${workspaceRoot}/a.out"},"args":{"type":"array","description":"传递给程序的命令行参数。","items":{"type":"string"},"default":[]},"type":{"type":"string","description":"引擎的类型。必须为 \"cppdbg\"。","default":"cppdbg"},"targetArchitecture":{"type":"string","description":"调试对象的体系结构。如果未设置此参数，将进行自动检测。允许的值有 x86、arm、arm64、mips、x64、amd64、x86_64。","default":"x64"},"cwd":{"type":"string","description":"目标的工作目录。","default":"."},"setupCommands":{"type":"array","description":"为了安装基础调试程序而执行的一个或多个 GDB/LLDB 命令。示例: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }]。","items":{"type":"object","default":{},"properties":{"text":{"type":"string","description":"要执行的调试命令。","default":""},"description":{"type":"string","description":"此命令的可选说明。","default":""},"ignoreFailures":{"type":"boolean","description":"如果为 true，应忽略此命令的失败。默认值为 false。","default":false}}},"default":[]},"postRemoteConnectCommands":{"type":"array","description":"远程连接到调试服务器后执行的一个或多个命令。","items":{"type":"object","default":{},"properties":{"text":{"type":"string","description":"要执行的调试命令。","default":""},"description":{"type":"string","description":"此命令的可选说明。","default":""},"ignoreFailures":{"type":"boolean","description":"如果为 true，应忽略此命令的失败。默认值为 false。","default":false}}},"default":[]},"customLaunchSetupCommands":{"type":"array","description":"如果已提供，将使用其他命令替换用于启动目标的默认命令。例如，附加到目标进程的命令可以为 \"-target-attach\"。如果是空命令列表，将不会用任何内容替换启动命令。此功能可在向调试程序提供启动选项作为命令行选项时很有用。示例: \"customLaunchSetupCommands\": [ { \"text\": \"target-run\", \"description\": \"run target\", \"ignoreFailures\": false }]。","items":{"type":"object","default":{},"properties":{"text":{"type":"string","description":"要执行的调试命令。","default":""},"description":{"type":"string","description":"此命令的可选说明。","default":""},"ignoreFailures":{"type":"boolean","description":"如果为 true，应忽略此命令的失败。默认值为 false。","default":false}}},"default":[]},"launchCompleteCommand":{"enum":["exec-run","exec-continue","None"],"description":"调试程序完全安装后，为了使目标进程运行而执行的命令。允许的值为 \"exec-run\"、\"exec-continue\"、\"None\"。默认值为 \"exec-run\"。","default":"exec-run"},"visualizerFile":{"anyOf":[{"type":"string","default":""},{"type":"array","default":[],"items":{"type":"string"}}],"description":"调试此进程时要使用的 .natvis 文件。此选项与 GDB 整齐打印不兼容。如果使用此设置，请同时查看 \"showDisplayString\"。"},"svdPath":{"type":"string","description":"%c_cpp.debuggers.cppdbg.visualizerFile.description","default":""},"showDisplayString":{"type":"boolean","description":"指定了 visualizerFile 时，showDisplayString 将启用显示字符串。启用此选项可能会导致调试期间的性能下降。","default":true},"environment":{"type":"array","description":"要添加到程序环境的环境变量。示例: [ { \"name\": \"config\", \"value\": \"Debug\" } ]，而不是 [ { \"config\": \"Debug\" } ]。","items":{"type":"object","default":{},"properties":{"name":{"type":"string"},"value":{"type":"string"}}},"default":[]},"envFile":{"type":"string","description":"包含环境变量定义的文件的绝对路径。此文件的键值对由每行等于号分隔。例如 KEY=VALUE。","default":"${workspaceFolder}/.env"},"additionalSOLibSearchPath":{"type":"string","description":"要用于搜索 .so 文件的目录列表(以分号分隔)。示例: \"c:\\dir1;c:\\dir2\"。","default":""},"MIMode":{"type":"string","description":"指示 MIDebugEngine 要连接到的控制台调试程序。允许的值为 \"gdb\"、\"lldb\"。","default":"gdb"},"miDebuggerPath":{"type":"string","description":"MI 调试程序(如 gdb)的路径。如果未指定，将首先在路径中搜索调试程序。","default":"/usr/bin/gdb"},"miDebuggerArgs":{"type":"string","description":"MI 调试程序(如 gdb)的其他参数。","default":""},"miDebuggerServerAddress":{"type":"string","description":"要连接到的 MI 调试程序服务器的网络地址(示例: localhost:1234)。","default":"serveraddress:port"},"useExtendedRemote":{"type":"boolean","description":"使用目标扩展远程模式连接到 MI 调试器服务器。","default":false},"stopAtEntry":{"type":"boolean","description":"可选参数。如果为 true，则调试程序应在目标的入口点处停止。如果传递了 processId，则不起任何作用。","default":false},"debugServerPath":{"type":"string","description":"到要启动的调试服务器的可选完整路径。默认值为 null。该路径与 “miDebugServerAddress” 或带有运行 “-target-select remote <server:port>” 的 “customSetupCommand” 的自有服务器配合使用。","default":""},"debugServerArgs":{"type":"string","description":"可选调试服务器参数。默认为 null。","default":""},"serverStarted":{"type":"string","description":"要在调试服务器输出中查找的可选服务器启动模式。默认为 null。","default":""},"filterStdout":{"type":"boolean","description":"在 stdout 流中搜索服务器启动模式，并将 stdout 记录到默认输出。默认为 true。","default":true},"filterStderr":{"type":"boolean","description":"在 stderr 流中搜索服务器启动模式，并将 stderr 记录到调试输出。默认为 false。","default":false},"serverLaunchTimeout":{"type":"integer","description":"调试程序等待 debugServer 启动的可选时间(毫秒)。默认为 10000。","default":"10000"},"coreDumpPath":{"type":"string","description":"指定程序的核心转储文件的可选完整路径。默认为 null。","default":""},"externalConsole":{"type":"boolean","description":"如果为 true，则为调试对象启动控制台。如果为 false，它在 Linux 和 Windows 上会显示在集成控制台中。","default":false},"avoidWindowsConsoleRedirection":{"type":"boolean","description":"如果为 true，则禁用集成终端支持所需的调试对象控制台重定向。","default":false},"sourceFileMap":{"anyOf":[{"type":"object","description":"传递给调试引擎的可选源文件映射。示例: '{ \"/original/source/path\":\"/current/source/path\" }'。","default":{"<source-path>":"<target-path>"}},{"description":"相同源树的当前路径和编译时路径。EditorPath 下的文件会映射到 CompileTimePath 路径以进行断点匹配，并在显示 stacktrace 位置时，从 CompileTimePath 映射到 EditorPath。","type":"object","default":{"<source-path>":{"editorPath":"","useForBreakpoints":true}},"properties":{"<source-path>":{"type":"object","default":{"editorPath":"","useForBreakpoints":true},"properties":{"editorPath":{"type":"string","description":"编辑器将使用的源树的路径。","default":""},"useForBreakpoints":{"type":"boolean","description":"如果此条目仅用于堆栈帧位置映射，则为 False。如果在指定断点位置时也需要使用此条目，则为 True。","default":true}}}}}]},"logging":{"description":"用于确定应将哪些类型的消息记录到调试控制台的可选标志。","type":"object","default":{},"properties":{"exceptions":{"type":"boolean","description":"用于确定是否应将异常消息记录到调试控制台的可选标志。默认为 true。","default":true},"moduleLoad":{"type":"boolean","description":"用于确定是否应将模块加载事件记录到调试控制台的可选标志。默认为 true。","default":true},"programOutput":{"type":"boolean","description":"用于确定是否应将程序输出记录到调试控制台的可选标志。默认为 true。","default":true},"engineLogging":{"anyOf":[{"type":"string","enum":["verbose","warning","error","none"],"enumDescriptions":["开发期间用于交互式调查的日志。这些日志应主要包含可用于调试的信息，并且不具有长期价值。","突出显示应用程序流中的异常或意外事件，但不会导致应用程序执行停止的日志。","在当前执行流因失败而停止时突出显示的日志。这些应指示当前活动中的失败，而不是应用程序范围的失败。","不用于写入日志消息。指定事件日志类别不应写入任何消息。"],"description":"用于确定是否应将诊断调试引擎消息记录到调试控制台的可选标志。默认为 false。","default":"none"},{"type":"boolean","description":"用于确定是否应将诊断调试引擎消息记录到调试控制台的可选标志。默认为 false。","default":false}]},"trace":{"type":"boolean","description":"用于确定是否应将诊断适配器命令跟踪记录到调试控制台的可选标志。默认为 false。","default":false},"traceResponse":{"type":"boolean","description":"用于确定是否应将诊断适配器命令和响应跟踪记录到调试控制台的可选标志。默认为 false。","default":false},"natvisDiagnostics":{"anyOf":[{"type":"string","enum":["verbose","warning","error","none"],"enumDescriptions":["开发期间用于交互式调查的日志。这些日志应主要包含可用于调试的信息，并且不具有长期价值。","突出显示应用程序流中的异常或意外事件，但不会导致应用程序执行停止的日志。","在当前执行流因失败而停止时突出显示的日志。这些应指示当前活动中的失败，而不是应用程序范围的失败。","不用于写入日志消息。指定事件日志类别不应写入任何消息。"],"description":"可选标志，用于确定是否应将诊断 natvis 消息记录到调试控制台。默认为 None。","default":"none"},{"type":"boolean","description":"可选标志，用于确定是否应将诊断 natvis 消息记录到调试控制台。默认为 None。","default":false}]}}},"pipeTransport":{"description":"如果存在，这会指示调试程序使用其他可执行文件作为管道来连接到远程计算机，此管道将在 VS Code 和已启用 MI 的调试程序后端可执行文件(如 gdb)之间中继标准输入/输入。","type":"object","default":{"pipeCwd":"/usr/bin","pipeProgram":"输入管道程序名称的完全限定的路径，例如 '/usr/bin/ssh'。","pipeArgs":[],"debuggerPath":"目标计算机上调试程序的完整路径，例如 /usr/bin/gdb。"},"properties":{"pipeCwd":{"type":"string","description":"管道程序工作目录的完全限定的路径。","default":"/usr/bin"},"pipeProgram":{"type":"string","description":"要执行的完全限定的管道命令。","default":"输入管道程序名称的完全限定的路径，例如 '/usr/bin/ssh'。"},"pipeArgs":{"type":"array","description":"传递给管道程序配置连接的命令行参数。","items":{"type":"string"},"default":[]},"debuggerPath":{"type":"string","description":"目标计算机上调试程序的完整路径，例如 /usr/bin/gdb。","default":"目标计算机上调试程序的完整路径，例如 /usr/bin/gdb。"},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"传递给程序的环境变量。","default":{}},"quoteArgs":{"exceptions":{"type":"boolean","description":"如果 pipeProgram 的单个参数包含字符(如空格或制表符)，是否应引用它? 如果为 “false”，则将不再自动引用调试程序命令。默认值为 “true”。","default":true}}}},"symbolLoadInfo":{"description":"对符号加载的显式控制。","type":"object","default":{"loadAll":true,"exceptionList":""},"properties":{"loadAll":{"type":"boolean","description":"如果为 true，则将加载所有 lib 的符号；否则不加载任何 solib 符号。默认值为 true。","default":true},"exceptionList":{"type":"string","description":"用分号 ';' 分隔的文件名(允许通配符)列表。修改 LoadAll 的行为。如果 LoadAll 为 true，则不加载与该列表中的名称匹配的库的符号。否则，仅加载匹配的库的符号。示例: \"foo.so;bar.so\"。","default":""}}},"stopAtConnect":{"type":"boolean","description":"如果为 true，则调试器在连接到目标后应停止。如果为 false，则连接后，调试器将继续工作。默认值为 false。","default":false},"hardwareBreakpoints":{"description":"对远程目标的硬件断点行为的显式控制。","default":{},"type":"object","properties":{"require":{"type":"boolean","description":"如果为 true，请始终使用硬件断点。默认值为 false。","default":false},"limit":{"type":"integer","description":"要使用的可用硬件断点数量的可选限制。仅在“需要”为 true 且“限制”大于 0 时强制使用。默认值为 0。","default":0}}},"unknownBreakpointHandling":{"type":"string","enum":["throw","stop"],"default":"throw","description":"控制在命中时如何处理(通常通过原始 GDB 命令)外部设置的断点。\n允许的值为 \"throw\" (好像应用程序抛出了异常)和 \"stop\" (只会暂停调试会话)。默认值为 \"throw\"。"},"variables":{"type":"object","description":"此启动配置中递归替换的变量。每个变量都可以引用其他变量。","default":{"<variable-name>":"<variable-value>"},"properties":{},"additionalProperties":{"type":"string","description":"此启动配置中递归替换的变量。该值可以引用其他变量。","default":""}},"deploySteps":{"type":"array","description":"部署应用程序所需的步骤。顺序很重要。","items":{"anyOf":[{"type":"object","description":"使用 SCP 或 rsync 复制文件。","default":{},"required":["type","files","host","targetDir"],"properties":{"type":{"type":"string","description":"使用 SCP 或 rsync 复制文件。","default":"","enum":["scp","rsync"]},"files":{"anyOf":[{"type":"string"},{"type":"array","items":{"type":"string"}}],"description":"要复制的文件。支持路径模式。","default":""},"host":{"anyOf":[{"type":"string","description":"主机信息。","default":"hello@microsoft.com"},{"type":"object","description":"主机信息。","default":{},"required":["hostName"],"properties":{"user":{"type":"string","description":"登录到主机的用户。","default":""},"hostName":{"type":"string","description":"主机名。","default":""},"port":{"anyOf":[{"type":"number"},{"type":"string","pattern":"^\\d+$|^\\${.+}$"}],"description":"主机上的 SSH 端口。默认值为 22。","default":22},"jumpHosts":{"type":"array","description":"首先连接到跳转主机以连接到目标主机。","items":{"type":"object","default":{},"required":["hostName"],"properties":{"user":{"type":"string","description":"登录到主机的用户。","default":""},"hostName":{"type":"string","description":"主机名。","default":""},"port":{"anyOf":[{"type":"number"},{"type":"string","pattern":"^\\d+$|^\\${.+}$"}],"description":"主机上的 SSH 端口。默认值为 22。","default":22}}}},"localForwards":{"type":"array","description":"将本地(客户端)主机上给定 TCP 端口或 Unix 套接字的连接转发到远程端上的给定主机和端口或 Unix 套接字","items":{"type":"object","default":{},"properties":{"bindAddress":{"type":"string","description":"本地地址","default":""},"port":{"anyOf":[{"type":"number"},{"type":"string","pattern":"^\\d+$|^\\${.+}$"}],"description":"本地端口"},"host":{"type":"string","description":"主机名","default":""},"hostPort":{"anyOf":[{"type":"number"},{"type":"string","pattern":"^\\d+$|^\\${.+}$"}],"description":"主机端口"},"localSocket":{"type":"string","description":"本地套接字","default":""},"remoteSocket":{"type":"string","description":"远程套接字","default":""}}}}}}]},"targetDir":{"type":"string","description":"目标目录。","default":""},"recursive":{"type":"boolean","description":"如果为 true，则以递归方式复制文件夹。","default":"true"},"debug":{"type":"boolean","description":"如果为 true，则在不调试的情况下启动时跳过。如果为 false，则在开始调试时跳过。如果未定义，则从不跳过。"}},"allOf":[{"if":{"properties":{"type":{"const":"scp"}}},"then":{"properties":{"scpPath":{"type":"string","description":"SCP 的可选完整路径。假定 SCP 位于 PATH 上(如果未指定)","default":""}}}},{"if":{"properties":{"type":{"const":"rsync"}}},"then":{"properties":{"rsyncPath":{"type":"string","description":"rsync 的可选完整路径。假定 rsync 在 PATH 上(如果未指定)","default":""}}}}]},{"type":"object","description":"SSH 命令步骤。","default":{},"required":["type","host","command"],"properties":{"type":{"type":"string","description":"SSH 命令步骤。","default":"","enum":["ssh"]},"host":{"anyOf":[{"type":"string","description":"主机信息。","default":"hello@microsoft.com"},{"type":"object","description":"主机信息。","default":{},"required":["hostName"],"properties":{"user":{"type":"string","description":"登录到主机的用户。","default":""},"hostName":{"type":"string","description":"主机名。","default":""},"port":{"anyOf":[{"type":"number"},{"type":"string","pattern":"^\\d+$|^\\${.+}$"}],"description":"主机上的 SSH 端口。默认值为 22。","default":22},"jumpHosts":{"type":"array","description":"首先连接到跳转主机以连接到目标主机。","items":{"type":"object","default":{},"required":["hostName"],"properties":{"user":{"type":"string","description":"登录到主机的用户。","default":""},"hostName":{"type":"string","description":"主机名。","default":""},"port":{"anyOf":[{"type":"number"},{"type":"string","pattern":"^\\d+$|^\\${.+}$"}],"description":"主机上的 SSH 端口。默认值为 22。","default":22}}}},"localForwards":{"type":"array","description":"将本地(客户端)主机上给定 TCP 端口或 Unix 套接字的连接转发到远程端上的给定主机和端口或 Unix 套接字","items":{"type":"object","default":{},"properties":{"bindAddress":{"type":"string","description":"本地地址","default":""},"port":{"anyOf":[{"type":"number"},{"type":"string","pattern":"^\\d+$|^\\${.+}$"}],"description":"本地端口"},"host":{"type":"string","description":"主机名","default":""},"hostPort":{"anyOf":[{"type":"number"},{"type":"string","pattern":"^\\d+$|^\\${.+}$"}],"description":"主机端口"},"localSocket":{"type":"string","description":"本地套接字","default":""},"remoteSocket":{"type":"string","description":"远程套接字","default":""}}}}}}]},"command":{"type":"string","description":"要通过 SSH 执行的命令。SSH 命令中 \"-c\" 后面的命令。","default":""},"sshPath":{"type":"string","description":"SSH 的可选完整路径。假定 SSH 位于 PATH 上(如果未指定)","default":""},"continueOn":{"type":"string","description":"输出中的可选完成模式。在输出中看到此模式时，无论此步骤是否返回，都继续执行部署过程。","default":""},"debug":{"type":"boolean","description":"如果为 true，则在不调试的情况下启动时跳过。如果为 false，则在开始调试时跳过。如果未定义，则从不跳过。"}}},{"type":"object","description":"shell 命令步骤。","default":{},"required":["type","command"],"properties":{"type":{"type":"string","description":"shell 命令步骤。","default":"","enum":["shell"]},"command":{"type":"string","description":"要执行的 shell 命令。","default":""},"continueOn":{"type":"string","description":"输出中的可选完成模式。在输出中看到此模式时，无论此步骤是否返回，都继续执行部署过程。","default":""},"debug":{"type":"boolean","description":"如果为 true，则在不调试的情况下启动时跳过。如果为 false，则在开始调试时跳过。如果未定义，则从不跳过。"}}},{"type":"object","description":"要调用的 VS Code 命令。可以是 VS Code 或活动扩展中的命令。","default":{},"required":["type","command"],"properties":{"type":{"type":"string","description":"要调用的 VS Code 命令。可以是 VS Code 或活动扩展中的命令。","default":"","enum":["command"]},"command":{"type":"string","description":"要调用的 VS Code 命令。","default":""},"args":{"type":"array","description":"VS Code 命令的参数。","items":{"type":"string"}}}}]},"default":[]}}},"attach":{"type":"object","default":{},"required":["program"],"properties":{"program":{"type":"string","description":"程序可执行文件的完整路径。","default":"${workspaceRoot}/a.out"},"type":{"type":"string","description":"引擎的类型。必须为 \"cppdbg\"。","default":"cppdbg"},"targetArchitecture":{"type":"string","description":"调试对象的体系结构。如果未设置此参数，将进行自动检测。允许的值有 x86、arm、arm64、mips、x64、amd64、x86_64。","default":"x64"},"visualizerFile":{"type":"string","description":"调试此进程时要使用的 .natvis 文件。此选项与 GDB 整齐打印不兼容。如果使用此设置，请同时查看 \"showDisplayString\"。","default":""},"showDisplayString":{"type":"boolean","description":"指定了 visualizerFile 时，showDisplayString 将启用显示字符串。启用此选项可能会导致调试期间的性能下降。","default":true},"additionalSOLibSearchPath":{"type":"string","description":"要用于搜索 .so 文件的目录列表(以分号分隔)。示例: \"c:\\dir1;c:\\dir2\"。","default":""},"MIMode":{"type":"string","description":"指示 MIDebugEngine 要连接到的控制台调试程序。允许的值为 \"gdb\"、\"lldb\"。","default":"gdb"},"miDebuggerPath":{"type":"string","description":"MI 调试程序(如 gdb)的路径。如果未指定，将首先在路径中搜索调试程序。","default":"/usr/bin/gdb"},"miDebuggerArgs":{"type":"string","description":"MI 调试程序(如 gdb)的其他参数。","default":""},"miDebuggerServerAddress":{"type":"string","description":"要连接到的 MI 调试程序服务器的网络地址(示例: localhost:1234)。","default":"serveraddress:port"},"useExtendedRemote":{"type":"boolean","description":"使用目标扩展远程模式连接到 MI 调试器服务器。","default":false},"processId":{"anyOf":[{"type":"string","description":"要将调试程序附加到的可选进程 ID。使用 \"${command:pickProcess}\" 获取要附加到的本地运行进程的列表。请注意，一些平台需要管理员权限才能附加到进程。","default":"${command:pickProcess}"},{"type":"integer","description":"要将调试程序附加到的可选进程 ID。使用 \"${command:pickProcess}\" 获取要附加到的本地运行进程的列表。请注意，一些平台需要管理员权限才能附加到进程。","default":0}]},"filterStdout":{"type":"boolean","description":"在 stdout 流中搜索服务器启动模式，并将 stdout 记录到默认输出。默认为 true。","default":true},"filterStderr":{"type":"boolean","description":"在 stderr 流中搜索服务器启动模式，并将 stderr 记录到调试输出。默认为 false。","default":false},"sourceFileMap":{"anyOf":[{"type":"object","description":"传递给调试引擎的可选源文件映射。示例: '{ \"/original/source/path\":\"/current/source/path\" }'。","default":{"<source-path>":"<target-path>"}},{"description":"相同源树的当前路径和编译时路径。EditorPath 下的文件会映射到 CompileTimePath 路径以进行断点匹配，并在显示 stacktrace 位置时，从 CompileTimePath 映射到 EditorPath。","type":"object","default":{"<source-path>":{"editorPath":"","useForBreakpoints":true}},"properties":{"<source-path>":{"type":"object","default":{"editorPath":"","useForBreakpoints":true},"properties":{"editorPath":{"type":"string","description":"编辑器将使用的源树的路径。","default":""},"useForBreakpoints":{"type":"boolean","description":"如果此条目仅用于堆栈帧位置映射，则为 False。如果在指定断点位置时也需要使用此条目，则为 True。","default":true}}}}}]},"logging":{"description":"用于确定应将哪些类型的消息记录到调试控制台的可选标志。","type":"object","default":{},"properties":{"exceptions":{"type":"boolean","description":"用于确定是否应将异常消息记录到调试控制台的可选标志。默认为 true。","default":true},"moduleLoad":{"type":"boolean","description":"用于确定是否应将模块加载事件记录到调试控制台的可选标志。默认为 true。","default":true},"programOutput":{"type":"boolean","description":"用于确定是否应将程序输出记录到调试控制台的可选标志。默认为 true。","default":true},"engineLogging":{"anyOf":[{"type":"string","enum":["verbose","warning","error","none"],"enumDescriptions":["开发期间用于交互式调查的日志。这些日志应主要包含可用于调试的信息，并且不具有长期价值。","突出显示应用程序流中的异常或意外事件，但不会导致应用程序执行停止的日志。","在当前执行流因失败而停止时突出显示的日志。这些应指示当前活动中的失败，而不是应用程序范围的失败。","不用于写入日志消息。指定事件日志类别不应写入任何消息。"],"description":"用于确定是否应将诊断调试引擎消息记录到调试控制台的可选标志。默认为 false。","default":"none"},{"type":"boolean","description":"用于确定是否应将诊断调试引擎消息记录到调试控制台的可选标志。默认为 false。","default":false}]},"trace":{"type":"boolean","description":"用于确定是否应将诊断适配器命令跟踪记录到调试控制台的可选标志。默认为 false。","default":false},"traceResponse":{"type":"boolean","description":"用于确定是否应将诊断适配器命令和响应跟踪记录到调试控制台的可选标志。默认为 false。","default":false},"natvisDiagnostics":{"anyOf":[{"type":"string","enum":["verbose","warning","error","none"],"enumDescriptions":["开发期间用于交互式调查的日志。这些日志应主要包含可用于调试的信息，并且不具有长期价值。","突出显示应用程序流中的异常或意外事件，但不会导致应用程序执行停止的日志。","在当前执行流因失败而停止时突出显示的日志。这些应指示当前活动中的失败，而不是应用程序范围的失败。","不用于写入日志消息。指定事件日志类别不应写入任何消息。"],"description":"可选标志，用于确定是否应将诊断 natvis 消息记录到调试控制台。默认为 None。","default":"none"},{"type":"boolean","description":"可选标志，用于确定是否应将诊断 natvis 消息记录到调试控制台。默认为 None。","default":false}]}}},"pipeTransport":{"description":"如果存在，这会指示调试程序使用其他可执行文件作为管道来连接到远程计算机，此管道将在 VS Code 和已启用 MI 的调试程序后端可执行文件(如 gdb)之间中继标准输入/输入。","type":"object","default":{"pipeCwd":"/usr/bin","pipeProgram":"输入管道程序名称的完全限定的路径，例如 '/usr/bin/ssh'。","pipeArgs":[],"debuggerPath":"目标计算机上调试程序的完整路径，例如 /usr/bin/gdb。"},"properties":{"pipeCwd":{"type":"string","description":"管道程序工作目录的完全限定的路径。","default":"/usr/bin"},"pipeProgram":{"type":"string","description":"要执行的完全限定的管道命令。","default":"输入管道程序名称的完全限定的路径，例如 '/usr/bin/ssh'。"},"pipeArgs":{"type":"array","description":"传递给管道程序配置连接的命令行参数。","items":{"type":"string"},"default":[]},"debuggerPath":{"type":"string","description":"目标计算机上调试程序的完整路径，例如 /usr/bin/gdb。","default":"目标计算机上调试程序的完整路径，例如 /usr/bin/gdb。"},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"传递给程序的环境变量。","default":{}},"quoteArgs":{"exceptions":{"type":"boolean","description":"如果 pipeProgram 的单个参数包含字符(如空格或制表符)，是否应引用它? 如果为 “false”，则将不再自动引用调试程序命令。默认值为 “true”。","default":true}}}},"setupCommands":{"type":"array","description":"为了安装基础调试程序而执行的一个或多个 GDB/LLDB 命令。示例: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }]。","items":{"type":"object","default":{},"properties":{"text":{"type":"string","description":"要执行的调试命令。","default":""},"description":{"type":"string","description":"此命令的可选说明。","default":""},"ignoreFailures":{"type":"boolean","description":"如果为 true，应忽略此命令的失败。默认值为 false。","default":false}}},"default":[]},"symbolLoadInfo":{"description":"对符号加载的显式控制。","type":"object","default":{"loadAll":true,"exceptionList":""},"properties":{"loadAll":{"type":"boolean","description":"如果为 true，则将加载所有 lib 的符号；否则不加载任何 solib 符号。默认值为 true。","default":true},"exceptionList":{"type":"string","description":"用分号 ';' 分隔的文件名(允许通配符)列表。修改 LoadAll 的行为。如果 LoadAll 为 true，则不加载与该列表中的名称匹配的库的符号。否则，仅加载匹配的库的符号。示例: \"foo.so;bar.so\"。","default":""}}},"variables":{"type":"object","description":"此启动配置中递归替换的变量。每个变量都可以引用其他变量。","default":{"<variable-name>":"<variable-value>"},"properties":{},"additionalProperties":{"type":"string","description":"此启动配置中递归替换的变量。该值可以引用其他变量。","default":""}},"deploySteps":{"type":"array","description":"部署应用程序所需的步骤。顺序很重要。","items":{"anyOf":[{"type":"object","description":"使用 SCP 或 rsync 复制文件。","default":{},"required":["type","files","host","targetDir"],"properties":{"type":{"type":"string","description":"使用 SCP 或 rsync 复制文件。","default":"","enum":["scp","rsync"]},"files":{"anyOf":[{"type":"string"},{"type":"array","items":{"type":"string"}}],"description":"要复制的文件。支持路径模式。","default":""},"host":{"anyOf":[{"type":"string","description":"主机信息。","default":"hello@microsoft.com"},{"type":"object","description":"主机信息。","default":{},"required":["hostName"],"properties":{"user":{"type":"string","description":"登录到主机的用户。","default":""},"hostName":{"type":"string","description":"主机名。","default":""},"port":{"anyOf":[{"type":"number"},{"type":"string","pattern":"^\\d+$|^\\${.+}$"}],"description":"主机上的 SSH 端口。默认值为 22。","default":22},"jumpHosts":{"type":"array","description":"首先连接到跳转主机以连接到目标主机。","items":{"type":"object","default":{},"required":["hostName"],"properties":{"user":{"type":"string","description":"登录到主机的用户。","default":""},"hostName":{"type":"string","description":"主机名。","default":""},"port":{"anyOf":[{"type":"number"},{"type":"string","pattern":"^\\d+$|^\\${.+}$"}],"description":"主机上的 SSH 端口。默认值为 22。","default":22}}}},"localForwards":{"type":"array","description":"将本地(客户端)主机上给定 TCP 端口或 Unix 套接字的连接转发到远程端上的给定主机和端口或 Unix 套接字","items":{"type":"object","default":{},"properties":{"bindAddress":{"type":"string","description":"本地地址","default":""},"port":{"anyOf":[{"type":"number"},{"type":"string","pattern":"^\\d+$|^\\${.+}$"}],"description":"本地端口"},"host":{"type":"string","description":"主机名","default":""},"hostPort":{"anyOf":[{"type":"number"},{"type":"string","pattern":"^\\d+$|^\\${.+}$"}],"description":"主机端口"},"localSocket":{"type":"string","description":"本地套接字","default":""},"remoteSocket":{"type":"string","description":"远程套接字","default":""}}}}}}]},"targetDir":{"type":"string","description":"目标目录。","default":""},"recursive":{"type":"boolean","description":"如果为 true，则以递归方式复制文件夹。","default":"true"},"debug":{"type":"boolean","description":"如果为 true，则在不调试的情况下启动时跳过。如果为 false，则在开始调试时跳过。如果未定义，则从不跳过。"}},"allOf":[{"if":{"properties":{"type":{"const":"scp"}}},"then":{"properties":{"scpPath":{"type":"string","description":"SCP 的可选完整路径。假定 SCP 位于 PATH 上(如果未指定)","default":""}}}},{"if":{"properties":{"type":{"const":"rsync"}}},"then":{"properties":{"rsyncPath":{"type":"string","description":"rsync 的可选完整路径。假定 rsync 在 PATH 上(如果未指定)","default":""}}}}]},{"type":"object","description":"SSH 命令步骤。","default":{},"required":["type","host","command"],"properties":{"type":{"type":"string","description":"SSH 命令步骤。","default":"","enum":["ssh"]},"host":{"anyOf":[{"type":"string","description":"主机信息。","default":"hello@microsoft.com"},{"type":"object","description":"主机信息。","default":{},"required":["hostName"],"properties":{"user":{"type":"string","description":"登录到主机的用户。","default":""},"hostName":{"type":"string","description":"主机名。","default":""},"port":{"anyOf":[{"type":"number"},{"type":"string","pattern":"^\\d+$|^\\${.+}$"}],"description":"主机上的 SSH 端口。默认值为 22。","default":22},"jumpHosts":{"type":"array","description":"首先连接到跳转主机以连接到目标主机。","items":{"type":"object","default":{},"required":["hostName"],"properties":{"user":{"type":"string","description":"登录到主机的用户。","default":""},"hostName":{"type":"string","description":"主机名。","default":""},"port":{"anyOf":[{"type":"number"},{"type":"string","pattern":"^\\d+$|^\\${.+}$"}],"description":"主机上的 SSH 端口。默认值为 22。","default":22}}}},"localForwards":{"type":"array","description":"将本地(客户端)主机上给定 TCP 端口或 Unix 套接字的连接转发到远程端上的给定主机和端口或 Unix 套接字","items":{"type":"object","default":{},"properties":{"bindAddress":{"type":"string","description":"本地地址","default":""},"port":{"anyOf":[{"type":"number"},{"type":"string","pattern":"^\\d+$|^\\${.+}$"}],"description":"本地端口"},"host":{"type":"string","description":"主机名","default":""},"hostPort":{"anyOf":[{"type":"number"},{"type":"string","pattern":"^\\d+$|^\\${.+}$"}],"description":"主机端口"},"localSocket":{"type":"string","description":"本地套接字","default":""},"remoteSocket":{"type":"string","description":"远程套接字","default":""}}}}}}]},"command":{"type":"string","description":"要通过 SSH 执行的命令。SSH 命令中 \"-c\" 后面的命令。","default":""},"sshPath":{"type":"string","description":"SSH 的可选完整路径。假定 SSH 位于 PATH 上(如果未指定)","default":""},"continueOn":{"type":"string","description":"输出中的可选完成模式。在输出中看到此模式时，无论此步骤是否返回，都继续执行部署过程。","default":""},"debug":{"type":"boolean","description":"如果为 true，则在不调试的情况下启动时跳过。如果为 false，则在开始调试时跳过。如果未定义，则从不跳过。"}}},{"type":"object","description":"shell 命令步骤。","default":{},"required":["type","command"],"properties":{"type":{"type":"string","description":"shell 命令步骤。","default":"","enum":["shell"]},"command":{"type":"string","description":"要执行的 shell 命令。","default":""},"continueOn":{"type":"string","description":"输出中的可选完成模式。在输出中看到此模式时，无论此步骤是否返回，都继续执行部署过程。","default":""},"debug":{"type":"boolean","description":"如果为 true，则在不调试的情况下启动时跳过。如果为 false，则在开始调试时跳过。如果未定义，则从不跳过。"}}},{"type":"object","description":"要调用的 VS Code 命令。可以是 VS Code 或活动扩展中的命令。","default":{},"required":["type","command"],"properties":{"type":{"type":"string","description":"要调用的 VS Code 命令。可以是 VS Code 或活动扩展中的命令。","default":"","enum":["command"]},"command":{"type":"string","description":"要调用的 VS Code 命令。","default":""},"args":{"type":"array","description":"VS Code 命令的参数。","items":{"type":"string"}}}}]},"default":[]}}}}},{"type":"cppvsdbg","label":"C++ (Windows)","when":"workspacePlatform == windows","languages":["ada","c","cpp","cuda-cpp","rust"],"_aiKeyComment":"Ignore 'Property aiKey is not allowed'. See https://github.com/microsoft/vscode/issues/76493","aiKey":"0c6ae279ed8443289764825290e4f9e2-1a736e7c-1324-4338-be46-fc2a58ae4d14-7255","variables":{"pickProcess":"extension.pickNativeProcess"},"configurationAttributes":{"launch":{"type":"object","required":["program","cwd"],"properties":{"program":{"type":"string","description":"程序可执行文件的完整路径。","default":"${workspaceRoot}/program.exe"},"args":{"type":"array","description":"传递给程序的命令行参数。","items":{"type":"string"},"default":[]},"type":{"type":"string","description":"引擎的类型。必须为 \"cppvsdbg\"。","default":"cppvsdbg"},"cwd":{"type":"string","description":"目标的工作目录。","default":"${workspaceRoot}"},"environment":{"type":"array","description":"要添加到程序环境的环境变量。示例: [ { \"name\": \"config\", \"value\": \"Debug\" } ]，而不是 [ { \"config\": \"Debug\" } ]。","items":{"type":"object","default":{},"properties":{"name":{"type":"string"},"value":{"type":"string"}}},"default":[]},"envFile":{"type":"string","description":"包含环境变量定义的文件的绝对路径。此文件的键值对由每行等于号分隔。例如 KEY=VALUE。","default":"${workspaceFolder}/.env"},"symbolSearchPath":{"type":"string","description":"用于搜索符号(即 pdb)文件的目录列表(以分号分隔)。示例: \"c:\\dir1;c:\\dir2\"。","default":""},"stopAtEntry":{"type":"boolean","description":"可选参数。如果为 true，则调试程序应在目标的入口点处停止。如果传递了 processId，则不起任何作用。","default":false},"dumpPath":{"type":"string","description":"指定程序的转储文件的可选完整路径。例如: \"c:\\temp\\app.dmp\"。默认为 null。","default":""},"visualizerFile":{"type":"string","description":"调试此进程时要使用的 .natvis 文件。","default":""},"externalConsole":{"type":"boolean","description":"[已通过“控制台”弃用]如果为 true，将为调试对象启动控制台。如果为 false，将不启动任何控制台。","default":false},"console":{"type":"string","enum":["internalConsole","integratedTerminal","externalTerminal","newExternalWindow"],"enumDescriptions":["输出到 VS Code 调试控制台。这不支持读取控制台输入(例如:'std::cin' 或 'scanf')。","VS Code 的集成终端。","控制台应用程序将在外部终端窗口中启动。该窗口将在重新启动方案中重复使用，并且在应用程序退出时不会自动消失。","控制台应用程序将在自身的外部控制台窗口中启动，该窗口将在应用程序停止时结束。非控制台应用程序将在没有终端的情况下运行，并且 stdout/stderr 将被忽略。"],"description":"启动调试目标的位置。如果未定义，则默认为 \"internalConsole\"。","default":"internalConsole"},"sourceFileMap":{"type":"object","description":"传递给调试引擎的可选源文件映射。示例: '{ \"/original/source/path\":\"/current/source/path\" }'。","default":{"<source-path>":"<target-path>"}},"enableDebugHeap":{"type":"boolean","description":"如果为 false，将在禁用调试堆的情况下启动该进程。这会将环境变量 \"_NO_DEBUG_HEAP\" 设置为 \"1\"。","default":false},"logging":{"type":"object","description":"用于确定应将哪些类型的消息记录到调试控制台的可选标志。","default":{},"properties":{"exceptions":{"type":"boolean","description":"用于确定是否应将异常消息记录到调试控制台的可选标志。默认为 true。","default":true},"moduleLoad":{"type":"boolean","description":"用于确定是否应将模块加载事件记录到调试控制台的可选标志。默认为 true。","default":true},"programOutput":{"type":"boolean","description":"用于确定是否应将程序输出记录到调试控制台的可选标志。默认为 true。","default":true},"engineLogging":{"type":"boolean","description":"用于确定是否应将诊断调试引擎消息记录到调试控制台的可选标志。默认为 false。","default":false},"threadExit":{"type":"boolean","description":"用于确定是否应将线程退出消息记录到调试控制台的可选标记。默认值: false。","default":false},"processExit":{"type":"boolean","description":"用于确定是否应将目标进程退出消息记录到调试控制台的可选标记。默认值: true。","default":true}}},"requireExactSource":{"type":"boolean","description":"可选标志，用于要求当前源代码与 pdb 匹配。","default":true},"symbolOptions":{"description":"用于控制如何找到和加载符号(.pdb 文件)的选项。","default":{"searchPaths":[],"searchMicrosoftSymbolServer":false},"type":"object","properties":{"searchPaths":{"type":"array","items":{"type":"string"},"description":"在其中搜索 .pdb 文件的符号服务器 URL (例如 http​://MyExampleSymbolServer)或目录(例如 /build/symbols)的数组。除了默认位置，还将搜索这些目录 - 在模块以及 pdb 最初放置到的路径的旁边。","default":[]},"searchMicrosoftSymbolServer":{"type":"boolean","description":"如果为 \"true\"，则 Microsoft 符号服务器(https​://msdl.microsoft.com​/download/symbols)会添加到符号搜索路径。如果未指定，此选项会默认为 \"false\"。","default":false},"cachePath":{"type":"string","description":"从符号服务器下载的符号应缓存到的目录。如果未指定，则在 Windows 上，调试程序将默认为 %TEMP%\\SymbolCache。","default":"%TEMP%\\SymbolCache"},"moduleFilter":{"description":"提供选项来控制调试程序将尝试为哪些模块(.dll 文件)加载符号(.pdb 文件)。","default":{"mode":"loadAllButExcluded","excludedModules":[]},"type":"object","required":["mode"],"properties":{"mode":{"type":"string","enum":["loadAllButExcluded","loadOnlyIncluded"],"enumDescriptions":["为所有模块加载符号，除非模块在 \"excludedModules\" 数组中。","请勿尝试为任何模块加载符号，除非该模块在 \"includedModules\" 数组中，或者它通过 \"includeSymbolsNextToModules\" 设置包含在内。"],"description":"控制模块筛选器在两种基本操作模式的下一种模式下操作。","default":"loadAllButExcluded"},"excludedModules":{"type":"array","items":{"type":"string"},"description":"调试程序不得为其加载符号的模块数组。支持通配符(例如: MyCompany.*.dll)。\n\n会忽略此属性，除非“模式”设置为 \"loadAllButExcluded\"。","default":[]},"includedModules":{"type":"array","items":{"type":"string"},"description":"调试程序应为其加载符号的模块数组。支持通配符(例如: MyCompany.*.dll)。\n\n会忽略此属性，除非“模式”设置为 \"loadOnlyIncluded\"。","default":["MyExampleModule.dll"]},"includeSymbolsNextToModules":{"type":"boolean","description":"如果为 true，则对于未在 \"includedModules\" 数组中的任何模块，调试程序将在模块本身和启动可执行文件旁边进行检查，但它将不检查符号搜索列表上的路径。此选项默认为 \"true\"\n\n会忽略此属性，除非“模式”设置为 \"loadOnlyIncluded\"。","default":true}}}}}}},"attach":{"type":"object","default":{},"required":["processId"],"properties":{"type":{"type":"string","description":"引擎的类型。必须为 \"cppvsdbg\"。","default":"cppvsdbg"},"symbolSearchPath":{"type":"string","description":"用于搜索符号(即 pdb)文件的目录列表(以分号分隔)。示例: \"c:\\dir1;c:\\dir2\"。","default":""},"processId":{"anyOf":[{"type":"string","description":"要将调试程序附加到的可选进程 ID。使用 \"${command:pickProcess}\" 获取要附加到的本地运行进程的列表。请注意，一些平台需要管理员权限才能附加到进程。","default":"${command:pickProcess}"},{"type":"integer","description":"要将调试程序附加到的可选进程 ID。使用 \"${command:pickProcess}\" 获取要附加到的本地运行进程的列表。请注意，一些平台需要管理员权限才能附加到进程。","default":0}]},"visualizerFile":{"type":"string","description":"调试此进程时要使用的 .natvis 文件。","default":""},"sourceFileMap":{"type":"object","description":"传递给调试引擎的可选源文件映射。示例: '{ \"/original/source/path\":\"/current/source/path\" }'。","default":{"<source-path>":"<target-path>"}},"logging":{"type":"object","description":"用于确定应将哪些类型的消息记录到调试控制台的可选标志。","default":{},"properties":{"exceptions":{"type":"boolean","description":"用于确定是否应将异常消息记录到调试控制台的可选标志。默认为 true。","default":true},"moduleLoad":{"type":"boolean","description":"用于确定是否应将模块加载事件记录到调试控制台的可选标志。默认为 true。","default":true},"programOutput":{"type":"boolean","description":"用于确定是否应将程序输出记录到调试控制台的可选标志。默认为 true。","default":true},"trace":{"type":"boolean","description":"用于确定是否应将诊断适配器命令跟踪记录到调试控制台的可选标志。默认为 false。","default":false}}},"requireExactSource":{"type":"boolean","description":"可选标志，用于要求当前源代码与 pdb 匹配。","default":true},"symbolOptions":{"description":"用于控制如何找到和加载符号(.pdb 文件)的选项。","default":{"searchPaths":[],"searchMicrosoftSymbolServer":false},"type":"object","properties":{"searchPaths":{"type":"array","items":{"type":"string"},"description":"在其中搜索 .pdb 文件的符号服务器 URL (例如 http​://MyExampleSymbolServer)或目录(例如 /build/symbols)的数组。除了默认位置，还将搜索这些目录 - 在模块以及 pdb 最初放置到的路径的旁边。","default":[]},"searchMicrosoftSymbolServer":{"type":"boolean","description":"如果为 \"true\"，则 Microsoft 符号服务器(https​://msdl.microsoft.com​/download/symbols)会添加到符号搜索路径。如果未指定，此选项会默认为 \"false\"。","default":false},"cachePath":{"type":"string","description":"从符号服务器下载的符号应缓存到的目录。如果未指定，则在 Windows 上，调试程序将默认为 %TEMP%\\SymbolCache。","default":"%TEMP%\\SymbolCache"},"moduleFilter":{"description":"提供选项来控制调试程序将尝试为哪些模块(.dll 文件)加载符号(.pdb 文件)。","default":{"mode":"loadAllButExcluded","excludedModules":[]},"type":"object","required":["mode"],"properties":{"mode":{"type":"string","enum":["loadAllButExcluded","loadOnlyIncluded"],"enumDescriptions":["为所有模块加载符号，除非模块在 \"excludedModules\" 数组中。","请勿尝试为任何模块加载符号，除非该模块在 \"includedModules\" 数组中，或者它通过 \"includeSymbolsNextToModules\" 设置包含在内。"],"description":"控制模块筛选器在两种基本操作模式的下一种模式下操作。","default":"loadAllButExcluded"},"excludedModules":{"type":"array","items":{"type":"string"},"description":"调试程序不得为其加载符号的模块数组。支持通配符(例如: MyCompany.*.dll)。\n\n会忽略此属性，除非“模式”设置为 \"loadAllButExcluded\"。","default":[]},"includedModules":{"type":"array","items":{"type":"string"},"description":"调试程序应为其加载符号的模块数组。支持通配符(例如: MyCompany.*.dll)。\n\n会忽略此属性，除非“模式”设置为 \"loadOnlyIncluded\"。","default":["MyExampleModule.dll"]},"includeSymbolsNextToModules":{"type":"boolean","description":"如果为 true，则对于未在 \"includedModules\" 数组中的任何模块，调试程序将在模块本身和启动可执行文件旁边进行检查，但它将不检查符号搜索列表上的路径。此选项默认为 \"true\"\n\n会忽略此属性，除非“模式”设置为 \"loadOnlyIncluded\"。","default":true}}}}}}}}}],"breakpoints":[{"language":"ada"},{"language":"c"},{"language":"cpp"},{"language":"cuda-cpp"},{"language":"cuda"},{"language":"rust"}],"jsonValidation":[{"fileMatch":"c_cpp_properties.json","url":"cpptools-schema:///c_cpp_properties.schema.json"}],"menus":{"view/title":[{"command":"C_Cpp.referencesViewGroupByType","when":"view == CppReferencesView && refView.isGroupedByFile","group":"navigation"},{"command":"C_Cpp.referencesViewUngroupByType","when":"view == CppReferencesView && !refView.isGroupedByFile","group":"navigation"},{"command":"C_Cpp.addSshTarget","when":"view == CppSshTargetsView","group":"navigation"},{"command":"C_Cpp.refreshCppSshTargetsView","when":"view == CppSshTargetsView","group":"navigation"}],"view/item/context":[{"command":"C_Cpp.setActiveSshTarget","when":"viewItem == CppSshTargetsView.targetLeafCanSetActive || viewItem == CppSshTargetsView.targetLeafRemovableCanSetActive","group":"inline@0"},{"command":"C_Cpp.sshTerminal","when":"view == CppSshTargetsView","group":"inline@1"},{"command":"C_Cpp.removeSshTarget","when":"viewItem == CppSshTargetsView.targetLeafRemovable || viewItem == CppSshTargetsView.targetLeafRemovableCanSetActive","group":"inline@2"}],"editor/title/run":[{"command":"C_Cpp.BuildAndDebugFile","when":"editorLangId == 'c' && config.C_Cpp.debugShortcut && cpptools.buildAndDebug.isSourceFile || editorLangId == 'cpp' && config.C_Cpp.debugShortcut && cpptools.buildAndDebug.isSourceFile || editorLangId == 'cuda-cpp' && config.C_Cpp.debugShortcut && cpptools.buildAndDebug.isSourceFile","group":"navigation@0"},{"command":"C_Cpp.BuildAndRunFile","when":"editorLangId == 'c' && config.C_Cpp.debugShortcut && cpptools.buildAndDebug.isSourceFile || editorLangId == 'cpp' && config.C_Cpp.debugShortcut && cpptools.buildAndDebug.isSourceFile || editorLangId == 'cuda-cpp' && config.C_Cpp.debugShortcut && cpptools.buildAndDebug.isSourceFile","group":"navigation@1"}],"editor/title":[{"command":"C_Cpp.AddDebugConfiguration","when":"editorLangId == 'c' && config.C_Cpp.debugShortcut && cpptools.buildAndDebug.isSourceFile && cpptools.buildAndDebug.isFolderOpen || editorLangId == 'cpp' && config.C_Cpp.debugShortcut && cpptools.buildAndDebug.isSourceFile && cpptools.buildAndDebug.isFolderOpen || editorLangId == 'cuda-cpp' && config.C_Cpp.debugShortcut && cpptools.buildAndDebug.isSourceFile && cpptools.buildAndDebug.isFolderOpen","group":"navigation"}],"editor/context":[{"command":"C_Cpp.SwitchHeaderSource","when":"config.C_Cpp.intelliSenseEngine != 'disabled' && config.C_Cpp.intelliSenseEngine != 'Disabled' && editorLangId == 'c' || config.C_Cpp.intelliSenseEngine != 'disabled' && config.C_Cpp.intelliSenseEngine != 'Disabled' && editorLangId == 'cpp' || config.C_Cpp.intelliSenseEngine != 'disabled' && config.C_Cpp.intelliSenseEngine != 'Disabled' && editorLangId == 'cuda-cpp'","group":"custom1@1"},{"command":"workbench.action.gotoSymbol","when":"config.C_Cpp.intelliSenseEngine != 'disabled' && config.C_Cpp.intelliSenseEngine != 'Disabled' && editorLangId == 'c' || config.C_Cpp.intelliSenseEngine != 'disabled' && config.C_Cpp.intelliSenseEngine != 'Disabled' && editorLangId == 'cpp' || config.C_Cpp.intelliSenseEngine != 'disabled' && config.C_Cpp.intelliSenseEngine != 'Disabled' && editorLangId == 'cuda-cpp'","group":"custom1@2"},{"command":"workbench.action.showAllSymbols","when":"config.C_Cpp.intelliSenseEngine != 'disabled' && config.C_Cpp.intelliSenseEngine != 'Disabled' && editorLangId == 'c' || config.C_Cpp.intelliSenseEngine != 'disabled' && config.C_Cpp.intelliSenseEngine != 'Disabled' && editorLangId == 'cpp' || config.C_Cpp.intelliSenseEngine != 'disabled' && config.C_Cpp.intelliSenseEngine != 'Disabled' && editorLangId == 'cuda-cpp'","group":"custom1@3"},{"command":"C_Cpp.RunCodeAnalysisOnActiveFile","when":"config.C_Cpp.intelliSenseEngine == 'Default' && editorLangId == 'c' || config.C_Cpp.intelliSenseEngine == 'default' && editorLangId == 'c' || config.C_Cpp.intelliSenseEngine == 'Default' && editorLangId == 'cpp' || config.C_Cpp.intelliSenseEngine == 'default' && editorLangId == 'cpp' || config.C_Cpp.intelliSenseEngine == 'Default' && editorLangId == 'cuda-cpp' || config.C_Cpp.intelliSenseEngine == 'default' && editorLangId == 'cuda-cpp'","group":"custom2@1"},{"command":"C_Cpp.RestartIntelliSenseForFile","when":"config.C_Cpp.intelliSenseEngine == 'Default' && editorLangId == 'c' || config.C_Cpp.intelliSenseEngine == 'default' && editorLangId == 'c' || config.C_Cpp.intelliSenseEngine == 'Default' && editorLangId == 'cpp' || config.C_Cpp.intelliSenseEngine == 'default' && editorLangId == 'cpp' || config.C_Cpp.intelliSenseEngine == 'Default' && editorLangId == 'cuda-cpp' || config.C_Cpp.intelliSenseEngine == 'default' && editorLangId == 'cuda-cpp'","group":"custom2@2"},{"command":"C_Cpp.AddDebugConfiguration","when":"editorLangId == 'c' && config.C_Cpp.debugShortcut && cpptools.buildAndDebug.isSourceFile && cpptools.buildAndDebug.isFolderOpen || editorLangId == 'cpp' && config.C_Cpp.debugShortcut && cpptools.buildAndDebug.isSourceFile && cpptools.buildAndDebug.isFolderOpen || editorLangId == 'cuda-cpp' && config.C_Cpp.debugShortcut && cpptools.buildAndDebug.isSourceFile && cpptools.buildAndDebug.isFolderOpen","group":"custom2@3"},{"command":"C_Cpp.GenerateDoxygenComment","when":"editorLangId == 'c' && config.C_Cpp.intelliSenseEngine != 'disabled' && config.C_Cpp.intelliSenseEngine != 'Disabled' || editorLangId == 'cpp' && config.C_Cpp.intelliSenseEngine != 'disabled' && config.C_Cpp.intelliSenseEngine != 'Disabled' || editorLangId == 'cuda-cpp' && config.C_Cpp.intelliSenseEngine != 'disabled' && config.C_Cpp.intelliSenseEngine != 'Disabled'","group":"custom2@4"},{"command":"C_Cpp.CreateDeclarationOrDefinition","when":"editorLangId == 'c' && config.C_Cpp.intelliSenseEngine != 'disabled' && config.C_Cpp.intelliSenseEngine != 'Disabled' || editorLangId == 'cpp' && config.C_Cpp.intelliSenseEngine != 'disabled' && config.C_Cpp.intelliSenseEngine != 'Disabled' || editorLangId == 'cuda-cpp' && config.C_Cpp.intelliSenseEngine != 'disabled' && config.C_Cpp.intelliSenseEngine != 'Disabled'","group":"custom2@5"}],"commandPalette":[{"command":"C_Cpp.referencesViewGroupByType","when":"cpptools.hasReferencesResults"},{"command":"C_Cpp.referencesViewUngroupByType","when":"cpptools.hasReferencesResults"},{"command":"C_Cpp.SelectDefaultCompiler","when":"never"},{"command":"C_Cpp.RescanCompilers","when":"never"},{"command":"C_Cpp.addSshTarget","when":"never"},{"command":"C_Cpp.removeSshTarget","when":"never"},{"command":"C_Cpp.setActiveSshTarget","when":"never"},{"command":"C_Cpp.selectSshTarget","when":"never"},{"command":"C_Cpp.activeSshTarget","when":"never"},{"command":"C_Cpp.refreshCppSshTargetsView","when":"never"},{"command":"C_Cpp.sshTerminal","when":"never"}]},"configurationDefaults":{"[cpp]":{"editor.wordBasedSuggestions":false,"editor.suggest.insertMode":"replace","editor.semanticHighlighting.enabled":true},"[cuda-cpp]":{"editor.wordBasedSuggestions":false,"editor.suggest.insertMode":"replace","editor.semanticHighlighting.enabled":true},"[c]":{"editor.wordBasedSuggestions":false,"editor.suggest.insertMode":"replace","editor.semanticHighlighting.enabled":true}},"semanticTokenTypes":[{"id":"referenceType","superType":"class","description":"C++/CLI 引用类型的样式。"},{"id":"cliProperty","superType":"property","description":"C++/CLI 属性的样式。"},{"id":"genericType","superType":"class","description":"C++/CLI 泛型类型的样式。"},{"id":"valueType","superType":"class","description":"C++/CLI 值类型的样式。"},{"id":"templateFunction","superType":"function","description":"C++ 模板函数的样式。"},{"id":"templateType","superType":"class","description":"C++ 模板类型的样式。"},{"id":"operatorOverload","superType":"operator","description":"C++ 重载运算符的样式。"},{"id":"memberOperatorOverload","superType":"operator","description":"C++ 重载运算符成员函数的样式。"},{"id":"newOperator","superType":"operator","description":"C++ `new` 或 `delete` 运算符的样式。"},{"id":"customLiteral","superType":"number","description":"C++ 用户定义文本的样式。"},{"id":"numberLiteral","superType":"number","description":"C++ 用户定义文本数字的样式。"},{"id":"stringLiteral","superType":"string","description":"C++ 用户定义文本字符串的样式。"}],"semanticTokenModifiers":[{"id":"global","description":"用于全局符号的样式。"},{"id":"local","description":"用于本地符号的样式。"}],"semanticTokenScopes":[{"language":"c","scopes":{"namespace":["entity.name.namespace.c"],"type":["entity.name.type.c"],"type.defaultLibrary":["support.type.c"],"struct":["storage.type.struct.c"],"class":["entity.name.type.class.c"],"class.defaultLibrary":["support.class.c"],"interface":["entity.name.type.interface.c"],"enum":["entity.name.type.enum.c"],"function":["entity.name.function.c"],"function.defaultLibrary":["support.function.c"],"method":["entity.name.function.member.c"],"variable":["variable.other.readwrite.c","entity.name.variable.c"],"variable.readonly":["variable.other.constant.c"],"variable.readonly.defaultLibrary":["support.constant.c"],"parameter":["variable.parameter.c"],"property":["variable.other.property.c"],"property.readonly":["variable.other.constant.property.c"],"enumMember":["variable.other.enummember.c"],"event":["variable.other.event.c"],"label":["entity.name.label.c"],"variable.global":["variable.other.global.c"],"variable.local":["variable.other.local.c"],"property.static":["variable.other.property.static.c"],"method.static":["entity.name.function.member.static.c"],"macro":["entity.name.function.preprocessor.c","entity.name.function.macro.c"],"referenceType":["entity.name.type.class.reference.c"],"cliProperty":["variable.other.property.cli.c"],"genericType":["entity.name.type.class.generic.c"],"valueType":["entity.name.type.class.value.c"],"templateFunction":["entity.name.function.templated.c"],"templateType":["entity.name.type.class.templated.c"],"operatorOverload":["entity.name.function.operator.c"],"memberOperatorOverload":["entity.name.function.operator.member.c"],"newOperator":["keyword.operator.new.c"],"numberLiteral":["entity.name.operator.custom-literal.number.c"],"customLiteral":["entity.name.operator.custom-literal.c"],"stringLiteral":["entity.name.operator.custom-literal.string.c"]}},{"language":"cpp","scopes":{"namespace":["entity.name.namespace.cpp"],"type":["entity.name.type.cpp"],"type.defaultLibrary":["support.type.cpp"],"struct":["storage.type.struct.cpp"],"class":["entity.name.type.class.cpp"],"class.defaultLibrary":["support.class.cpp"],"interface":["entity.name.type.interface.cpp"],"enum":["entity.name.type.enum.cpp"],"function":["entity.name.function.cpp"],"function.defaultLibrary":["support.function.cpp"],"method":["entity.name.function.member.cpp"],"variable":["variable.other.readwrite.cpp","entity.name.variable.cpp"],"variable.readonly":["variable.other.constant.cpp"],"variable.readonly.defaultLibrary":["support.constant.cpp"],"parameter":["variable.parameter.cpp"],"property":["variable.other.property.cpp"],"property.readonly":["variable.other.constant.property.cpp"],"enumMember":["variable.other.enummember.cpp"],"event":["variable.other.event.cpp"],"label":["entity.name.label.cpp"],"variable.global":["variable.other.global.cpp"],"variable.local":["variable.other.local.cpp"],"property.static":["variable.other.property.static.cpp"],"method.static":["entity.name.function.member.static.cpp"],"macro":["entity.name.function.preprocessor.cpp","entity.name.function.macro.cpp"],"referenceType":["entity.name.type.class.reference.cpp"],"cliProperty":["variable.other.property.cli.cpp"],"genericType":["entity.name.type.class.generic.cpp"],"valueType":["entity.name.type.class.value.cpp"],"templateFunction":["entity.name.function.templated.cpp"],"templateType":["entity.name.type.class.templated.cpp"],"operatorOverload":["entity.name.function.operator.cpp"],"memberOperatorOverload":["entity.name.function.operator.member.cpp"],"newOperator":["keyword.operator.new.cpp"],"numberLiteral":["entity.name.operator.custom-literal.number.cpp"],"customLiteral":["entity.name.operator.custom-literal.cpp"],"stringLiteral":["entity.name.operator.custom-literal.string.cpp"]}},{"language":"cuda-cpp","scopes":{"namespace":["entity.name.namespace.cuda-cpp"],"type":["entity.name.type.cuda-cpp"],"type.defaultLibrary":["support.type.cuda-cpp"],"struct":["storage.type.struct.cuda-cpp"],"class":["entity.name.type.class.cuda-cpp"],"class.defaultLibrary":["support.class.cuda-cpp"],"interface":["entity.name.type.interface.cuda-cpp"],"enum":["entity.name.type.enum.cuda-cpp"],"function":["entity.name.function.cuda-cpp"],"function.defaultLibrary":["support.function.cuda-cpp"],"method":["entity.name.function.member.cuda-cpp"],"variable":["variable.other.readwrite.cuda-cpp","entity.name.variable.cuda-cpp"],"variable.readonly":["variable.other.constant.cuda-cpp"],"variable.readonly.defaultLibrary":["support.constant.cuda-cpp"],"parameter":["variable.parameter.cuda-cpp"],"property":["variable.other.property.cuda-cpp"],"property.readonly":["variable.other.constant.property.cuda-cpp"],"enumMember":["variable.other.enummember.cuda-cpp"],"event":["variable.other.event.cuda-cpp"],"label":["entity.name.label.cuda-cpp"],"variable.global":["variable.other.global.cuda-cpp"],"variable.local":["variable.other.local.cuda-cpp"],"property.static":["variable.other.property.static.cuda-cpp"],"method.static":["entity.name.function.member.static.cuda-cpp"],"macro":["entity.name.function.preprocessor.cuda-cpp","entity.name.function.macro.cuda-cpp"],"referenceType":["entity.name.type.class.reference.cuda-cpp"],"cliProperty":["variable.other.property.cli.cuda-cpp"],"genericType":["entity.name.type.class.generic.cuda-cpp"],"valueType":["entity.name.type.class.value.cuda-cpp"],"templateFunction":["entity.name.function.templated.cuda-cpp"],"templateType":["entity.name.type.class.templated.cuda-cpp"],"operatorOverload":["entity.name.function.operator.cuda-cpp"],"memberOperatorOverload":["entity.name.function.operator.member.cuda-cpp"],"newOperator":["keyword.operator.new.cuda-cpp"],"numberLiteral":["entity.name.operator.custom-literal.number.cuda-cpp"],"customLiteral":["entity.name.operator.custom-literal.cuda-cpp"],"stringLiteral":["entity.name.operator.custom-literal.string.cuda-cpp"]}}]},"scripts":{"vscode:prepublish":"yarn run compile","compile":"node ./tools/prepublish.js && gulp copy-walkthrough-media && gulp generate-native-strings && gulp translations-generate && webpack --mode production --env vscode_nls","compile-dev":"node ./tools/prepublish.js && gulp copy-walkthrough-media && gulp generate-native-strings && webpack --mode development","compile-watch":"node ./tools/prepublish.js && gulp copy-walkthrough-media && gulp generate-native-strings && gulp translations-generate && webpack --mode production --env vscode_nls --watch --progress","compile-dev-watch":"node ./tools/prepublish.js && gulp copy-walkthrough-media && gulp generate-native-strings && webpack --mode development --watch --progress","generateOptionsSchema":"node ./tools/prepublish.js && node ./out/tools/generateOptionsSchema.js","generate-native-strings":"node ./tools/prepublish.js && gulp generate-native-strings","translations-export":"node ./tools/prepublish.js && gulp generate-native-strings && gulp translations-export","translations-generate":"node ./tools/prepublish.js && set NODE_OPTIONS=--no-experimental-fetch && gulp translations-generate","translations-import":"node ./tools/prepublish.js && gulp translations-import","copy-walkthrough-media":"node ./tools/prepublish.js && gulp copy-walkthrough-media","prepublishjs":"node ./tools/prepublish.js","pretest":"tsc -p test.tsconfig.json","lint":"gulp lint","unitTests":"tsc -p test.tsconfig.json && node ./out/test/unitTests/runTest.js","integrationTests":"tsc -p test.tsconfig.json && node ./out/test/integrationTests/languageServer/runTest.js","intelliSenseFeaturesTests":"tsc -p test.tsconfig.json && node ./out/test/integrationTests/IntelliSenseFeatures/runTest.js","import-edge-strings":"node ./import_edge_strings.js","postinstall":"npx vscode-dts dev && npx vscode-dts main"},"devDependencies":{"@octokit/rest":"^18.12.0","@types/glob":"^7.1.3","@types/minimatch":"^3.0.5","@types/mkdirp":"^0.5.2","@types/mocha":"^8.2.2","@types/node":"^14.14.0","@types/plist":"^3.0.2","@types/semver":"^7.1.0","@types/shell-quote":"^1.7.1","@types/tmp":"^0.1.0","@types/which":"^1.3.2","@types/yauzl":"^2.9.1","@typescript-eslint/eslint-plugin":"^4.31.1","@typescript-eslint/eslint-plugin-tslint":"^4.31.1","@typescript-eslint/parser":"^4.31.1","@vscode/test-electron":"^1.6.1","@vscode/dts":"^0.4.0","async-child-process":"^1.1.1","await-notify":"^1.0.1","eslint":"^7.32.0","eslint-plugin-import":"^2.24.2","eslint-plugin-jsdoc":"^39.3.3","event-stream":"^4.0.1","fs-extra":"^8.1.0","gulp":"^4.0.2","gulp-env":"^0.4.0","gulp-eslint":"^6.0.0","gulp-filter":"^6.0.0","gulp-mocha":"^8.0.0","gulp-sourcemaps":"^2.6.5","gulp-typescript":"^5.0.1","minimist":"^1.2.7","mocha":"^8.3.2","parse-git-config":"^3.0.0","parse5":"^5.1.0","parse5-traverse":"^1.0.3","ts-loader":"^8.1.0","tslint":"^5.19.0","typescript":"^4.4.3","vscode-debugadapter":"^1.35.0","vscode-debugprotocol":"^1.35.0","vscode-nls-dev":"^4.0.0-next.1","webpack":"^5.76.0","webpack-cli":"^5.0.1","xml2js":"^0.5.0"},"dependencies":{"@types/lodash":"^4.14.192","@vscode/extension-telemetry":"^0.6.2","chokidar":"^3.5.3","comment-json":"^4.1.1","editorconfig":"^0.15.3","escape-string-regexp":"^2.0.0","glob":"^7.1.6","lodash":"^4.17.21","minimatch":"^3.0.5","mkdirp":"^0.5.5","node-loader":"^2.0.0","plist":"^3.0.5","posix-getopt":"^1.2.1","shell-quote":"^1.7.3","ssh-config":"^4.1.0","tmp":"^0.2.1","vscode-cpptools":"^6.1.0","vscode-languageclient":"^8.1.0-next.4","vscode-nls":"^5.0.0","vscode-tas-client":"^0.1.27","which":"^2.0.2","yauzl":"^2.10.0"},"resolutions":{"ajv":"^6.12.3","ansi-regex":"^5.0.1","browserslist":"^4.16.6","decode-uri-component":"^0.2.1","follow-redirects":"1.14.8","glob-parent":"^5.1.2","hosted-git-info":"^3.0.8","json5":"^1.0.2","loader-utils":"^2.0.4","minimatch":"^3.0.5","minimist":"^1.2.7","nanoid":"^3.1.20","path-parse":"^1.0.7","set-value":"^4.0.1","terser":"^5.14.2","xml2js":"^0.5.0","yargs-parser":"^15.0.1","y18n":"^5.0.5"}},"location":{"$mid":1,"path":"/home/zjc/.vscode-server/extensions/ms-vscode.cpptools-1.16.3-linux-x64","scheme":"file"},"isBuiltin":false,"targetPlatform":"linux-x64","metadata":{"id":"690b692e-e8a9-493f-b802-8089d50ac1b2","publisherId":"5f5636e7-69ed-4afe-b5d6-8d231fb3d3ee","publisherDisplayName":"Microsoft","targetPlatform":"linux-x64","updated":false,"isPreReleaseVersion":false,"installedTimestamp":1688971048919},"isValid":true,"validations":[]},{"type":1,"identifier":{"id":"ms-vscode.cpptools-extension-pack","uuid":"3957b2f6-f086-49b5-a7b4-5da772123130"},"manifest":{"name":"cpptools-extension-pack","displayName":"C/C++ Extension Pack","description":"Popular extensions for C++ development in Visual Studio Code.","publisher":"ms-vscode","icon":"LanguageCCPP_color_128x.png","readme":"README.md","author":{"name":"Microsoft Corporation"},"license":"SEE LICENSE IN LICENSE.txt","version":"1.3.0","engines":{"vscode":"^1.48.0"},"categories":["Extension Packs"],"activationEvents":["onCommand:ms-vscode.cpptools-extension-pack.unavailableCommand"],"main":"main.js","repository":{"type":"git","url":"https://github.com/microsoft/vscode-cpptools.git","directory":"ExtensionPack"},"keywords":["C","C++","IntelliSense","Microsoft","color-theme","build","cmake"],"extensionPack":["ms-vscode.cpptools","ms-vscode.cpptools-themes","ms-vscode.cmake-tools"]},"location":{"$mid":1,"path":"/home/zjc/.vscode-server/extensions/ms-vscode.cpptools-extension-pack-1.3.0","scheme":"file"},"isBuiltin":false,"targetPlatform":"undefined","metadata":{"id":"3957b2f6-f086-49b5-a7b4-5da772123130","publisherId":"5f5636e7-69ed-4afe-b5d6-8d231fb3d3ee","publisherDisplayName":"Microsoft","targetPlatform":"undefined","updated":false,"isPreReleaseVersion":false,"installedTimestamp":1688971196901},"isValid":true,"validations":[]}]}